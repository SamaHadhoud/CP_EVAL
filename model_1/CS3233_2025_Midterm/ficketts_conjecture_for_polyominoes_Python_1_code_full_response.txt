To solve this problem, we need to find the maximum fraction of overlapping border cells between a convex polyomino and its rotated copy (by multiples of 90 degrees) when placed such that they overlap. The fraction is defined as the number of border cells of the original polyomino that lie inside the rotated copy divided by the number of border cells of the rotated copy that lie inside the original polyomino.

### Approach
1. **Problem Analysis**:
   - **Polyomino and Convexity**: The polyomino is a connected shape formed by unit squares. A convex polyomino ensures that any horizontal or vertical line intersects it in a connected segment.
   - **Border Cells**: A cell is on the border if at least one of its 8 adjacent cells is not part of the polyomino.
   - **Rotations and Translations**: The rotated copies can be in 0°, 90°, 180°, or 270° orientations. Translations must be integral to ensure cells overlap entirely or not at all.

2. **Key Insights**:
   - **Minimal Bounding Box**: Extract the minimal bounding box of the polyomino to reduce grid size and focus on relevant cells.
   - **Border Identification**: For each cell in the polyomino, determine if it is a border cell by checking its neighbors.
   - **Rotation Handling**: For each rotation (0°, 90°, 180°, 270°), transform the polyomino's cells and border cells into a normalized coordinate system.
   - **Overlap Calculation**: For each rotation and translation, count the overlapping border cells of the original and rotated polyomino. The translation is derived from the difference in coordinates between cells of the original and rotated polyomino.

3. **Algorithm Selection**:
   - **Minimal Bounding Box**: Identify the smallest rectangle containing all '#' characters.
   - **Border Cells**: Mark cells as border if any neighbor (in 8 directions) is outside the bounding box or not a '#'.
   - **Rotation Handling**: Apply rotation transformations (90°, 180°, 270°) to the polyomino's cells and border cells.
   - **Translation and Overlap**: For each rotation, compute translations that cause overlap by comparing cell coordinates. Count border cells of the original polyomino that lie within the rotated copy and vice versa.
   - **Fraction Maximization**: Track the maximum fraction encountered during the iterations, comparing fractions as integers to avoid floating-point inaccuracies.

4. **Complexity Analysis**:
   - **Grid Processing**: O(R*C) per test case to find the minimal bounding box and border cells.
   - **Rotation Handling**: O(area) per rotation to transform and normalize the polyomino's cells.
   - **Overlap Calculation**: For each rotation, O(n^2) per test case where n is the number of cells in the polyomino. Given 4 rotations, total is O(4*n^2) per test case.
   - **Overall Complexity**: The sum of R^3 + C^3 across test cases is bounded by 10^7, ensuring efficiency within constraints.

### Solution Code
```python
import math
from collections import defaultdict

def main():
    import sys
    data = sys.stdin.read().splitlines()
    t = int(data[0].strip())
    index = 1
    out_lines = []
    for _ in range(t):
        R, C = map(int, data[index].split())
        index += 1
        grid = []
        for i in range(R):
            grid.append(data[index].strip())
            index += 1
        
        r0 = 0
        while r0 < R and '#' not in grid[r0]:
            r0 += 1
        if r0 == R:
            out_lines.append("0/1")
            continue
        r1 = R - 1
        while r1 >= 0 and '#' not in grid[r1]:
            r1 -= 1
        col_has_hash = [False] * C
        for j in range(C):
            for i in range(R):
                if grid[i][j] == '#':
                    col_has_hash[j] = True
        c0 = 0
        while c0 < C and not col_has_hash[c0]:
            c0 += 1
        c1 = C - 1
        while c1 >= 0 and not col_has_hash[c1]:
            c1 -= 1
        
        H = r1 - r0 + 1
        W = c1 - c0 + 1
        grid0 = []
        for i in range(r0, r1 + 1):
            grid0.append(grid[i][c0:c1 + 1])
        
        A0 = set()
        border0 = set()
        directions = [(-1, -1), (-1, 0), (-1, 1),
                      (0, -1),           (0, 1),
                      (1, -1),  (1, 0),  (1, 1)]
        for i in range(H):
            for j in range(W):
                if grid0[i][j] == '#':
                    A0.add((i, j))
                    is_border = False
                    for dx, dy in directions:
                        ni, nj = i + dx, j + dy
                        if 0 <= ni < H and 0 <= nj < W:
                            if grid0[ni][nj] != '#':
                                is_border = True
                                break
                        else:
                            is_border = True
                            break
                    if is_border:
                        border0.add((i, j))
        
        rotations = [0, 90, 180, 270]
        best_num = 0
        best_den = 1
        for rot in rotations:
            if rot == 0:
                A_rot = A0
                border_rot = border0
            else:
                A_rot = set()
                border_rot = set()
                if rot == 90:
                    for (i, j) in A0:
                        A_rot.add((j, H - 1 - i))
                    for (i, j) in border0:
                        border_rot.add((j, H - 1 - i))
                elif rot == 180:
                    for (i, j) in A0:
                        A_rot.add((H - 1 - i, W - 1 - j))
                    for (i, j) in border0:
                        border_rot.add((H - 1 - i, W - 1 - j))
                elif rot == 270:
                    for (i, j) in A0:
                        A_rot.add((W - 1 - j, i))
                    for (i, j) in border0:
                        border_rot.add((W - 1 - j, i))
            
            trans_numer = defaultdict(int)
            for a in border0:
                for b in A_rot:
                    dx = a[0] - b[0]
                    dy = a[1] - b[1]
                    trans_numer[(dx, dy)] += 1
            
            trans_denom = defaultdict(int)
            for a in A0:
                for b in border_rot:
                    dx = a[0] - b[0]
                    dy = a[1] - b[1]
                    trans_denom[(dx, dy)] += 1
            
            for key in trans_numer:
                num_val = trans_numer[key]
                den_val = trans_denom.get(key, 0)
                if den_val == 0:
                    continue
                if best_num * den_val < best_den * num_val:
                    best_num = num_val
                    best_den = den_val
        
        if best_num == 0:
            out_lines.append("0/1")
        else:
            g = math.gcd(best_num, best_den)
            best_num //= g
            best_den //= g
            out_lines.append(f"{best_num}/{best_den}")
    
    for line in out_lines:
        print(line)

if __name__ == "__main__":
    main()
```

### Explanation
1. **Reading Input**: The input is read in one go for efficiency, especially given the constraints.
2. **Minimal Bounding Box**: The smallest rectangle containing all '#' characters is identified by scanning rows and columns.
3. **Border Identification**: For each cell in the bounding box, it is marked as a border cell if any of its 8 neighbors is either outside the bounding box or not a '#'.
4. **Rotation Handling**: The polyomino is rotated by 0°, 90°, 180°, and 270°. For each rotation, the new coordinates of the cells and border cells are computed.
5. **Translation and Overlap Calculation**: For each rotation, possible translations (shifts) that cause overlap between the original and rotated polyomino are derived. The counts of overlapping border cells are aggregated.
6. **Fraction Maximization**: The maximum fraction of overlapping border cells is tracked and reduced to its simplest form before output.
7. **Output**: Results for all test cases are printed at the end.

This approach efficiently handles the constraints by leveraging minimal bounding boxes, rotation transformations, and careful counting of overlapping border cells, ensuring optimal performance even for large inputs.