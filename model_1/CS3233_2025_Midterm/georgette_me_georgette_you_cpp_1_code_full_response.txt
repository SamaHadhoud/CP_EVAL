To solve this problem, we need to count the number of permutations of size \( N \) that are not equal to their own inverse permutation. The solution involves leveraging combinatorial mathematics to efficiently compute the required values for multiple queries.

### Approach
1. **Problem Analysis**: 
   - A permutation array \( P \) of size \( N \) contains integers from \( 0 \) to \( N-1 \) with no duplicates. The inverse permutation \( Q \) is defined such that \( Q_{P_i} = i \) for all \( 0 \le i < N \).
   - We need to count permutations where \( P \) is not equal to its inverse \( Q \). 

2. **Key Insight**:
   - The total number of permutations of size \( N \) is \( N! \).
   - Permutations that are equal to their own inverse are called involutions. The number of involutions for size \( N \) can be computed using the recurrence relation:
     - \( I(0) = 1 \)
     - \( I(1) = 1 \)
     - \( I(N) = I(N-1) + (N-1) \times I(N-2) \) for \( N \geq 2 \)
   - The answer for each query \( N \) is \( (N! - I(N)) \mod M \).

3. **Precomputation**:
   - Precompute the factorial array \( \text{fact} \) where \( \text{fact}[i] = i! \mod M \) for \( i \) from \( 0 \) to \( \text{MAX\_N} \).
   - Precompute the involution array \( \text{involution} \) using the recurrence relation for \( I(N) \mod M \).

4. **Query Processing**:
   - For each query \( N \), compute the result as \( (\text{fact}[N] - \text{involution}[N] + M) \mod M \) to ensure the result is non-negative.

### Solution Code
```cpp
#include <iostream>
#include <vector>
using namespace std;

const int MAX_N = 1000000;

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    
    int T;
    long long M;
    cin >> T >> M;

    vector<long long> fact(MAX_N + 1);
    vector<long long> involution(MAX_N + 1);

    fact[0] = 1;
    for (int i = 1; i <= MAX_N; i++) {
        fact[i] = fact[i - 1] * i % M;
    }

    involution[0] = 1;
    if (MAX_N >= 1) {
        involution[1] = 1;
    }
    for (int i = 2; i <= MAX_N; i++) {
        long long temp = 1LL * (i - 1) * involution[i - 2] % M;
        involution[i] = (involution[i - 1] + temp) % M;
    }

    while (T--) {
        int N;
        cin >> N;
        long long ans = (fact[N] - involution[N] + M) % M;
        cout << ans << '\n';
    }

    return 0;
}
```

### Explanation
1. **Precomputation**:
   - **Factorial Array (`fact`)**:
     - Initialize \( \text{fact}[0] = 1 \).
     - For each \( i \) from \( 1 \) to \( \text{MAX\_N} \), compute \( \text{fact}[i] = \text{fact}[i-1] \times i \mod M \).
   - **Involution Array (`involution`)**:
     - Initialize \( \text{involution}[0] = 1 \) and \( \text{involution}[1] = 1 \).
     - For each \( i \) from \( 2 \) to \( \text{MAX\_N} \), compute \( \text{involution}[i] = (\text{involution}[i-1] + (i-1) \times \text{involution}[i-2]) \mod M \).

2. **Query Handling**:
   - For each query \( N \), the result is \( (\text{fact}[N] - \text{involution}[N] + M) \mod M \). Adding \( M \) ensures the result is non-negative if \( \text{fact}[N] < \text{involution}[N] \).

This approach efficiently precomputes necessary values in \( O(\text{MAX\_N}) \) time and answers each query in \( O(1) \) time, making it suitable for large input sizes. The solution leverages modular arithmetic to handle large numbers and ensures correctness through well-known combinatorial recurrences.