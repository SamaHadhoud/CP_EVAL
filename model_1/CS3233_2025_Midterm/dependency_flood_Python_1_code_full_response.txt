To solve this problem, we need to manage a set of course dependencies in a directed acyclic graph (DAG) where each edge represents a prerequisite relationship. The goal is to process queries that add new dependencies while ensuring that all courses can be completed within K semesters. The key insight is that the longest chain of dependencies (a path of consecutive dependencies) must not exceed K courses, as each course in the chain requires a distinct semester.

### Approach
1. **Initial Setup**: Read the input values, including the number of courses (N), initial dependencies (M), and the maximum number of semesters (K). Store the initial dependencies in adjacency lists for outgoing and incoming edges, and in a set for quick lookup.
2. **Precomputation**:
   - **Longest Chain Ending at Each Course (dp_in)**: For each course, compute the length of the longest chain ending at that course by processing nodes in increasing order (since edges go from lower to higher indices).
   - **Longest Chain Starting at Each Course (dp_out)**: For each course, compute the length of the longest chain starting at that course by processing nodes in decreasing order.
3. **Query Processing**:
   - For each query to add a new dependency (C, D):
     - If the dependency already exists, output "accept".
     - Otherwise, check if adding the new dependency creates a chain longer than K. Specifically, if `dp_in[C] + dp_out[D] >= K+1`, output "reject" because it would require more than K semesters.
     - If acceptable, add the dependency to the graph and update the adjacency lists and edge set. Then, propagate the updates:
       - **Update dp_in for D and its descendants**: If the new chain ending at D (via C) is longer and within K, update D and propagate to its descendants using BFS.
       - **Update dp_out for C and its ancestors**: If the new chain starting at C (via D) is longer and within K, update C and propagate to its ancestors using BFS.

### Solution Code
```python
import sys
from collections import deque

def main():
    data = sys.stdin.read().split()
    it = iter(data)
    n = int(next(it))
    m = int(next(it))
    K_val = int(next(it))
    
    edges_set = set()
    adj_out = [[] for _ in range(n+1)]
    adj_in = [[] for _ in range(n+1)]
    
    for _ in range(m):
        u = int(next(it))
        v = int(next(it))
        edges_set.add((u, v))
        adj_out[u].append(v)
        adj_in[v].append(u)
    
    dp_in = [1] * (n+1)
    dp_out = [1] * (n+1)
    
    for i in range(1, n+1):
        for j in adj_in[i]:
            if dp_in[j] + 1 > dp_in[i]:
                dp_in[i] = dp_in[j] + 1
                
    for i in range(n, 0, -1):
        for j in adj_out[i]:
            if dp_out[j] + 1 > dp_out[i]:
                dp_out[i] = dp_out[j] + 1
                
    q = int(next(it))
    output_lines = []
    
    for _ in range(q):
        c = int(next(it))
        d = int(next(it))
        if (c, d) in edges_set:
            output_lines.append("accept")
        else:
            if dp_in[c] + dp_out[d] >= K_val + 1:
                output_lines.append("reject")
            else:
                output_lines.append("accept")
                edges_set.add((c, d))
                adj_out[c].append(d)
                adj_in[d].append(c)
                
                new_in = dp_in[c] + 1
                if new_in > dp_in[d] and new_in <= K_val:
                    dp_in[d] = new_in
                    queue_in = deque([d])
                    while queue_in:
                        u = queue_in.popleft()
                        for w in adj_out[u]:
                            candidate = dp_in[u] + 1
                            if candidate > dp_in[w] and candidate <= K_val:
                                dp_in[w] = candidate
                                queue_in.append(w)
                                
                new_out = dp_out[d] + 1
                if new_out > dp_out[c] and new_out <= K_val:
                    dp_out[c] = new_out
                    queue_out = deque([c])
                    while queue_out:
                        u = queue_out.popleft()
                        for w in adj_in[u]:
                            candidate = dp_out[u] + 1
                            if candidate > dp_out[w] and candidate <= K_val:
                                dp_out[w] = candidate
                                queue_out.append(w)
                                
    print("\n".join(output_lines))

if __name__ == "__main__":
    main()
```

### Explanation
1. **Initial Setup**: The input is read and parsed. The initial dependencies are stored in adjacency lists (`adj_out` for outgoing edges and `adj_in` for incoming edges) and a set (`edges_set`) for quick existence checks.
2. **Precomputation**: 
   - **dp_in Array**: For each course, the longest chain ending at that course is computed by processing nodes from 1 to N. For each node, the value is derived from its incoming edges.
   - **dp_out Array**: For each course, the longest chain starting at that course is computed by processing nodes from N down to 1. For each node, the value is derived from its outgoing edges.
3. **Query Processing**:
   - For each query, if the dependency exists, it is accepted.
   - If not, the sum `dp_in[C] + dp_out[D]` is checked. If it exceeds K, the dependency is rejected.
   - If accepted, the dependency is added to the graph. The `dp_in` and `dp_out` arrays are updated for affected nodes (D and its descendants for `dp_in`, C and its ancestors for `dp_out`) using BFS to propagate changes within the K constraint.
4. **Output**: The results for all queries are printed.

This approach efficiently manages dynamic updates to the dependency graph while ensuring the scheduling constraint (K semesters) is maintained, leveraging BFS for propagation to keep the solution scalable.