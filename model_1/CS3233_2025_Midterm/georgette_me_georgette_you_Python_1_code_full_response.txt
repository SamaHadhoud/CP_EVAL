To solve this problem, we need to count the number of permutations of size \( N \) that are not equal to their own inverse permutation. The solution involves leveraging combinatorial mathematics to efficiently compute the result for multiple queries.

### Approach
1. **Problem Analysis**:
   - A permutation array \( P \) of size \( N \) contains integers from \( 0 \) to \( N-1 \) with no duplicates.
   - The inverse permutation \( Q \) of \( P \) is defined such that \( Q_{P_i} = i \) for all \( 0 \le i < N \).
   - We need to count permutations where \( P \) is not equal to its inverse \( Q \).

2. **Key Insight**:
   - The total number of permutations of size \( N \) is \( N! \).
   - The number of permutations that are equal to their own inverse (involutions) can be computed using the recurrence relation:
     - \( I(0) = 1 \)
     - \( I(1) = 1 \)
     - \( I(N) = I(N-1) + (N-1) \times I(N-2) \) for \( N \ge 2 \)
   - The answer for each query \( N \) is \( (N! - I(N)) \mod M \).

3. **Algorithm Selection**:
   - **Precomputation**: 
     - Precompute factorials \( N! \mod M \) for all \( N \) up to \( 10^6 \) using dynamic programming.
     - Precompute the number of involutions \( I(N) \mod M \) for all \( N \) up to \( 10^6 \) using the recurrence relation.
   - **Query Processing**:
     - For each query \( N \), compute the result as \( (fact[N] - involution[N]) \mod M \).

4. **Complexity Analysis**:
   - **Precomputation Time**: \( O(\text{MAX\_N}) \) where \( \text{MAX\_N} = 10^6 \). Each step involves simple arithmetic operations modulo \( M \).
   - **Query Time**: \( O(1) \) per query after precomputation.
   - **Space Complexity**: \( O(\text{MAX\_N}) \) to store factorials and involutions.

### Solution Code
```python
import sys

def main():
    data = sys.stdin.read().split()
    if not data:
        return
    T = int(data[0])
    M = int(data[1])
    queries = list(map(int, data[2:2+T]))
    
    max_n = 1000000
    fact_arr = [1] * (max_n + 1)
    for i in range(1, max_n + 1):
        fact_arr[i] = fact_arr[i - 1] * i % M
        
    involution_arr = [1] * (max_n + 1)
    if max_n >= 1:
        involution_arr[1] = 1
    for n in range(2, max_n + 1):
        term = (n - 1) * involution_arr[n - 2] % M
        involution_arr[n] = (involution_arr[n - 1] + term) % M
        
    out_lines = []
    for N in queries:
        ans = (fact_arr[N] - involution_arr[N]) % M
        if ans < 0:
            ans += M
        out_lines.append(str(ans))
    
    sys.stdout.write("\n".join(out_lines))

if __name__ == "__main__":
    main()
```

### Explanation
1. **Reading Input**: The input is read all at once for efficiency, especially given the constraints.
2. **Precomputation**:
   - **Factorials Array (`fact_arr`)**: Computes \( N! \mod M \) for all \( N \) from \( 0 \) to \( 10^6 \) using dynamic programming. The recurrence is \( \text{fact\_arr}[0] = 1 \) and \( \text{fact\_arr}[i] = \text{fact\_arr}[i-1] \times i \mod M \).
   - **Involutions Array (`involution_arr`)**: Computes the number of involutions \( I(N) \mod M \) for all \( N \) from \( 0 \) to \( 10^6 \) using the recurrence \( I(0) = 1 \), \( I(1) = 1 \), and \( I(N) = I(N-1) + (N-1) \times I(N-2) \mod M \).
3. **Query Processing**: For each query \( N \), the result is computed as \( (\text{fact\_arr}[N] - \text{involution\_arr}[N]) \mod M \). If the result is negative, \( M \) is added to ensure it lies within the range \( [0, M-1] \).
4. **Output**: The results for all queries are collected in a list and printed at once to minimize I/O operations, which is crucial for handling large input sizes efficiently.

This approach efficiently precomputes necessary values to answer each query in constant time, making it suitable for large input sizes as specified in the problem constraints.