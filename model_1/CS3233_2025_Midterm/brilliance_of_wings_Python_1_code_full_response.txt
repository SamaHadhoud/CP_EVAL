To solve this problem, we need to determine the minimum number of operations required to transform one tree into another tree with the same set of vertices. Each operation consists of removing an edge from the first tree and adding an edge from the second tree, ensuring the graph remains a tree after each operation.

### Approach
1. **Problem Analysis**: The problem involves comparing two trees, \( T1 \) and \( T2 \), to find the number of edges in \( T1 \) that are not present in \( T2 \). Each such edge requires one operation to be replaced by an edge from \( T2 \) that is missing in \( T1 \).
2. **Key Insight**: The edges common to both trees do not require any operations. The number of operations needed is equal to the number of edges in \( T1 \) that are not in \( T2 \). This is because each operation replaces one non-common edge from \( T1 \) with a non-common edge from \( T2 \).
3. **Algorithm Selection**: 
   - **Normalize Edges**: Represent each edge as a tuple where the first element is the smaller vertex and the second is the larger vertex. This ensures undirected edges are handled uniformly.
   - **Set for Lookup**: Store the edges of \( T2 \) in a set for O(1) average-time membership checks.
   - **Count Mismatches**: Iterate through each edge in \( T1 \), count how many are not found in \( T2 \).
4. **Complexity Analysis**: 
   - **Time Complexity**: O(N) for reading input and processing edges. Set operations (insertion and lookup) are O(1) on average.
   - **Space Complexity**: O(N) to store edges of \( T2 \) in a set and edges of \( T1 \) in a list.

### Solution Code
```python
import sys

def main():
    data = sys.stdin.read().split()
    n = int(data[0])
    edges1 = []
    index = 1
    for _ in range(n - 1):
        u = int(data[index])
        v = int(data[index + 1])
        index += 2
        if u > v:
            u, v = v, u
        edges1.append((u, v))
    
    edges2_set = set()
    for _ in range(n - 1):
        u = int(data[index])
        v = int(data[index + 1])
        index += 2
        if u > v:
            u, v = v, u
        edges2_set.add((u, v))
    
    count = 0
    for edge in edges1:
        if edge not in edges2_set:
            count += 1
            
    print(count)

if __name__ == "__main__":
    main()
```

### Explanation
1. **Reading Input**: The input is read all at once for efficiency. The first value is \( N \), the number of vertices.
2. **Processing First Tree (\( T1 \))**: The next \( N-1 \) lines (edges of \( T1 \)) are read. Each edge is normalized (smaller vertex first) and stored in a list.
3. **Processing Second Tree (\( T2 \))**: The subsequent \( N-1 \) lines (edges of \( T2 \)) are read, normalized, and stored in a set for O(1) average-time lookups.
4. **Counting Operations**: For each edge in \( T1 \), we check if it exists in \( T2 \) using the set. If it does not, we increment our count.
5. **Output Result**: The count, representing the number of edges in \( T1 \) not present in \( T2 \), is printed. This count is the minimum number of operations needed to transform \( T1 \) into \( T2 \), as each operation replaces one such edge with a missing edge from \( T2 \).