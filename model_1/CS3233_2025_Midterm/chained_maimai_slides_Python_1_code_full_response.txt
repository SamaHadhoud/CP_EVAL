To solve this problem, we need to find the minimum range of slide speeds used in a level of the rhythm game *maimai* such that the level meets specific conditions. The level must consist of chain slides that form disjoint cycles, cover all 8 buttons, use at least K slides, and each slide type can be used at most once. The solution involves sorting the slides by speed and using a two-pointer technique to explore possible speed ranges, combined with a dynamic programming approach to check for valid configurations within each range.

### Approach
1. **Problem Analysis**:
   - The problem requires selecting a subset of slides (edges) from a given list to form one or more disjoint cycles that cover all 8 buttons (nodes).
   - Each button must be the start of at least one slide in the subset (i.e., no isolated nodes).
   - The number of slides used must be at least K.
   - The difference between the maximum and minimum slide speeds in the subset (range) should be minimized.

2. **Key Insights**:
   - The selected slides must form an Eulerian subgraph where each node has equal in-degree and out-degree, and no node is isolated.
   - The problem can be modeled as a directed multigraph where nodes are buttons and slides are edges.
   - The solution involves checking subsets of slides within a sliding window of sorted speeds to find valid configurations efficiently.

3. **Algorithm Selection**:
   - **Sorting**: Sort all slides by their speeds to facilitate the sliding window approach.
   - **Two-Pointer Technique**: Use two pointers (left and right) to define the current speed range. The goal is to find the smallest range [L, R] such that the slides within this range contain a valid subset.
   - **Dynamic Programming (DP)**: For each window [L, R], use a DP approach to check if a valid subset exists. The DP state tracks the net flow (out-degree minus in-degree) for nodes 1 to 7 and a bitmask indicating which nodes have been used as a source at least once. The net flow for node 8 is derived from the sum of flows of nodes 1-7.

4. **Optimization**:
   - **Bounded Net Flow**: To manage the state space, the net flow for each node is bounded to a reasonable range (e.g., -20 to 20). This prunes unreachable states and keeps the computation feasible.
   - **State Representation**: The DP state is a tuple `(f0, f1, ..., f6, mask)` where `fi` is the net flow for node `i+1` and `mask` is an 8-bit integer indicating nodes used as sources.

5. **Complexity Analysis**:
   - **Sorting Slides**: O(M log M) for sorting M slides.
   - **Two-Pointer Loop**: O(M^2) in the worst case, as each left pointer iterates over M slides, and for each, the right pointer may iterate up to M slides.
   - **DP State Processing**: For each window, the number of states is bounded by (41)^7 * 256 (due to net flow bounds and the 8-bit mask), but in practice, the actual number of states is much smaller due to pruning and the problem constraints.

### Solution Code
```python
import sys

def main():
    data = sys.stdin.read().split()
    if not data:
        return
    M = int(data[0])
    K = int(data[1])
    edges = []
    index = 2
    for i in range(M):
        a = int(data[index]); b = int(data[index+1]); s_val = int(data[index+2])
        index += 3
        edges.append((a, b, s_val))
    
    edges_sorted = sorted(edges, key=lambda x: x[2])
    
    BOUND = 20
    INF = 10**18
    ans = INF
    
    for L in range(M):
        dp = {}
        init_state = (0, 0, 0, 0, 0, 0, 0, 0)
        dp[init_state] = 0
        found_ans_here = False
        for R in range(L, M):
            a, b, speed_val = edges_sorted[R]
            new_dp = dp.copy()
            for state, count_edges in list(dp.items()):
                f0, f1, f2, f3, f4, f5, f6, mask_val = state
                f_list = [f0, f1, f2, f3, f4, f5, f6]
                new_f = f_list.copy()
                if 1 <= a <= 7:
                    new_f[a-1] += 1
                if 1 <= b <= 7:
                    new_f[b-1] -= 1
                if any(abs(x) > BOUND for x in new_f):
                    continue
                new_mask = mask_val | (1 << (a-1))
                new_state_tuple = (new_f[0], new_f[1], new_f[2], new_f[3], new_f[4], new_f[5], new_f[6], new_mask)
                new_count = count_edges + 1
                if new_state_tuple in new_dp:
                    if new_count > new_dp[new_state_tuple]:
                        new_dp[new_state_tuple] = new_count
                else:
                    new_dp[new_state_tuple] = new_count
            dp = new_dp
            final_state = (0, 0, 0, 0, 0, 0, 0, 255)
            if final_state in dp and dp[final_state] >= K:
                current_range = edges_sorted[R][2] - edges_sorted[L][2]
                if current_range < ans:
                    ans = current_range
                found_ans_here = True
                break
        if found_ans_here:
            continue
    if ans == INF:
        print(-1)
    else:
        print(ans)

if __name__ == "__main__":
    main()
```

### Explanation
1. **Input Parsing**: The input is read and parsed into the number of slides (M) and the minimum number of slides needed (K), followed by the slides themselves (start button, end button, speed).
2. **Sorting**: Slides are sorted by their speeds to facilitate the sliding window approach.
3. **Sliding Window with Two Pointers**: For each starting index (left pointer), the right pointer expands the window to include slides with higher speeds. For each window, the algorithm checks if a valid subset of slides exists.
4. **Dynamic Programming**: The DP state tracks the net flow for nodes 1-7 and a bitmask of nodes used as sources. For each slide in the current window, the algorithm updates the DP state by considering whether to include the slide.
5. **Final State Check**: After processing each window, the algorithm checks if the final state (net flow zero for all nodes and all nodes used as sources) is achieved with at least K slides. If so, the speed range is compared to the current minimum.
6. **Output**: The smallest valid speed range is printed, or -1 if no valid configuration exists.

This approach efficiently explores possible speed ranges while leveraging dynamic programming to validate configurations within each range, ensuring optimal performance for the given constraints.