To solve this problem, we need to count the number of positive integers \( n \) (where \( 1 \leq n \leq X \)) such that both \( n \) and \( n^2 \) have non-decreasing digits in base 10. Given the constraints \( X \leq 10^{18} \) and \( T \leq 10^5 \), a brute-force approach is infeasible. Instead, we leverage the observation that the set of numbers with non-decreasing digits is relatively small (about 4.6 million for \( n \leq 10^{18} \)).

### Approach
1. **Generate Sorted Numbers**: We generate all numbers \( n \) with non-decreasing digits up to \( 10^{18} \). This is done using a BFS approach, processing numbers by their digit length (from 1 to 18 digits). For each number, the next digit must be at least the last digit to maintain the non-decreasing property.
2. **Check Valid Numbers**: For each generated number \( n \), compute \( n^2 \) and check if its digits are non-decreasing. This involves:
   - **Computing \( n^2 \)**: Using Python's built-in integers to handle large squares (up to \( 10^{36} \)).
   - **Digit Check**: Convert \( n^2 \) to a string and verify that each digit is less than or equal to the next digit.
3. **Answer Queries**: Store all valid \( n \) in a sorted list. For each query \( X \), count how many valid numbers are \( \leq X \) by iterating through the precomputed list (since the list is small, linear search is efficient).

### Solution Code
```python
import collections

def main():
    max_val = 10**18
    q = collections.deque()
    valid_n = []
    
    for d in range(1, 10):
        q.append((d, d))
    
    while q:
        n, last = q.popleft()
        
        n_sq = n * n
        s = str(n_sq)
        flag = True
        for i in range(1, len(s)):
            if s[i] < s[i-1]:
                flag = False
                break
        if flag:
            valid_n.append(n)
        
        if n * 10 > max_val:
            continue
            
        for d in range(last, 10):
            next_num = n * 10 + d
            if next_num > max_val:
                break
            q.append((next_num, d))
    
    T = int(input().strip())
    out_lines = []
    for _ in range(T):
        X = int(input().strip())
        cnt = 0
        for num in valid_n:
            if num <= X:
                cnt += 1
            else:
                break
        out_lines.append(str(cnt))
    
    print("\n".join(out_lines))

if __name__ == '__main__':
    main()
```

### Explanation
1. **Precomputation**:
   - We start by initializing a queue with single-digit numbers (1 through 9).
   - For each number dequeued, we check if its square has non-decreasing digits by converting the square to a string and verifying each adjacent digit pair.
   - Valid numbers (where both the number and its square have non-decreasing digits) are stored in a list.
   - We extend each number by appending digits from the last digit to 9, ensuring the new number remains non-decreasing and does not exceed \( 10^{18} \).

2. **Query Processing**:
   - For each test case, we read \( X \) and count how many valid numbers are less than or equal to \( X \) by iterating through the precomputed list (which is in increasing order).
   - The result for each query is the count of such valid numbers.

This approach efficiently handles the constraints by leveraging the limited set of sorted numbers and precomputing valid numbers once, allowing each query to be processed in linear time relative to the number of valid numbers (which is small, around 110 for \( X \leq 10^{18} \)). The BFS ensures numbers are processed in increasing order, simplifying the query resolution.