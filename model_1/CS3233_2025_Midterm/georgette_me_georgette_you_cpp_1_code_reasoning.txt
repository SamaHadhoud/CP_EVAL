 We are counting permutations that are not equal to their own inverse.
 Total permutations: fact[N] = N! mod M.
 Involutions (permutations that are their own inverse): I(N) = I(N-1) + (N-1)*I(N-2).
 Then answer = (fact[N] - I(N)) mod M.

 Steps:
 1. Precompute factorials up to MAX_N (1000000) modulo M.
 2. Precompute involutions up to MAX_N modulo M using recurrence:
      involution[0] = 1
      involution[1] = 1
      for i>=2: involution[i] = (involution[i-1] + (i-1)*involution[i-2]) % M

 3. For each test case (T times), read N and output (fact[N] - involution[N]) mod M (adjusting for negative).

 Constraints: T up to 10^6, N up to 10^6, M in [10^8, 10^9+7] (prime or composite? doesn't matter for mod arithmetic).

 Note: We must precompute for all possible N up to MAX_N (1000000) because T can be up to 10^6 and N up to 10^6.

 Implementation:
   - Precomputation arrays: fact and involution of size MAX_N+1.
   - We'll read T and M first, then precompute the arrays for n from 0 to MAX_N.

 Important: Since M is given and can be as large as 10^9+7, we use long long to avoid overflow in multiplications? But note: MAX_N is 10^6, and M is at least 10^8, so the numbers in the arrays can be up to M-1. We do modulo M at each step.

 However, note that (i-1)*involution[i-2] might be as large as (10^6-1)* (something mod M). But M is at least 10^8, so the intermediate product can be up to (10^6-1)*(M-1) which is about 10^15, so we use long long (which is typically 64-bit, so up to 9e18) and modulo M.

 Steps in code:
   - Include necessary headers.
   - Use fast I/O: ios::sync_with_stdio(false); cin.tie(0);
   - Precompute arrays for factorial and involution for all n in [0, MAX_N] (MAX_N=1000000).
   - Then process T queries.

 Let's code accordingly.

 But note: The problem statement sample input had two integers T and M on the first line, then T lines each with one integer N.

 However, the sample input had an unusual format (with # and .) but that was probably a mistake? The problem says:
   Input: 
        First line: T and M.
        Next T lines: each one integer N.

 So we ignore the sample input's extra lines.

 Let's write the code accordingly.

 Important: The recurrence for involutions:
   I[0] = 1
   I[1] = 1
   for i from 2 to MAX_N:
        I[i] = (I[i-1] + (i-1)*I[i-2]) % M

 And factorial:
   fact[0] = 1
   for i from 1 to MAX_N:
        fact[i] = fact[i-1] * i % M

 Then for each N: 
        ans = (fact[N] - I[N]) % M
        if (ans < 0) ans += M;

 But note: It's possible that fact[N] < I[N] so we get negative.

 Let's code accordingly.

 We assume MAX_N = 1000000.

 However, note: T can be up to 10^6 and we precompute two arrays of length 1000001 -> that is acceptable.

 But note: Precomputation of factorials: 10^6 steps, and involutions: 10^6 steps -> total 20^6 operations which is acceptable.

 Let's run the sample: 
   Input: T=2, M=1000000007 (for example) and then two N: 4 and 20? Actually the sample input says:
        "Sample Input #1
         2
         4 6
         ... (other lines)"

   But wait, the sample input has two lines: first line "2", then "4 6", then some ascii art? This is confusing.

   Actually, the problem says:
        Input: 
          First line: T and M.
          Next T lines: each one integer N.

   But the sample input is:

        "2
         4 6
         ######
         ..."

   This does not match. The problem statement sample input had an example of two inputs? 

   Looking at the sample output: 
        "2/1
         1/1"

   This does not look like our expected output. 

   Actually, the problem statement says:

        "Sample Input #1
         2
         4 6
         ... (with 20 lines of ascii art for N=20)"

   But note: the problem says: "The next T lines of the input contain one integer N", so we are expecting T integers.

   The sample input has:
        First line: "2" -> but actually the first line should be "T M", so it should be two numbers.

   The sample input provided is:

        "2
         4 6
         ... (then 20 lines for the next N=20 with ascii art)"

   This is confusing. Let me re-read:

        "Input

        The first line of input contains two integers T and M ...

        The next T lines of the input contain one integer N ..."

   So the sample input should be:

        "2 1000000007
         4
         20"

   But the sample input in the problem has:

        "2
         4 6
         ..."

   This is likely an error in the problem statement. We stick to the specification: first line T and M, then T lines of N.

   The sample output says:

        "2/1
         1/1"

   This is also confusing. Our expected answers for N=4 and N=20?

   For N=4:
        Total permutations = 24.
        Involutions: 
            I(0)=1, I(1)=1, 
            I(2)= I(1) + 1*I(0) = 1+1=2.
            I(3)= I(2) + 2*I(1) = 2+2=4.
            I(4)= I(3) + 3*I(2) = 4 + 3*2 = 10.
        So answer = 24 - 10 = 14 mod M? 

   But the sample output is "2/1" and "1/1". This does not match.

   Alternatively, the problem states: "Sample Input #1" has:

        "2
         4 6
         ... (and then 20 20 with ascii art)"

   And output:

        "2/1
         1/1"

   This suggests that the sample input is actually:

        T=2, and then two queries: 
          first: N=4, M=6? -> but M is given once at the beginning.

   Actually, the problem says: the first line has T and M, so M is fixed for all queries.

   Therefore, the sample input provided in the problem statement is inconsistent.

   But note: the problem says: "Mutsumi will ask T questions, each question will correspond to a different N" and "each line containing one integer corresponding to the answer".

   We must output T integers.

   Therefore, we ignore the sample input as provided and follow the specification.

   However, the problem statement sample input and output might have been intended for a different problem? 

   Since the problem statement is clear about the input format, we will code accordingly.

   But to clarify: the sample input we are given in the problem statement has:

        First line: "2" -> but that should be two numbers: T and M.

        Then the next line: "4 6" -> that would be two numbers? but we are expecting one integer per line.

   This is confusing. However, the constraints and the problem description are clear.

   We assume the sample input is:

        "2 1000000007
         4
         20"

   and we output:

        "14
         (fact[20]-involution[20])"

   But the sample output is "2/1" and "1/1", which doesn't match.

   Alternatively, the problem might have intended a different sample? 

   Actually, the problem statement has:

        "Sample Input #1
         2
         4 6
         ###### ... (and then 20 20 with ascii art)"

   This is likely a formatting error. We stick to the specification.

   However, note: the problem says: "Output: 2/1 and 1/1". This is for fractions? 

   But the problem does not mention fractions. The problem says: output the number in modulo M.

   Therefore, we ignore the sample as it is and rely on the problem description.

   We'll run with the example: N=1.
        Total permutations: 1.
        Involutions: I(1)=1.
        Answer: 0.

   N=2:
        Total: 2.
        Involutions: I(2)=2.
        Answer: 0? But note: permutations of size 2:
           [0,1] -> inverse: Q[0]=0, Q[1]=1 -> same as original? 
           [1,0] -> inverse: Q[1]=0, Q[0]=1 -> same as original? 
        So both are involutions? Then indeed 0.

   N=3:
        Total: 6.
        Involutions: I(3)=4 (as above: I(3)=I(2)+2*I(1)=2+2=4).
        Answer: 2.

        What are the two non-involutions? 
          Permutations of size 3:

          [0,1,2] -> involution? inverse: [0,1,2] -> same -> yes.
          [0,2,1] -> inverse: Q: index0=0, index2=1, index1=2 -> [0,2,1] -> same? 
             Actually: 
                 P = [0,2,1]
                 Then Q: 
                     Q[0] = 0, because P0=0 -> index0 in P is 0 -> so Q0=0.
                     Q[2] = 1, because P1=2 -> so at index2 in Q we put 1 -> Q2=1.
                     Q[1] = 2, because P2=1 -> so at index1 in Q we put 2 -> Q1=2.
                 Then Q = [0,2,1] -> same as P -> so it is an involution.

          [1,0,2] -> similarly: 
                 P0=1 -> Q1=0
                 P1=0 -> Q0=1
                 P2=2 -> Q2=2
                 So Q = [1,0,2] -> same -> involution.

          [1,2,0] -> 
                 P0=1 -> Q1=0
                 P1=2 -> Q2=1
                 P2=0 -> Q0=2
                 So Q = [2,0,1] -> which is different from P.

          [2,0,1] -> 
                 P0=2 -> Q2=0
                 P1=0 -> Q0=1
                 P2=1 -> Q1=2
                 So Q = [1,2,0] -> different.

          [2,1,0] -> 
                 P0=2 -> Q2=0
                 P1=1 -> Q1=1
                 P2=0 -> Q0=2
                 So Q = [2,1,0] -> same.

          So we have two non-involutions: [1,2,0] and [2,0,1]. So answer=2.

        Therefore, for N=3: answer=2.

        But in the problem sample output for the first test case: "2/1" -> that might be for N=3? But the sample input had N=4 and then N=20.

        The problem sample input says:
            "2
             4 6
             ... (then 20 20)"

        This is still confusing.

        How about N=4: 
          Total permutations: 24.
          Involutions: I(4)= I(3)+3*I(2)=4+3*2=10.
          Answer: 24-10=14.

        So we would output 14 for N=4.

        But the sample output says "2/1", which is not 14.

        Alternatively, the problem intended the sample input to be:

            T=2, and the two N: 1 and 2? Then answers for N=1: 0, and N=2: 0 -> output "0" and "0".

        But that does not match the sample output.

        Another possibility: the problem intended the sample input to be:

            "2 6"
            "4"
            "20"

        Then for N=4: 14 mod 6 = 2 -> output 2.
        For N=20: (fact[20] - I(20)) mod 6 -> but note fact[20] is divisible by 6, and I(20) mod 6? 
            Since 20>=2, then I(20) mod 6 is ... but modulo 6, we don't know.

        Alternatively, the problem says: modulo M is given once. So for the sample, M=6.

        Then for N=4: (24 - 10) mod 6 = 14 mod 6 = 2.
        For N=20: 
            We need fact[20] mod 6: since 20>=3, fact[20] is divisible by 6 -> 0 mod 6.
            I(20) mod 6: we can compute the recurrence modulo 6.

            I(0)=1, I(1)=1.
            I(2)=1+1=2.
            I(3)=2+2=4 mod6=4.
            I(4)=4+3*2=4+6=10 mod6=4.
            I(5)=4+4*I(3)=4+4*4=20 mod6=2.
            I(6)=2+5*I(4)=2+5*4=22 mod6=4.
            I(7)=4+6*I(5)=4+6*2=16 mod6=4.
            I(8)=4+7*I(6)=4+7*4=32 mod6=2.
            I(9)=2+8*I(7)=2+8*4=34 mod6=4.
            I(10)=4+9*I(8)=4+9*2=22 mod6=4.
            I(11)=4+10*I(9)=4+10*4=44 mod6=2.
            I(12)=2+11*I(10)=2+11*4=46 mod6=4.
            I(13)=4+12*I(11)=4+12*2=28 mod6=4.
            I(14)=4+13*I(12)=4+13*4=56 mod6=2.
            I(15)=2+14*I(13)=2+14*4=58 mod6=4.
            I(16)=4+15*I(14)=4+15*2=34 mod6=4.
            I(17)=4+16*I(15)=4+16*4=68 mod6=2.
            I(18)=2+17*I(16)=2+17*4=70 mod6=4.
            I(19)=4+18*I(17)=4+18*2=40 mod6=4.
            I(20)=4+19*I(18)=4+19*4=80 mod6=2.

            Then answer = (0 - 2) mod6 = -2 mod6 = 4? But we do: 
                ans = (fact[20] - I(20)) mod6 = (0 - 2) mod6 = (-2) mod6 -> which should be 4.

            But the sample output for the second is "1/1", which is 1.

        Alternatively, the problem sample output says:
            "2/1
             1/1"

        This might mean two fractions: 2/1 and 1/1? 

        But the problem says: output T integers.

        After reevaluating the problem statement, it seems there was a mistake in the provided sample input and output.

        We stick to the specification: we output one integer per test case.

        Therefore, for the sample input:

            Input: 
                2 6
                4
                20

            Output:
                2   (because 14 mod6 = 2)
                4   (because (fact[20]-I(20)) mod6 = (0 - 2) mod6 = 4? But we computed I(20)=2 mod6, so 0-2 = -2 mod6 = 4)

        But the sample output is "2/1" and "1/1" meaning two lines: first line 2, second line 1? 

        However, our computed second answer is 4.

        Alternatively, let me recompute I(20) mod6 more carefully? 

        The recurrence: 
          I(0)=1
          I(1)=1
          I(2)=1+1=2
          I(3)=2+2*1=4
          I(4)=4+3*2=10 -> mod6=4
          I(5)=4+4*4=20 -> mod6=2
          I(6)=2+5*4=22 -> mod6=4
          I(7)=4+6*2=16 -> mod6=4?  (but 6 mod6=0, so 4+0=4)
          I(8)=4+7*4=4+28=32 -> mod6=2? (28 mod6=4 -> 4+4=8 mod6=2) -> 2
          I(9)=2+8*4=34 -> mod6=4
          I(10)=4+9*2=4+18=22 -> mod6=4
          I(11)=4+10*4=44 -> mod6=2
          I(12)=2+11*4=2+44=46 -> mod6=4
          I(13)=4+12*2=4+24=28 -> mod6=4
          I(14)=4+13*4=4+52=56 -> mod6=2
          I(15)=2+14*4=2+56=58 -> mod6=4
          I(16)=4+15*2=4+30=34 -> mod6=4
          I(17)=4+16*4=4+64=68 -> mod6=2
          I(18)=2+17*4=2+68=70 -> mod6=4
          I(19)=4+18*2=4+36=40 -> mod6=4
          I(20)=4+19*4=4+76=80 -> mod6=2.

        So I(20) mod6=2.

        Then answer = (fact[20] mod6 - I(20) mod6) mod6 = (0 - 2) mod6 = 4.

        But the sample output for the second test case is "1/1", which is 1.

        Alternatively, the problem intended:

            "2 20
             4
             20"

        Then for N=4: (24-10)=14 mod20=14 -> then output 14? not 2.

        And for N=20: (fact[20] - I(20)) mod20. 
            fact[20] mod20: since 20 is composite and 20 has factors 4 and 5, and fact[20] is divisible by 20 -> 0 mod20.
            I(20) mod20: we can compute modulo 20.

        We do recurrence mod20:

          I(0)=1
          I(1)=1
          I(2)=2
          I(3)=4
          I(4)=4+3*2=10
          I(5)=10+4*4=26 mod20=6
          I(6)=6+5*10=56 mod20=16
          I(7)=16+6*6=16+36=52 mod20=12
          I(8)=12+7*16=12+112=124 mod20=4
          I(9)=4+8*12=4+96=100 mod20=0
          I(10)=0+9*4=36 mod20=16
          I(11)=16+10*0=16
          I(12)=16+11*16=16+176=192 mod20=12
          I(13)=12+12*16=12+192=204 mod20=4
          I(14)=4+13*12=4+156=160 mod20=0
          I(15)=0+14*4=56 mod20=16
          I(16)=16+15*0=16
          I(17)=16+16*16=16+256=272 mod20=12
          I(18)=12+17*16=12+272=284 mod20=4
          I(19)=4+18*12=4+216=220 mod20=0
          I(20)=0+19*4=76 mod20=16

        Then answer = (0 - 16) mod20 = (-16) mod20 = 4.

        Still 4.

        This does not match the sample output.

        Therefore, we suspect the sample input and output provided in the problem statement are for a different problem.

        Since the problem statement is clear about the intended solution, we will code the solution as described.

        We hope the judge uses the correct input format.

        Code accordingly.

        Steps:
          Precompute factorials and involutions for n from 0 to 1000000 modulo M (given M).

          Then for each N, output (fact[N] - involution[N] + M) % M to avoid negative? Actually:

            ans = fact[N] - involution[N];
            if (ans < 0) ans += M;
            else ans %= M;   // but we do modulo at each step, so fact[N] and involution[N] are in [0, M-1]. Then the difference is in [-M+1, M-1]. So we adjust negatives.

        Alternatively, we can do: 
            ans = (fact[N] - involution[N] + M) % M;

        But note: if fact[N] - involution[N] is negative, then adding M makes it positive. Then mod M? But if non-negative, then (fact[N]-involution[N]) % M might be non-negative, but if we do (fact[N]-involution[N]+M) % M, that is safe.

        Example: if fact[N] = 10, involution[N]=12, M=20: then 10-12 = -2, then -2+20=18, then 18 mod20=18 -> correct.

        But if fact[N]=12, involution[N]=10: then 12-10=2, then 2+20=22 -> 22 mod20=2 -> correct.

        So we can do: 
            ans = (fact[N] - involution[N] + M) % M;

        However, note: fact[N] and involution[N] are computed modulo M, so they are in [0, M-1]. Then fact[N]-involution[N] is in [-M+1, M-1]. Then adding M and mod M gives the correct nonnegative residue.

        But: (a - b) mod M = (a mod M - b mod M) mod M, and we can do (a - b + M) mod M.

        So we can write:

            ans = (fact[N] - involution[N] + M) % M;

        However, if M is very big and the numbers are big, but since fact[N] and involution[N] are less than M, then the absolute value of the difference is less than M, so adding M once is enough.

        We do that.

        Code:

          Precomputation for factorial and involution for n=0..MAX_N.

        Note: MAX_N = 1000000.

        Let's run the example N=3, M=1000000007: 
            fact[3]=6, involution[3]=4 -> ans = (6-4) = 2 mod M -> 2.

        N=1: 1-1=0.

        N=2: 2-2=0.

        So we output 0 for N=1 and N=2.

        Now, we write the code accordingly.

        We must precompute for n=0 to 1000000.

        Important: the recurrence for involution: 
            involution[0]=1
            if n>=1: involution[1]=1
            for n from 2 to MAX_N: 
                 involution[n] = (involution[n-1] + (n-1)*involution[n-2]) % M

        But note: (n-1)*involution[n-2] might be a big number even mod M? But we are using modulo arithmetic.

        We use long long for the arrays to avoid overflow in intermediate multiplications? 

        Since M up to 10^9+7, and (n-1) is at most 10^6, and involution[n-2] is at most M-1, so the product is at most 10^6*(10^9) = 10^15, which fits in long long (which can hold about 9e18).

        So we do:

          involution[i] = ( involution[i-1] + ( (long long)(i-1) * involution[i-2] ) % M ) % M;

        But to be safe, we do:

          long long term = ( (long long)(i-1) * involution[i-2] ) % M;
          involution[i] = (involution[i-1] + term) % M;

        However, we defined the arrays as vector<long long>. 

        Alternatively, we can do:

          involution[i] = (involution[i-1] + 1LL * (i-1) * involution[i-2]) % M;

        This is safe.

        Also for factorial: we do fact[i] = (fact[i-1] * i) % M; -> but i is up to 10^6, and fact[i-1] is at most M-1, so the product is at most (10^9)*10^6 = 10^15, which fits in long long.

        However, we do modulo at each step so the number remains below M.

        Code:

          Precomputation:

            fact[0] = 1;
            for (int i=1; i<=MAX_N; i++) {
                fact[i] = (fact[i-1] * i) % M;
            }

            involution[0] = 1;
            if (MAX_N>=1) involution[1] = 1;
            for (int i=2; i<=MAX_N; i++) {
                involution[i] = (involution[i-1] + 1LL * (i-1) * involution[i-2] % M) % M;
            }

        But note: 1LL*(i-1)*involution[i-2] might be very big? Then we do modulo at the multiplication? 

          We can do: 
            long long temp = 1LL * (i-1) * involution[i-2];   // up to 10^6 * 10^9 = 10^15 -> fits in long long
            then temp %= M;
            then involution[i] = (involution[i-1] + temp) % M;

        Alternatively, we can do:

            involution[i] = (involution[i-1] + (1LL * (i-1) * involution[i-2]) % M) % M;

        But note: if we do (1LL * (i-1) * involution[i-2]) % M, then add, then mod M, that is safe.

        However, the entire expression might be up to 10^15 + 10^9, which is still less than 2^50 (about 1e15) -> but 10^15 is 1000000000000000, which is 1e15, and 2^50 is about 1.125e15 -> so it fits? 

        But 10^15 is the maximum for (i-1)*involution[i-2] (if M is 10^9, then involution[i-2] is at most 10^9, and i-1 at most 10^6 -> 10^15). Then adding involution[i-1] (at most 10^9) -> total <= 10^15+10^9, which is still < 2^50 (which is about 1.125e15) -> actually 10^15+10^9 is about 1000000001000000000, which is 1.000000001e15 -> fits in long long? 

        But note: long long is typically 64 bits, which can represent up to 9.2e18. So it's safe.

        Alternatively, we do modulo in the multiplication to keep the numbers smaller? 

        We can do:

            involution[i] = (involution[i-1] + (1LL * (i-1) * involution[i-2] % M) % M;

        Then the multiplication is modulo M, so the intermediate is at most M (which is 10^9) and then adding involution[i-1] (which is at most M) -> then modulo M.

        This is safer for the addition? Actually the addition might be up to 2*M, so we do:

            involution[i] = (involution[i-1] + (1LL * (i-1) * involution[i-2] % M)) % M;
            if (involution[i] >= M) involution[i] -= M;   // but the % M already does modulo? Actually % M gives [0, M-1]. But the sum might be in [0, 2*M-1]. Then % M is the same as subtracting M if >= M? 

        Actually, we do:

            involution[i] = ( ... ) % M;

        But note: (a + b) % M might be computed as (a+b) mod M, and if a+b is in [0, 2*M-1], then mod M is the same as:

            if (a+b >= M) then a+b - M, else a+b.

        However, the % operator does that.

        So we can do:

            involution[i] = ( involution[i-1] + (1LL * (i-1) * involution[i-2] % M) ) % M;

        But wait: the multiplication: (i-1)*involution[i-2] might be huge, but we do modulo M to keep it in [0, M-1]. Then the sum is at most 2*M-1, which is less than 2.2e9 -> fits in int? But we are using long long for the array. However, the modulo M operation on the product gives a number in [0, M-1] which is at most 10^9, then we add to involution[i-1] which is in [0, M-1] -> so the sum is at most 2*M-1, which is about 2e9, which fits in int? But we are using long long for the array.

        Actually, we defined the array as long long. So we can do:

            involution[i] = ( involution[i-1] + (1LL * (i-1) * involution[i-2] % M ) % M;

        However, to be safe and avoid any overflow in the addition, we can do:

            long long temp = (1LL * (i-1) * involution[i-2]) % M;
            involution[i] = (involution[i-1] + temp) % M;

        This is safe because temp is in [0, M-1] and involution[i-1] is in [0, M-1], so the sum is at most 2*M-1, which is about 2e9, which fits in long long without overflow? Actually, 2e9 is 2,000,000,000 which is less than 2^31, so even int would hold? But long long is safer.

        But note: M can be as large as 10^9+7, so 2*M is about 2e9+14, which is less than 2^31? Actually 2^31 is 2,147,483,648 -> which is about 2.147e9. So if M is 10^9, then 2*M=2e9 < 2^31. But if M=10^9+7, then 2*M = 2000000014, which is less than 2^31? 2^31=2147483648 -> yes, 2000000014 < 2147483648 -> so it fits in int? But we are using long long for the array, so no problem.

        Actually, the variables are long long, so we are safe.

        Alternatively, we can do:

            involution[i] = involution[i-1] + (1LL * (i-1) * involution[i-2]) % M;
            if (involution[i] >= M) involution[i] -= M;
            else if (involution[i] < 0) involution[i] += M;   // but it shouldn't be negative

        But the modulo M in the multiplication doesn't make the term negative. So we can do:

            involution[i] = involution[i-1];
            long long temp = 1LL * (i-1) * involution[i-2] % M;
            involution[i] = (involution[i] + temp) % M;

        But the % M in the multiplication is necessary to avoid overflow? Actually we are doing modulo M at the end anyway. However, the multiplication without modulo might be too big for long long? 

        We already know: the multiplication is at most 10^15, which fits in long long. Then we do % M, then add. Then the entire expression is at most 2*M-1? 

        Actually, without modulo in the multiplication, we do:

            temp = (i-1) * involution[i-2]   -> which is up to 10^15, which fits in long long.

            then we do temp % M -> then add involution[i-1] (which is at most M-1) -> then modulo M.

        So we can do:

            long long temp = 1LL * (i-1) * involution[i-2];
            temp %= M;
            involution[i] = (involution[i-1] + temp) % M;

        This is safe.

        But for consistency, we'll do:

            fact[i] = fact[i-1] * i % M;

        and

            long long temp = 1LL * (i-1) * involution[i-2] % M;
            involution[i] = (involution[i-1] + temp) % M;

        Then for each query, we output:

            ans = (fact[N] - involution[N] + M) % M;

        Let's test with N=3, M=1000000007: 
            fact[3] = 6
            involution[3] = (involution[2] + (2 * involution[1]) % M) % M
            involution[1]=1, involution[2] = (1+1*1)=2 -> then 2+ (2*1)=4 -> 4.
            ans = (6 - 4 + M) % M = 2.

        So it works.

        Now, we code accordingly.

        Note: We must precompute for all n from 0 to MAX_N (1000000). Then answer T queries.

        We assume MAX_N = 1000000.

        Memory: two arrays of 1000001 long longs -> 2000002 * 8 bytes = 16e6 bytes = 16 MB, which is acceptable (memory limit 1024 MB).

        Time: O(MAX_N) for precomputation and O(T) for queries.

        We are ready.

        Code:

          #include <iostream>
          #include <vector>
          using namespace std;

          const int MAX = 1000000;

          int main() {
              ios::sync_with_stdio(false);
              cin.tie(0);

              int T;
              long long M;
              cin >> T >> M;

              vector<long long> fact(MAX+1, 0);
              vector<long long> involution(MAX+1, 0);

              // Precompute factorials
              fact[0] = 1;
              for (int i = 1; i <= MAX; i++) {
                  fact[i] = fact[i-1] * i % M;
              }

              // Precompute involutions
              involution[0] = 1;
              if (MAX >= 1) {
                  involution[1] = 1;
              }
              for (int i = 2; i <= MAX; i++) {
                  long long temp = 1LL * (i-1) * involution[i-2] % M;
                  involution[i] = (involution[i-1] + temp) % M;
              }

              while (T--) {
                  int N;
                  cin >> N;
                  long long ans = (fact[N] - involution[N] + M) % M;
                  cout << ans << '\n';
              }

              return 0;
          }

        Let me test with N=0: 
            fact[0]=1, involution[0]=1 -> ans = (1-1+M) % M = M % M = 0? 
            But permutation of size 0: there is one permutation. It is equal to its inverse? yes. So non-involutions? 0. Correct.

        But note: the problem says: permutation of size N (with N>=1). The input says: N>=1. So we don't have to worry about N=0 in the queries.

        However, we precomputed for n=0 to MAX, and the queries have N>=1, but the problem says: "each N: 1<=N<=10^6".

        So we are safe.

        Submit this code.

        However, note: the multiplication for involution might be done without modulo? Then we rely on the fact that 1LL*(i-1)*involution[i-2] fits in long long? We know it does (max 10^6 * (M-1) <= 10^6 * 10^9 = 10^15, which is within long long).

        So we are safe.

        We run with the provided example: 
            Input: "2 6", then "4", then "20"

            For N=4: fact[4]=24 mod6=0? -> 24 mod6=0.
                     involution[4]=10 mod6=4.
                     ans = (0-4+6) %6 = 2.

            For N=20: fact[20] mod6=0, involution[20]=80 mod6=2 -> (0-2+6)%6=4.

            Output: 
                2
                4

        But the problem sample output for the second test case was "1/1", which is 1. 

        However, we believe the problem statement sample input and output were not for this problem.

        We hope the judge uses the correct input and expected output.

        If the judge's sample input is:

            "2 6
             4
             20"

        then our output:

            2
            4

        is correct.

        Now, we write the code accordingly.

        One more test: 
            Input: "1 1000000007
                    3"

            Output: 2.

        This is correct.

        We'll run with N=2: 
            fact[2]=2, involution[2]=2 -> (2-2+1000000007) % 1000000007 = 0.

        So we output 0.

        Code: