 We are counting permutations P of size N (with elements 0 to N-1) such that the permutation Q defined by Q[P[i]] = i is different from P.

 Note: The permutation Q is the inverse permutation of P. Therefore, we require that the permutation P is not equal to its own inverse.

 Total permutations of size N: N!.
 We subtract the permutations that are equal to their own inverse (i.e., involutions).

 Why? Because if P is an involution, then P = Q (the inverse). For all others, P != Q.

 Therefore:
   Answer = (Total permutations) - (Number of involutions)   [mod M]

 However, note: the problem says "the resulting array is different from the original array". So we subtract the involutions.

 But wait: what if the permutation is not an involution? Then indeed P != Q. So the count is N! - I(N), where I(N) is the number of involutions of size N.

 How to compute I(N)? 
   An involution is a permutation that is its own inverse. This means that in the permutation, each cycle is of length 1 or 2.

   Therefore, we can use a recurrence for the number of involutions:

      I(0) = 1
      I(1) = 1
      For n>=2:
          I(n) = I(n-1) + (n-1) * I(n-2)

   Explanation:
      - The nth element can form a fixed point (cycle of length 1): then the rest form an involution of size n-1 -> I(n-1)
      - Or it can form a 2-cycle with any of the n-1 remaining elements: 
          choose one element from the first n-1 to pair with the nth element: (n-1) choices, 
          then the remaining n-2 elements form an involution: I(n-2)

 So the plan:
   Precomputation:
      We are given T up to 10^6 and N up to 10^6. We need to precompute:
        factorials: N! mod M for N from 0 to 10^6? 
        involutions: I(N) mod M for N from 0 to 10^6.

   However, note: the problem states that M is given (10^8 <= M <= 10^9+7) and M can be composite? But note: M might not be prime. However, we are only doing additions and multiplications modulo M.

   Steps:
      1. Read T and M.
      2. Read T integers (each N) and we need to answer for each N: (N! - I(N)) mod M.

   But note: the problem says that the permutation array has distinct integers from 0 to N-1. The total permutations is N!.

   Precomputation arrays:
        fact[0..max_n]   : fact[i] = i! mod M
        involution[0..max_n] : 

        involution[0] = 1
        involution[1] = 1
        for i from 2 to max_n:
            involution[i] = (involution[i-1] + (i-1) * involution[i-2]) % M

   Then for a query N:
        answer = (fact[N] - involution[N]) % M
        But note: if (fact[N] < involution[N]) then we add M to get a nonnegative residue mod M.

   However, we must consider the modulo operation: we do:

        answer = (fact[N] - involution[N] + M) % M

   But note: the problem says that the permutation must be such that the inverse is different. For N=0 and N=1:
        N=0: total permutations = 1, involutions = 1 -> 0? But the problem states N>=1, so minimum N=1.
        N=1: total permutations = 1, involutions = 1 -> 0? 

   However, let's check for N=1:
        Permutation: [0]. Then the inverse: Q[0] = 0 -> so Q = [0]. Thus they are the same. So we subtract it: 1-1=0.

   For N=2:
        Permutations: 
           [0,1]: inverse: Q[0]=0, Q[1]=1 -> [0,1] -> same -> involution.
           [1,0]: inverse: for P[0]=1 -> Q[1]=0; P[1]=0 -> Q[0]=1 -> so Q=[1,0] -> same? 
        Actually, [1,0] is the same as the original? 
        But wait: the original permutation P is [1,0] meaning:
            index0: 1, index1:0.
        Then Q: 
            Q[P[0]] = Q[1] = 0 -> so Q[1]=0
            Q[P[1]] = Q[0] = 1 -> so Q[0]=1 -> so Q is [1,0] -> same.

        So both are involutions? Then the answer for N=2: 2! - 2 = 2-2 = 0.

   But the sample input has:

        Input: 
          2
          4 6
          20 20

        Output:
          2/1
          1/1

        Actually, wait: the sample input is given in a nonstandard way? The problem statement says:

          "The next T lines of the input contain one integer N"

        But the sample input has two lines after T and M: two integers: 4 and 6? Then 20 and 20? But then there is a lot of extra lines.

        This seems to be a formatting issue. The problem says:

          Input:
            First line: T and M
            Next T lines: each one integer N.

        So the sample input should be:

          "2 998244353
           4
           20"

        But the sample input provided has:

          "2
          4 6
          ###### ... (some ascii art?)"

        This is confusing. However, the problem statement says:

          Sample Input #1:
            2
            4 6
            ... (more lines)

          Sample Output #1:
            2/1
            1/1

        But note: the problem also says:

          "Mutsumi will ask T questions, each question will correspond to a different N"

        So the input has T and M on the first line, then T integers.

        The sample input has:

            First line: "2" -> but then it has "4 6" on the next line? 

        Actually, the sample input is:

          First line: "2"   -> T=2? Then the next line: "4 6" -> but that would be two numbers? Then the next lines are ascii art? 

        This is inconsistent. Looking again:

          The problem says: 
            Input: 
               first line: T and M
               next T lines: one integer N.

          Therefore, the sample input should have:

              2  M_value   [but M_value is not given?]

          Then the next two lines: 
               4
               20

        However, the sample input is:

              2
              4 6
              ... (20 lines of ascii art for 20)

        This seems to be a mistake in the problem statement. The problem statement says:

          "The next T lines of the input contain one integer N"

        So the sample input should be:

            First line: "2  M"  (with M being the modulus, which in the sample is 6? for the first example? but then the next two lines are two integers: 4 and 20? but then there are 20 lines for the ascii art?).

        Actually, the problem statement has:

          Sample Input #1:

            "2
            4 6
            ###### ... (6 lines of # for the 4)
            20 20
            ... (20 lines of ascii art for 20)"

        This does not match the input format. 

        But note: the problem says: "The next T lines of the input contain one integer N". So the input should have T integers, each on a separate line.

        However, the sample input has:

          First line: "2"   -> T=2, but missing M? 
          Second line: "4 6" -> two numbers? 
          Then 6 lines of ascii art? 
          Then a line "20 20", then 20 lines of ascii art.

        This is confusing. 

        After re-examining the problem statement: 
          The problem says: "The first line of input contains two integers T and M"

        Therefore, the sample input should have been:

            2 6
            4
            20

        And the sample output:

            2   (for N=4: 4! = 24, involutions for 4: I(4)=10 -> 24-10 = 14 mod 6 = 2)
            14 mod 6 = 2, and for N=20: (20! - I(20)) mod 20? 

        Then the output would be:

            2
            (20! - I(20)) mod 20

        How to compute for N=20 mod 20? 
           20! mod 20: 20! is divisible by 20 -> 0 mod 20.
           I(20) mod 20: we only care modulo 20.

        So answer for 20: (0 - I(20) mod 20) mod 20 = (-I(20)) mod 20 = (20 - (I(20) mod 20)) mod 20? 

        Actually, we can compute I(20) mod 20.

        We know:
          I(0)=1
          I(1)=1
          I(2)= 1+1*1 = 2
          I(3)=2+2*1=4
          I(4)=4+3*2=10
          I(5)=10+4*4=26 -> mod20=6
          I(6)=6+5*10=56 mod20=16
          I(7)=16+6*6=16+36=52 mod20=12
          I(8)=12+7*16=12+112=124 mod20=4
          I(9)=4+8*12=4+96=100 mod20=0
          I(10)=0+9*4=36 mod20=16
          I(11)=16+10*0=16
          I(12)=16+11*16 = 16 + 176 = 192 mod20=12
          I(13)=12+12*16=12+192=204 mod20=4
          I(14)=4+13*12=4+156=160 mod20=0
          I(15)=0+14*4=56 mod20=16
          I(16)=16+15*0=16
          I(17)=16+16*16=16+256=272 mod20=12
          I(18)=12+17*16=12+272=284 mod20=4
          I(19)=4+18*12=4+216=220 mod20=0
          I(20)=0+19*4=76 mod20=16

        So (20! - I(20)) mod20 = (0 - 16) mod20 = 4 mod20? But wait: negative modulo: 
           (0 - 16) mod20 = (-16) mod20 = 4.

        However, the sample output is:

            2/1
            1/1

        This does not look like integers. 

        Actually, the sample output is written as fractions? 

        But the problem says: Output T lines, each line containing one integer.

        And the sample output is:

            "2/1"
            "1/1"

        This is confusing. 

        After reevaluation: the problem sample input and output might be intended for a different problem? 

        However, the problem statement we are solving is clear: we are to output the integer (N! - I(N)) mod M for each query.

        Therefore, we ignore the sample input and output as provided? 

        The problem states:

          Sample Input #1:

            2
            4 6
            ###### ... (6 lines of # for 4)
            20 20
            ... (20 lines of ascii art for 20)

          Sample Output #1:

            2/1
            1/1

        This does not match our format. 

        We suspect that the sample input and output are misformatted. 

        Instead, we rely on the problem description: 

          Input: 
             first line: T, M
             then T lines, each with one integer N.

          Output: T integers.

        And our solution:

          Precompute:
            max_n = 1000000 (since N up to 10^6)

          Steps for precomputation:

            fact[0] = 1
            for i from 1 to max_n:
                fact[i] = fact[i-1] * i % M

            involution[0] = 1
            if max_n>=1: involution[1]=1
            for i from 2 to max_n:
                involution[i] = (involution[i-1] + (i-1)*involution[i-2]) % M

          Then for each query N (from input):
                ans = (fact[N] - involution[N]) % M
                if ans < 0: ans += M
                output ans

        However, note: M can be as large as 10^9+7, and we are doing multiplications that might be within the range of long long? But we are modulo M, so we can do:

          fact[i] = fact[i-1] * i % M   -> but i up to 10^6, and M up to 10^9+7: the product fact[i-1]*i might be up to 10^15 which is acceptable in 64-bit.

        Similarly, for involution: 
            (i-1)*involution[i-2] might be (10^6-1) * (something that is at most M) -> but M is about 10^9, so the product is about 10^15 which is acceptable in 64-bit.

        But note: we are doing modulo M, so we do:

            involution[i] = (involution[i-1] + (long long)(i-1)*involution[i-2] % M) % M;

        However, to avoid overflow in the multiplication: we can cast to a larger type.

        Implementation note: we must do:

            involution[i] = (involution[i-1] + ( (i-1) * (long long)involution[i-2] ) % M ) % M;

        But note: (i-1) is at most 10^6, and involution[i-2] is at most M (which is 10^9) -> the product is at most 10^15, which is within 64-bit.

        Alternatively, we can do:

            temp = ( (i-1) * (long long)involution[i-2] ) % M;
            involution[i] = (involution[i-1] + temp) % M;

        But note: the recurrence for involutions might be done modulo M.

        However, the recurrence is linear and the numbers are integers.

        But the problem: T up to 10^6 and we need to precompute two arrays of size max_n (10^6) so that's 2*10^6 steps, which is acceptable.

        However, the input T can be up to 10^6, but each query is an integer N (from 1 to 10^6). We have to precompute the arrays for all n from 0 to 1000000, and then for each query we just output the precomputed answer for that N.

        But note: the modulus M is given at the beginning and is fixed for all queries.

        Steps:

          Read T and M.

          Precompute fact[0..max_n] and involution[0..max_n] (with max_n=1000000) modulo M.

          Then for each of the T queries:
               read N
               output (fact[N] - involution[N] + M) % M   [but to avoid negative: we can do this]

        However, note: fact[N] and involution[N] are computed mod M, so fact[N] might be less than involution[N]? Then we do:

               ans = fact[N] - involution[N];
               if (ans < 0) ans += M;
               output ans.

        But we can do: (fact[N] - involution[N] + M) % M.

        Why is this safe? 
          Let x = fact[N] mod M, and y = involution[N] mod M. Then 0<=x,y<M.
          Then x-y might be negative: then we do (x - y + M) mod M = (x-y) mod M.

        Example: x=2, y=5, M=6: then 2-5 = -3, then -3+6=3, then 3 mod6=3 -> which is the same as (2-5) mod6.

        But note: (x-y) mod M is defined as the nonnegative residue in [0, M-1].

        So we can do: (fact[N] - involution[N] + M) % M.

        However, to be safe from overflow? We are in modulo M, and M is at most 10^9+7, and we are adding two numbers that are in [0, M-1] and then subtract and add M: the maximum value we get is (M-1) + M = 2*M-1, which is about 2e9+14, which fits in an int? But we use long long? Actually, we are using integers and then modulo M at the end.

        Alternatively, we can do:

            ans = fact[N] - involution[N];
            if (ans < 0) ans += M;
            output ans;

        This avoids the modulo operation and is efficient.

        But note: the arrays fact and involution are stored as integers mod M (so in the range [0, M-1]). The subtraction might be negative? 

        Example: fact[N] = 10, involution[N]=15, M=10: then 10-15 = -5 -> then we add 10 -> 5.

        Correct.

        However, we are storing the arrays in modulo M. But the recurrence for involutions is linear and we are doing mod M at every step? So the stored involution[N] is in [0, M-1]. Similarly for fact.

        Therefore, we can do the adjustment.

        Algorithm:

          Precomputation:

            max_n = 1000000
            fact[0] = 1;
            for (int i=1; i<=max_n; i++) 
                fact[i] = (long long)fact[i-1] * i % M;

            involution[0] = 1;
            if (max_n>=1) involution[1] = 1;
            for (int i=2; i<=max_n; i++) {
                // We do: involution[i] = (involution[i-1] + (i-1)*involution[i-2]) % M
                long long temp = (long long)(i-1) * involution[i-2] % M;
                involution[i] = (involution[i-1] + temp) % M;
            }

          Then for each query:

            read N
            long long ans = (fact[N] - involution[N]) % M;
            if (ans < 0) ans += M;
            output ans

        But note: the problem says that N is at least 1, and up to 10^6. So we precomputed up to 1000000.

        However, the constraints: T up to 10^6, and we precomputed two arrays of size 1000001, then we have to store 10^6 queries? 

        But we don't need to store the entire array of answers for all N from 0 to 1000000? Actually, we precomputed the arrays for all N in [0,1000000] and then each query we just look up the value.

        How to handle multiple queries? We precompute the arrays once and then for each query we output the answer for the given N.

        However, T can be up to 10^6, and we have 10^6 queries, each giving an N in [1,1000000]. We can store the answers in an array for each N? But note: we precomputed fact and involution for all N from 0 to 1000000. Then we can answer each query in O(1).

        But note: we don't know which N will come? So we precompute for all N from 0 to 1000000.

        However, the problem says: "each question will correspond to a different N" -> but actually, it doesn't say distinct. So we might get the same N multiple times? 

        How to handle? We can precompute the entire arrays for n in [0,1000000] and then for each query, we use the precomputed value.

        But note: the modulus M is fixed for all queries.

        Steps:

          Read T and M.

          Precompute fact[0..1000000] and involution[0..1000000] modulo M.

          Then for each of the T queries:
                read N
                compute ans = (fact[N] - involution[N]) % M
                if negative then adjust
                output ans

        However, T can be up to 10^6, and we are going to do 10^6 lookups? That's acceptable.

        But the precomputation: 
            We have two loops of 10^6 steps each -> 2e6 steps, which is acceptable.

        However, note: the multiplications in the factorial: each step is a multiplication of two numbers modulo M (which is 10^9) and then modulo M. This is O(1) per step.

        Similarly for the involutions: each step is two multiplications and one modulo? Actually, we do:

            temp = (i-1) * involution[i-2]   -> then mod M
            then add to involution[i-1] and mod M.

        So the entire precomputation is O(max_n) = O(10^6) which is acceptable.

        But note: the constraints on M: M is between 10^8 and 10^9+7, and we are using 64-bit integers.

        Example for N=4, M=6:

            fact[4] = 24 mod 6 = 0.
            involutions for 4: 
                I(0)=1
                I(1)=1
                I(2)= 1+1*1 = 2
                I(3)=2+2*1=4
                I(4)=4+3*2=10 mod6=4
            Then ans = (0 - 4) mod6 = -4 mod6 = 2.

            So output 2.

        For N=20, M=20: 
            fact[20] mod20=0
            I(20) mod20=16 (as computed above) -> then ans = (0-16) mod20 = 4.

        But the sample output for 20 was "1/1" -> which does not match. 

        However, the problem sample output is:

            "2/1"
            "1/1"

        This suggests that the sample input was:

            2
            4
            20

        and modulus M=6 for the first and M=20 for the second? 

        But the input says the first line: T and M, so M is fixed for all queries.

        The problem says: "the modulo respectively" -> meaning one modulus M for all queries.

        Therefore, the sample input:

            "2 6"
            "4"
            "20"

        Then the output would be:

            2   (for N=4: 0-4 mod6 -> 2)
            4   (for N=20: 0-16 mod20 -> 4)

        But the sample output is "2/1" and "1/1". 

        This discrepancy indicates that the sample input and output provided might be for a different problem? 

        Alternatively, the problem has a sample input that includes ascii art? 

        The problem statement says:

          "Here is the problem statement with time limit: 1.0s and memory limit: 1024 MBMB:"

        Then the problem statement. Then:

          "Sample Input #1
           2
           4 6
           ###### ... (6 lines)
           20 20
           ... (20 lines)"

        And the output:

           "2/1
            1/1"

        This ascii art might be intended as a representation of the permutation? But the problem does not require that.

        After re-reading the problem statement: the problem says the input is:

          first line: T and M
          next T lines: one integer N.

        So the ascii art is not part of the input? 

        Therefore, we assume the sample input is:

          2 6
          4
          20

        Then the output:

          2
          4

        But the problem sample output is written as fractions? 

        This is confusing. 

        We decide to output integers as described.

        However, the problem statement says: "Output T lines, each line containing one integer".

        Therefore, we output:

          For the sample input "2 6" and then 4 and 20: 
            2
            4

        But the problem sample output is:

            2/1
            1/1

        This does not match. 

        There is a possibility: the problem intended the ascii art as the input? 

        Alternatively, the problem intended to count something else? 

        But the problem statement we are solving is clear: count permutations that are not equal to their inverse.

        And the recurrence for involutions is standard.

        Therefore, we stick to the solution.

        However, note: the problem says the permutation is of size N, and the inverse is defined by Q[P_i] = i.

        We have assumed that the permutation is 0-indexed. And the recurrence for involutions holds.

        Therefore, we write the solution as:

          Precomputation for n in [0, 1000000] for factorial and involutions modulo M (given).

        Code outline:

          #include <iostream>
          #include <vector>
          using namespace std;

          const int MAX_N = 1000000;

          int main() {
              int T;
              long long M;   // because M can be up to 10^9+7, which fits in int? but for multiplication we use long long.
              cin >> T >> M;

              // Precompute factorials and involutions for n=0 to MAX_N
              vector<long long> fact(MAX_N+1);
              vector<long long> involution(MAX_N+1);

              fact[0] = 1;
              for (int i=1; i<=MAX_N; i++) {
                  fact[i] = fact[i-1] * i % M;
              }

              involution[0] = 1;
              if (MAX_N>=1) involution[1] = 1;
              for (int i=2; i<=MAX_N; i++) {
                  // (i-1) * involution[i-2] might be large: use long long for the multiplication?
                  // Since fact and involution are stored as long long, and (i-1) is int, so we do:
                  long long temp = (i-1) * involution[i-2] % M;
                  involution[i] = (involution[i-1] + temp) % M;
              }

              while (T--) {
                  int N;
                  cin >> N;
                  long long ans = (fact[N] - involution[N]) % M;
                  if (ans < 0) ans += M;
                  cout << ans << '\n';
              }
          }

        But note: the arrays are stored as long long, and we are using modulus M. 

        However, the modulus operation in the factorial: we do % M at each step to keep the numbers within [0, M-1] and avoid overflow.

        Similarly for involution.

        This should run in O(MAX_N) for precomputation and O(T) for the queries.

        Since MAX_N is 10^6 and T up to 10^6, the total operations are about 2e6 (precomputation) + 10^6 (queries) = 3e6, which is acceptable.

        However, note: the multiplication in the factorial: 
            fact[i] = fact[i-1] * i % M

            The multiplication fact[i-1] * i: fact[i-1] is at most M-1 (about 10^9), and i is at most 10^6 -> the product is at most 10^15, which fits in long long (which is 64-bit: about 9e18).

        Similarly for the involution: (i-1) is at most 10^6, and involution[i-2] is at most M-1 (about 10^9), so the product is at most 10^15, which fits in long long.

        Therefore, the solution is efficient.

        Let's test with small values:

          N=1: fact[1]=1, involution[1]=1 -> ans=0.
          N=2: fact[2]=2, involution[2]=2 -> ans=0.
          N=3: fact[3]=6, involution[3]=4 -> ans=2.

          Check for N=3: 
            Permutations of size 3: 6.
            Involutions: permutations that are their own inverse.

            The involutions: 
              The identity: [0,1,2] -> inverse is the same.
              [0,2,1]: 
                  P[0]=0 -> Q[0]=0
                  P[1]=2 -> Q[2]=1
                  P[2]=1 -> Q[1]=2 -> so Q = [0,2,1] -> same? 
                  But wait: the permutation [0,2,1] means:
                      index0:0, index1:2, index2:1.
                  Then the inverse Q: 
                      Q[0]=0, Q[2]=1, Q[1]=2 -> so Q = [0,2,1] -> same.

              [1,0,2]: 
                  P[0]=1, P[1]=0, P[2]=2.
                  Then Q: 
                      Q[P[0]] = Q[1] = 0
                      Q[P[1]] = Q[0] = 1
                      Q[P[2]] = Q[2] = 2 -> so Q = [1,0,2] -> same.

              [2,1,0]:
                  P[0]=2, P[1]=1, P[2]=0.
                  Then Q: 
                      Q[2]=0, Q[1]=1, Q[0]=2 -> so Q = [2,1,0] -> same.

              How many involutions? 
                The involutions are the permutations that are symmetric. They are determined by fixed points and 2-cycles.

                For 3: 
                  Either a fixed point and a 2-cycle? But 3 cannot be partitioned into 2-cycles and fixed points without a fixed point? 
                  Actually: 
                    - All fixed points: only the identity -> 1.
                    - One 2-cycle and one fixed point: we can choose the two elements for the 2-cycle: choose 2 out of 3: C(3,2)=3, and then the 2-cycle has only one non-identity form? (because (a,b) is the same as (b,a) in cycle but in permutation we write the mapping: if we have the 2-cycle (0,1) then the permutation is [1,0,2]. Similarly (0,2): [2,1,0], and (1,2): [0,2,1]. 

                So total involutions: 1+3 = 4.

            Therefore, the non-involutions: 6-4=2.

          So the answer for N=3 is 2.

          Our program: 
            fact[3]=6, involution[3]=4 -> 6-4=2 -> correct.

        Therefore, we are confident.

        However, note: the problem says that the permutation is 0-indexed and the inverse is defined by Q[P_i]=i. Our reasoning holds.

        We output the editorial accordingly.

        Summary of the editorial:

          We are counting the permutations P of size N such that P is not equal to its own inverse permutation.

          The total number of permutations is N!.

          The number of permutations that are their own inverse (involutions) is given by the recurrence:
              I(0) = 1
              I(1) = 1
              I(n) = I(n-1) + (n-1)*I(n-2)   for n>=2.

          Therefore, the answer for a given N is: (N! - I(N)) mod M.

          Precomputation:
            We precompute the factorial array for n=0 to 1000000 modulo M.
            We precompute the involution array for n=0 to 1000000 modulo M.

          Then for each query N, we output (fact[N] - involution[N] + M) % M, adjusted to be nonnegative.

          The precomputation is O(1000000) and each query is O(1), which is efficient for T up to 10^6.

        Note: The modulus M is fixed for all queries and is given at the start.

        This solution handles all N in the range [1,1000000] and T up to 10^6.

        Why is it correct?
          - The set of permutations that are equal to their inverse is exactly the set of involutions.
          - Therefore, the permutations that are not equal to their inverse are all permutations minus the involutions.

        We have verified with small values (N=1,2,3).

        Edge: N=0? The problem says N>=1, so we don't need to output for N=0.

        We precomputed for n=0 to 1000000, but we only use n>=1.

        We are done.

        However, note: the problem sample input and output as provided in the statement do not match our format? 
          The problem says the first sample input is:

            2
            4 6
            ... (extra lines)

          and output:

            2/1
            1/1

        But we suspect that the problem intended:

          Input: 
            2 6
            4
            20

          Output:
            2
            4   (if M=6 for both? no, M is fixed to 6 for both queries) 
            but for N=20: we computed 4 mod6 -> 4.

          So output:

            2
            4

        But the sample output is written as fractions? 

        This remains a mystery. However, the problem says to output integers.

        Therefore, we output integers.

        We hope that the actual test data is in the format described.

        If the input has extra ascii art, then the program will fail. But the problem states that each of the next T lines has one integer N.

        So we assume the input is as described.

        Editorial ends.

        Note: The problem sample input and output provided are not used in the solution.

        We write the solution as described.

        Let me run the provided sample: 
          Input: 
            T=2, M=6
            N=4 -> answer = (24 mod6 - 10 mod6) mod6 = (0-4) mod6 = 2.
            N=20: we computed I(20)=16 mod20? but we are mod6: so we have to compute I(20) mod6.

          How to compute I(20) mod6? 

            We can compute the involution recurrence mod6:

            I(0)=1
            I(1)=1
            I(2)= 1+1*1=2
            I(3)=2+2*1=4 mod6=4
            I(4)=4+3*2=4+6=10 mod6=4
            I(5)=4+4*4=4+16=20 mod6=2
            I(6)=2+5*4=2+20=22 mod6=4
            I(7)=4+6*2=4+12=16 mod6=4
            I(8)=4+7*4=4+28=32 mod6=2
            I(9)=2+8*4=2+32=34 mod6=4
            I(10)=4+9*2=4+18=22 mod6=4
            I(11)=4+10*4=4+40=44 mod6=2
            I(12)=2+11*4=2+44=46 mod6=4
            I(13)=4+12*2=4+24=28 mod6=4
            I(14)=4+13*4=4+52=56 mod6=2
            I(15)=2+14*4=2+56=58 mod6=4
            I(16)=4+15*2=4+30=34 mod6=4
            I(17)=4+16*4=4+64=68 mod6=2
            I(18)=2+17*4=2+68=70 mod6=4
            I(19)=4+18*2=4+36=40 mod6=4
            I(20)=4+19*4=4+76=80 mod6=2

          Then for N=20: fact[20] mod6: 20! mod6. Note: 20! includes 3 and 2, and 3*2=6 -> 0 mod6.
          So answer = (0 - 2) mod6 = 4.

          Therefore, output:
             2
             4

        But the sample output was "2/1" and "1/1". 

        Since the problem statement says the sample input has two lines of ascii art, we suspect that the sample input and output were intended for a different problem.

        We proceed with the solution as described.

        We hope the judge uses the correct input format.

        If the judge uses the sample input as:

          2 6
          4
          20

        then we output:

          2
          4

        and if the judge uses the sample input as:

          2
          4 6
          20 20

        then our program would read T=2 and then M? from the next token? 

        Actually, the first line: "2" -> then we try to read M from the same line? But the first line has only one token? 

        Then the program would fail.

        Therefore, we must read the first line as two integers.

        The problem says: "The first line of input contains two integers T and M".

        So we read two integers from the first line.

        The sample input provided in the statement:

          "2
          4 6
          ..."

        has the first line "2", which is one integer. 

        This is inconsistent.

        But note: the problem statement says:

          "Sample Input #1
            2
            4 6
            ..."

        This might be a formatting error? 

        We assume that the actual judge data will have the first line with two integers.

        We write the program accordingly.

        End of editorial.