To solve this problem, we need to manage a set of course dependencies in a directed acyclic graph (DAG) where nodes represent courses and edges represent dependencies. The goal is to process queries that add new dependencies while ensuring that all courses can be scheduled within K semesters. The key insight is that the longest chain of dependencies (path of consecutive dependencies) must not exceed K courses, as each course in the chain requires a distinct semester.

### Approach
1. **Precomputation**:
   - **Initial Graph Setup**: Store initial dependencies using adjacency lists for outgoing and incoming edges.
   - **Dynamic Programming Arrays**:
     - `dp_in[u]` represents the length of the longest chain ending at node `u`.
     - `dp_out[u]` represents the length of the longest chain starting at node `u`.
   - Compute `dp_in` by processing nodes in increasing order (topological order). For each node `u`, `dp_in[u]` is the maximum of 1 and `dp_in[v] + 1` for all incoming edges `(v, u)`.
   - Compute `dp_out` by processing nodes in decreasing order. For each node `u`, `dp_out[u]` is the maximum of 1 and `dp_out[w] + 1` for all outgoing edges `(u, w)`.

2. **Query Processing**:
   - For each query `(C, D)`:
     - If the edge `(C, D)` already exists, output "accept".
     - Otherwise, check if `dp_in[C] + dp_out[D] >= K + 1`. If true, output "reject" as adding this edge would create a chain longer than K.
     - If false, output "accept", add the edge to the graph, and update:
       - **Update `dp_in` for `D`**: Set `dp_in[D] = max(dp_in[D], dp_in[C] + 1)` if this new value is ≤ K. Propagate this update to all descendants of `D` using BFS.
       - **Update `dp_out` for `C`**: Set `dp_out[C] = max(dp_out[C], dp_out[D] + 1)` if this new value is ≤ K. Propagate this update to all ancestors of `C` using BFS.

### Solution Code
```cpp
#include <iostream>
#include <vector>
#include <queue>
#include <set>
#include <algorithm>
using namespace std;

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);

    int n, m, K_val;
    cin >> n >> m >> K_val;

    vector<vector<int>> adj_out(n+1);
    vector<vector<int>> adj_in(n+1);
    set<pair<int, int>> edges;

    for (int i = 0; i < m; i++) {
        int u, v;
        cin >> u >> v;
        adj_out[u].push_back(v);
        adj_in[v].push_back(u);
        edges.insert({u, v});
    }

    vector<int> dp_in(n+1, 1);
    vector<int> dp_out(n+1, 1);

    for (int i = 1; i <= n; i++) {
        for (int j : adj_in[i]) {
            if (dp_in[j] + 1 > dp_in[i]) {
                dp_in[i] = dp_in[j] + 1;
            }
        }
    }

    for (int i = n; i >= 1; i--) {
        for (int j : adj_out[i]) {
            if (dp_out[j] + 1 > dp_out[i]) {
                dp_out[i] = dp_out[j] + 1;
            }
        }
    }

    int q;
    cin >> q;
    while (q--) {
        int c, d;
        cin >> c >> d;
        if (edges.find({c, d}) != edges.end()) {
            cout << "accept\n";
        } else if (dp_in[c] + dp_out[d] >= K_val + 1) {
            cout << "reject\n";
        } else {
            cout << "accept\n";
            edges.insert({c, d});
            adj_out[c].push_back(d);
            adj_in[d].push_back(c);

            if (dp_in[c] + 1 > dp_in[d] && dp_in[c] + 1 <= K_val) {
                dp_in[d] = dp_in[c] + 1;
                queue<int> q_in;
                q_in.push(d);
                while (!q_in.empty()) {
                    int u = q_in.front();
                    q_in.pop();
                    for (int w : adj_out[u]) {
                        int cand = dp_in[u] + 1;
                        if (cand <= K_val && cand > dp_in[w]) {
                            dp_in[w] = cand;
                            q_in.push(w);
                        }
                    }
                }
            }

            if (dp_out[d] + 1 > dp_out[c] && dp_out[d] + 1 <= K_val) {
                dp_out[c] = dp_out[d] + 1;
                queue<int> q_out;
                q_out.push(c);
                while (!q_out.empty()) {
                    int u = q_out.front();
                    q_out.pop();
                    for (int w : adj_in[u]) {
                        int cand = dp_out[u] + 1;
                        if (cand <= K_val && cand > dp_out[w]) {
                            dp_out[w] = cand;
                            q_out.push(w);
                        }
                    }
                }
            }
        }
    }

    return 0;
}
```

### Explanation
1. **Initial Setup**: The initial graph is built from input, storing edges in adjacency lists and a set for quick lookup.
2. **Precomputation**: The `dp_in` array is computed by processing nodes from 1 to N, updating each node's value based on incoming edges. The `dp_out` array is computed by processing nodes from N down to 1, updating each node's value based on outgoing edges.
3. **Query Handling**: For each query:
   - If the edge exists, "accept" is output immediately.
   - Otherwise, the sum `dp_in[C] + dp_out[D]` is checked. If it exceeds K, the edge is rejected.
   - If accepted, the edge is added to the graph, and BFS propagates updates to `dp_in` for `D`'s descendants and `dp_out` for `C`'s ancestors, ensuring all affected nodes reflect the new longest chains within the K constraint.
4. **Efficiency**: The BFS propagation is bounded by K, ensuring each node is updated at most K times, making the solution efficient for large inputs. The overall approach efficiently maintains DAG properties and checks the scheduling constraint dynamically.