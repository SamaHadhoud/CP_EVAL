To solve this problem, we need to determine if it's possible to rearrange students in a long table with $2N$ seats arranged in $N$ adjacent pairs such that every student from the School of Computing ('C') has a buddy (adjacent seat in the same pair) from the Faculty of Arts and Social Sciences ('A'). The rearrangement is done by moving students to adjacent empty seats ('.') any number of times. 

### Approach
1. **Initial Checks**: 
   - Count the total number of 'A's and 'C's in the initial arrangement. If the number of 'A's is less than the number of 'C's, output "NO" immediately since it's impossible to satisfy the buddy condition for each 'C'.

2. **Feasibility Scans**:
   - **Forward Scan (Left to Right)**: Traverse the string while maintaining a balance. For each 'A', increment the balance; for each 'C', decrement the balance. If the balance becomes negative, use an available "credit" (initially set to `total_A - total_C`) to reset the balance. If no credit is available when needed, output "NO".
   - **Backward Scan (Right to Left)**: Repeat the same process in reverse to ensure feasibility from both directions.

3. **Constructing the Arrangement**:
   - If both scans pass, output "YES" and construct the arrangement:
     - Form `total_C` pairs, each containing one 'A' and one 'C' (arranged as "AC").
     - Fill the remaining seats with the leftover 'A's followed by '.'s to ensure no 'C' remains without an 'A' buddy in their pair.

### Solution Code
```python
import sys

def main():
    data = sys.stdin.read().splitlines()
    n = int(data[0].strip())
    s = data[1].strip()
    
    total_A = s.count('A')
    total_C = s.count('C')
    total_seats = 2 * n
    
    if total_A < total_C:
        print("NO")
        return
        
    credit = total_A - total_C
    balance = 0
    for char in s:
        if char == 'A':
            balance += 1
        elif char == 'C':
            balance -= 1
            if balance < 0:
                if credit > 0:
                    credit -= 1
                    balance += 1
                else:
                    print("NO")
                    return
                    
    credit = total_A - total_C
    balance = 0
    for char in reversed(s):
        if char == 'A':
            balance += 1
        elif char == 'C':
            balance -= 1
            if balance < 0:
                if credit > 0:
                    credit -= 1
                    balance += 1
                else:
                    print("NO")
                    return
                    
    print("YES")
    res = []
    for _ in range(total_C):
        res.append('A')
        res.append('C')
        
    remaining_A = total_A - total_C
    remaining_seats = total_seats - len(res)
    res.extend(['A'] * remaining_A)
    res.extend(['.'] * (remaining_seats - remaining_A))
    
    print(''.join(res))

if __name__ == "__main__":
    main()
```

### Explanation
1. **Initial Checks**: The code first checks if the number of 'A's is at least the number of 'C's. If not, it outputs "NO" immediately.
2. **Forward Scan**: The code scans the string from left to right. For each 'A', it increments a balance; for each 'C', it decrements the balance. If the balance becomes negative, it uses a credit (from available 'A's) to reset the balance. If no credit is available, it outputs "NO".
3. **Backward Scan**: The same process is repeated from right to left to ensure feasibility in both directions.
4. **Constructing Arrangement**: If both scans pass, the code constructs the arrangement:
   - The first `total_C` pairs are filled with "AC" to ensure each 'C' has an 'A' buddy.
   - The remaining seats are filled with leftover 'A's followed by '.'s. This ensures no 'C' is left without an 'A' buddy in their pair.
   
This approach efficiently checks feasibility and constructs a valid arrangement in $O(N)$ time, adhering to the problem constraints.