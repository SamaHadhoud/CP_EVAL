To solve this problem, we need to efficiently handle two types of operations on a sequence of integers: updating an element in the sequence and answering queries about the positions where Piplups would settle based on a range of days. The key challenge is to simulate the migration process for each query range, where each Piplup starts at a specified iceberg and moves to the next available one if the starting position is occupied. The solution involves using a Union-Find (Disjoint Set Union, DSU) data structure with path compression to efficiently manage the occupied icebergs and find the next available positions.

### Approach
1. **Problem Analysis**:
   - **Update Operation**: Modify the starting iceberg for a specific day.
   - **Query Operation**: For a given range of days, simulate the migration of Piplups to determine the position of the X-th Piplup in a group that starts at iceberg 1, considering only the occupied icebergs within the specified range.

2. **Key Insight**:
   - The migration process for each Piplup involves finding the smallest available iceberg starting from a given position. This can be efficiently managed using a DSU structure to keep track of the next available iceberg.
   - Given the constraints (starting positions ≤ 500 and X_i ≤ 500), we can bound the simulation to a range of `len + 1000` (where `len` is the number of days in the query) to ensure we only process relevant icebergs.

3. **Algorithm Selection**:
   - **DSU with Path Compression**: This allows efficient finding and updating of the next available iceberg. The DSU is reset for each query using a timestamp-based lazy initialization to avoid reinitializing the entire structure.
   - **Bounded Simulation**: For each query, we simulate the migration process within the bounded range `[1, len + 1000]`, where `len` is the number of days in the query. This ensures the simulation remains efficient.

4. **Complexity Analysis**:
   - **Update Operation**: O(1) per operation, as it involves a simple array update.
   - **Query Operation**: O(len_i + 1000) per query, where `len_i` is the number of days in the query. The DSU operations within the bounded range ensure each query is processed efficiently.
   - **Overall Complexity**: O(M * (len_i + 1000)) for M queries, which is feasible given the constraints (M ≤ 5000 and len_i ≤ 10^6).

### Solution Code
```cpp
#include <iostream>
#include <vector>
using namespace std;

const int MAX_U = 1001000;

int next_ptr[MAX_U + 2];
int timestamp[MAX_U + 2];
int now = 0;

int find(int x, int U) {
    if (x > U) {
        return x;
    }
    vector<int> stack;
    int cur = x;
    while (cur <= U) {
        if (timestamp[cur] != now) {
            break;
        }
        if (next_ptr[cur] == cur) {
            break;
        }
        stack.push_back(cur);
        cur = next_ptr[cur];
    }
    if (cur <= U && timestamp[cur] != now) {
        timestamp[cur] = now;
        next_ptr[cur] = cur;
    }
    for (int node : stack) {
        next_ptr[node] = cur;
    }
    return cur;
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    int N, M;
    cin >> N >> M;
    vector<int> A(N);
    for (int i = 0; i < N; i++) {
        cin >> A[i];
    }
    for (int i = 0; i < M; i++) {
        int type;
        cin >> type;
        if (type == 0) {
            int P, X;
            cin >> P >> X;
            A[P-1] = X;
        } else {
            int L, R, X_i;
            cin >> L >> R >> X_i;
            int len = R - L + 1;
            int U_bound = len + 1000;
            now++;
            for (int j = L-1; j <= R-1; j++) {
                int x = A[j];
                int y = find(x, U_bound);
                if (y <= U_bound) {
                    next_ptr[y] = find(y+1, U_bound);
                }
            }
            int current = 0;
            for (int cnt = 0; cnt < X_i; cnt++) {
                current = find(current+1, U_bound);
            }
            cout << current << '\n';
        }
    }
    return 0;
}
```

### Explanation
1. **Initialization**:
   - We initialize global arrays `next_ptr` and `timestamp` to manage the DSU structure. The variable `now` is used to track the current query for lazy initialization.
   
2. **Find Function**:
   - The `find` function locates the next available iceberg starting from a given position `x` within a bounded range `U`. It uses path compression to optimize future queries, ensuring amortized constant time per operation.

3. **Update Operation**:
   - For an update query, we simply modify the starting iceberg value in the array `A` at the specified position.

4. **Query Operation**:
   - For each query range `[L, R]`, we reset the DSU structure using the `now` variable to avoid reinitialization.
   - We process each day in the range, using the `find` function to determine the iceberg where the Piplup settles and update the DSU to mark this iceberg as occupied.
   - After processing all days in the range, we simulate the migration of `X_i` Piplups starting from iceberg 1, using the `find` function to determine each Piplup's position. The position of the X-th Piplup is the result.

This approach efficiently handles both update and query operations by leveraging the DSU structure with path compression and bounded simulation, ensuring optimal performance even for large input sizes.