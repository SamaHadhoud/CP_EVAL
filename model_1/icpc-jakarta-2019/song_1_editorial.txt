### Approach
The problem requires transforming an original melody \( A \) into a new melody \( B \) that adheres to specific constraints while being lexicographically smallest. The constraints are:
1. **Relative Order**: For each consecutive pair in \( A \), the relative order in \( B \) must match (if \( A_i < A_{i+1} \), then \( B_i < B_{i+1} \); if equal, then equal; if greater, then greater).
2. **Adjacent Difference**: The absolute difference between consecutive notes in \( B \) must not exceed \( K \).
3. **Vocal Range**: Every note in \( B \) must lie within the range \([L, R]\).

The solution involves two main passes:
1. **Backward Propagation**: Compute the feasible range \([low_i, high_i]\) for each note \( B_i \) starting from the last note. This ensures that from any note \( i \) onwards, the constraints can be satisfied. The ranges are derived based on the constraints from the next note \( i+1 \):
   - **Increasing (\( A_i < A_{i+1} \))**: \( B_i \) must be in \([ \max(L, low_{i+1} - K), \min(R, high_{i+1} - 1) ]\).
   - **Equal (\( A_i = A_{i+1} \))**: \( B_i \) must be in \([ \max(L, low_{i+1}), \min(R, high_{i+1}) ]\).
   - **Decreasing (\( A_i > A_{i+1} \))**: \( B_i \) must be in \([ \max(L, low_{i+1} + 1), \min(R, high_{i+1} + K) ]\).
   If at any point \( low_i > high_i \), the melody is impossible, and we return -1.

2. **Forward Assignment**: Construct \( B \) lexicographically smallest by assigning the smallest valid value to each note, starting from the first note:
   - **Increasing**: \( B_{i+1} = \max(low_{i+1}, B_i + 1) \).
   - **Equal**: \( B_{i+1} = B_i \).
   - **Decreasing**: \( B_{i+1} = \max(low_{i+1}, B_i - K) \).

### Solution Code
```python
import sys

def main():
    data = sys.stdin.read().split()
    if not data:
        return
    
    n = int(data[0])
    L = int(data[1])
    R = int(data[2])
    K = int(data[3])
    A = list(map(int, data[4:4+n]))
    
    low = [0] * n
    high = [0] * n
    low[n-1] = L
    high[n-1] = R
    
    for i in range(n-2, -1, -1):
        if A[i] < A[i+1]:
            low_i = max(L, low[i+1] - K)
            high_i = min(R, high[i+1] - 1)
        elif A[i] == A[i+1]:
            low_i = max(L, low[i+1])
            high_i = min(R, high[i+1])
        else:
            low_i = max(L, low[i+1] + 1)
            high_i = min(R, high[i+1] + K)
            
        if low_i > high_i:
            print(-1)
            return
        else:
            low[i] = low_i
            high[i] = high_i
            
    res = [0] * n
    res[0] = low[0]
    
    for i in range(n-1):
        if A[i] < A[i+1]:
            res[i+1] = max(low[i+1], res[i] + 1)
        elif A[i] == A[i+1]:
            res[i+1] = res[i]
        else:
            res[i+1] = max(low[i+1], res[i] - K)
            
    print(" ".join(map(str, res)))

if __name__ == "__main__":
    main()
```

### Explanation
1. **Backward Propagation**:
   - The algorithm starts from the last note, initializing its range to \([L, R]\).
   - For each previous note, it calculates the valid range based on the next note's range and the relationship in \( A \):
     - **Increasing**: The current note must be at least \( \text{next\_note} - K \) and at most \( \text{next\_note} - 1 \).
     - **Equal**: The current note must equal the next note.
     - **Decreasing**: The current note must be at least \( \text{next\_note} + 1 \) and at most \( \text{next\_note} + K \).
   - If any note's feasible range is empty (i.e., \( low_i > high_i \)), the melody is impossible, and the algorithm outputs -1.

2. **Forward Assignment**:
   - Starting with the smallest valid value for the first note (\( low_0 \)), the algorithm constructs \( B \) by assigning the smallest possible value for each subsequent note:
     - **Increasing**: The next note is at least \( B_i + 1 \) but not less than its own \( low_{i+1} \).
     - **Equal**: The next note must match the current note.
     - **Decreasing**: The next note is at most \( B_i - 1 \) but not less than \( B_i - K \) or its own \( low_{i+1} \).
   - The resulting sequence \( B \) is lexicographically smallest and adheres to all constraints.

This approach efficiently checks feasibility and constructs the optimal melody in linear time, making it suitable for large inputs.