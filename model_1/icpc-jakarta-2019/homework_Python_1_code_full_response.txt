To solve this problem, we need to generate a permutation \( B \) of integers from 1 to \( N \) such that the sum of absolute differences between the given permutation \( A \) and \( B \) (i.e., \( \sum_{i=1}^{N} |A_i - B_i| \)) is at least \( N \). The solution should be efficient and handle the constraints where \( N \) can be as large as 100,000.

### Approach
1. **Problem Analysis**: The problem requires constructing any permutation \( B \) such that the sum of absolute differences between corresponding elements of \( A \) and \( B \) is at least \( N \). The key insight is that a simple cyclic shift of the array \( A \) (specifically, shifting each element to the left by one position with the first element moving to the end) ensures that the sum of absolute differences meets the required condition.
2. **Intuition**: The cyclic shift approach works because the sum of absolute differences \( \sum_{i=0}^{N-1} |A_i - A_{(i+1) \mod N}| \) forms a cycle. For distinct integers from 1 to \( N \), this sum is at least \( 2 \times (N-1) \), which is always greater than or equal to \( N \) for \( N \geq 2 \). 
3. **Algorithm Selection**: The algorithm involves creating permutation \( B \) by cyclically shifting \( A \) to the left. This means \( B_i = A_{(i+1) \mod N} \) for all \( i \). This operation is efficient, running in \( O(N) \) time and space, which is optimal for the given constraints.
4. **Complexity Analysis**: The solution reads the input in \( O(N) \) time, constructs the output permutation in \( O(N) \) time using slicing and concatenation, and prints the result in \( O(N) \) time. The space complexity is \( O(N) \) to store the permutation \( B \).

### Solution Code
```python
n = int(input().strip())
A = list(map(int, input().split()))
if n == 1:
    print(A[0])
else:
    B = A[1:] + [A[0]]
    print(' '.join(map(str, B)))
```

### Explanation
1. **Reading Input**: The first line reads the integer \( N \), the size of the permutation. The second line reads the permutation \( A \) of \( N \) distinct integers.
2. **Edge Handling**: Although the problem guarantees \( N \geq 2 \), the code includes a check for \( N = 1 \) for completeness.
3. **Cyclic Shift**: For \( N \geq 2 \), the solution constructs \( B \) by shifting each element of \( A \) one position to the left. The first element of \( A \) moves to the end of \( B \).
4. **Output**: The resulting permutation \( B \) is printed as space-separated integers. This permutation ensures the sum of absolute differences between \( A \) and \( B \) is at least \( N \), satisfying the problem's condition efficiently. 

For example, given \( A = [1, 3, 2, 4] \), the cyclic shift produces \( B = [3, 2, 4, 1] \). The sum of absolute differences is \( |1-3| + |3-2| + |2-4| + |4-1| = 2 + 1 + 2 + 3 = 8 \), which is greater than \( N = 4 \). This approach efficiently generates a valid permutation for any input size \( N \geq 2 \).