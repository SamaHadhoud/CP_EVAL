To solve this problem, we need to determine if there exists a path between two cells in an N x N grid such that every cell along the path contains an even number. The grid is defined by two arrays, R and C, where the value at cell (i, j) is R[i] + C[j]. The key insight is that a cell (i, j) is even if and only if R[i] and C[j] have the same parity (both even or both odd). 

### Approach
1. **Problem Analysis**:
   - The grid can be partitioned into two types of cells:
     - **Type0**: Cells where both R[i] and C[j] are even.
     - **Type1**: Cells where both R[i] and C[j] are odd.
   - Movement between adjacent cells (up, down, left, right) is only possible if both cells are of the same type. Therefore, the start and end cells must be of the same type for a path to exist.
   - Within the same type, connectivity is determined by contiguous intervals of rows and columns that share the same parity. Specifically:
     - For Type0, the connected components are defined by contiguous intervals of rows with even values and contiguous intervals of columns with even values.
     - For Type1, the connected components are defined by contiguous intervals of rows with odd values and contiguous intervals of columns with odd values.

2. **Precomputation**:
   - Compute the parity (even or odd) for each element in arrays R and C.
   - For each type, preprocess the rows and columns to identify contiguous intervals:
     - **Type0 Rows/Columns**: For each row/column with even parity, store the starting index of its contiguous interval.
     - **Type1 Rows/Columns**: Similarly, for each row/column with odd parity, store the starting index of its contiguous interval.

3. **Query Processing**:
   - For each query, convert the 1-based indices to 0-based.
   - Check if the start and end cells are of the same type. If not, output "NO".
   - If they are of the same type, check if they lie in the same contiguous row interval and the same contiguous column interval for that type. If yes, output "YES"; otherwise, "NO".

### Solution Code
```cpp
#include <cstdio>
#include <vector>
using namespace std;

int main() {
    int n, q;
    scanf("%d %d", &n, &q);
    vector<int> R(n);
    vector<int> C(n);
    for (int i = 0; i < n; i++) {
        scanf("%d", &R[i]);
    }
    for (int i = 0; i < n; i++) {
        scanf("%d", &C[i]);
    }

    vector<int> r_parity(n);
    vector<int> c_parity(n);
    for (int i = 0; i < n; i++) {
        r_parity[i] = R[i] % 2;
        c_parity[i] = C[i] % 2;
    }

    vector<int> row0_group(n, -1);
    vector<int> row1_group(n, -1);
    vector<int> col0_group(n, -1);
    vector<int> col1_group(n, -1);

    int current_start = -1;
    for (int i = 0; i < n; i++) {
        if (r_parity[i] == 0) {
            if (i == 0 || r_parity[i-1] != 0) {
                current_start = i;
            }
            row0_group[i] = current_start;
        } else {
            if (i == 0 || r_parity[i-1] != 1) {
                current_start = i;
            }
            row1_group[i] = current_start;
        }
    }

    current_start = -1;
    for (int j = 0; j < n; j++) {
        if (c_parity[j] == 0) {
            if (j == 0 || c_parity[j-1] != 0) {
                current_start = j;
            }
            col0_group[j] = current_start;
        } else {
            if (j == 0 || c_parity[j-1] != 1) {
                current_start = j;
            }
            col1_group[j] = current_start;
        }
    }

    while (q--) {
        int ra, ca, rb, cb;
        scanf("%d %d %d %d", &ra, &ca, &rb, &cb);
        ra--; ca--; rb--; cb--;

        if (r_parity[ra] != r_parity[rb]) {
            printf("NO\n");
        } else {
            if (r_parity[ra] == 0) {
                if (row0_group[ra] == row0_group[rb] && col0_group[ca] == col0_group[cb]) {
                    printf("YES\n");
                } else {
                    printf("NO\n");
                }
            } else {
                if (row1_group[ra] == row1_group[rb] && col1_group[ca] == col1_group[cb]) {
                    printf("YES\n");
                } else {
                    printf("NO\n");
                }
            }
        }
    }

    return 0;
}
```

### Explanation
1. **Reading Input**: The input is read in one go for efficiency, especially given the constraints.
2. **Parity Calculation**: The parity (even or odd) of each element in arrays R and C is computed and stored.
3. **Contiguous Intervals Identification**:
   - For **Type0** (even parity), the code identifies contiguous intervals of rows and columns where all elements are even. The start index of each interval is stored.
   - For **Type1** (odd parity), the same process is applied to rows and columns with odd values.
4. **Query Processing**:
   - For each query, the start and end cells are checked for type compatibility. If they differ, the answer is "NO".
   - If they are the same type, the code checks if both cells lie in the same contiguous row and column intervals. If yes, the answer is "YES"; otherwise, "NO".
5. **Output**: The results for all queries are collected and printed at once for efficiency.

This approach efficiently handles the constraints by leveraging contiguous intervals and parity checks, ensuring optimal performance for large grids and numerous queries.