To solve this problem, we need to transform an original melody sequence into a new sequence that adheres to specific constraints while being lexicographically smallest. The constraints are:
1. **Relative Order**: The relative order between consecutive notes in the new sequence must match the original sequence (i.e., if the original sequence has an increase, the new sequence must also increase; same for equality and decrease).
2. **Adjacent Difference**: The absolute difference between consecutive notes in the new sequence must not exceed a given value \( K \).
3. **Vocal Range**: All notes in the new sequence must lie within a specified range \([L, R]\).

### Approach
1. **Backward Propagation**:
   - Start from the last note and propagate backward to determine the feasible range \([low_i, high_i]\) for each note \( B_i \). This ensures that from any note \( i \) onwards, the constraints can be satisfied.
   - For each note \( i \):
     - **Increasing (\( A_i < A_{i+1} \))**: \( B_i \) must be in \([\max(L, low_{i+1} - K), \min(R, high_{i+1} - 1)]\).
     - **Equal (\( A_i = A_{i+1} \))**: \( B_i \) must be in \([\max(L, low_{i+1}), \min(R, high_{i+1})]\).
     - **Decreasing (\( A_i > A_{i+1} \))**: \( B_i \) must be in \([\max(L, low_{i+1} + 1), \min(R, high_{i+1} + K)]\).
   - If at any point \( low_i > high_i \), it's impossible to construct the sequence, and we return -1.

2. **Forward Assignment**:
   - Construct the new sequence \( B \) lexicographically smallest by starting from the first note and assigning the smallest valid value for each subsequent note:
     - **Increasing**: \( B_{i+1} = \max(low_{i+1}, B_i + 1) \).
     - **Equal**: \( B_{i+1} = B_i \).
     - **Decreasing**: \( B_{i+1} = \max(low_{i+1}, B_i - K) \).

### Solution Code
```python
import sys

def main():
    data = sys.stdin.read().split()
    if not data:
        return
    
    n = int(data[0])
    L = int(data[1])
    R = int(data[2])
    K = int(data[3])
    A = list(map(int, data[4:4+n]))
    
    low = [0] * n
    high = [0] * n
    low[-1] = L
    high[-1] = R
    
    for i in range(n-2, -1, -1):
        if A[i] < A[i+1]:
            low_i_val = max(L, low[i+1] - K)
            high_i_val = min(R, high[i+1] - 1)
        elif A[i] == A[i+1]:
            low_i_val = max(L, low[i+1])
            high_i_val = min(R, high[i+1])
        else:
            low_i_val = max(L, low[i+1] + 1)
            high_i_val = min(R, high[i+1] + K)
            
        if low_i_val > high_i_val:
            print(-1)
            return
        else:
            low[i] = low_i_val
            high[i] = high_i_val
            
    res = [0] * n
    res[0] = low[0]
    
    for i in range(0, n-1):
        if A[i] < A[i+1]:
            next_val = res[i] + 1
            res[i+1] = max(low[i+1], next_val)
        elif A[i] == A[i+1]:
            res[i+1] = res[i]
        else:
            next_val = res[i] - K
            res[i+1] = max(low[i+1], next_val)
            
    print(" ".join(map(str, res)))

if __name__ == "__main__":
    main()
```

### Explanation
1. **Backward Propagation**:
   - The algorithm starts from the last note, initializing its range to \([L, R]\).
   - For each previous note, it calculates the valid range based on the next note's range and the relationship in the original sequence:
     - **Increasing**: The current note must be at least \( \text{next\_note} - K \) and at most \( \text{next\_note} - 1 \).
     - **Equal**: The current note must equal the next note.
     - **Decreasing**: The current note must be at least \( \text{next\_note} + 1 \) and at most \( \text{next\_note} + K \).
   - If any note's feasible range is empty (i.e., \( low_i > high_i \)), the sequence is impossible, and the algorithm outputs -1.

2. **Forward Assignment**:
   - Starting with the smallest valid value for the first note (\( low_0 \)), the algorithm constructs the new sequence by assigning the smallest possible value for each subsequent note:
     - **Increasing**: The next note is at least \( B_i + 1 \) but not less than its own \( low_{i+1} \).
     - **Equal**: The next note must match the current note.
     - **Decreasing**: The next note is at most \( B_i - 1 \) but not less than \( B_i - K \) or its own \( low_{i+1} \).
   - The resulting sequence is lexicographically smallest and adheres to all constraints.

This approach efficiently checks feasibility and constructs the optimal sequence in linear time, making it suitable for large inputs.