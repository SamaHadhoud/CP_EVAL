To solve this problem, we need to transform the original melody \( A \) into a new melody \( B \) that adheres to specific constraints while being lexicographically smallest. The constraints are:
1. **Relative Order**: For each consecutive pair in \( A \), the relative order in \( B \) must match (if \( A_i < A_{i+1} \), then \( B_i < B_{i+1} \); if equal, then equal; if greater, then greater).
2. **Adjacent Difference**: The absolute difference between consecutive notes in \( B \) must not exceed \( K \).
3. **Vocal Range**: Every note in \( B \) must lie within the range \([L, R]\).

### Approach
1. **Backward Propagation**: 
   - Compute feasible ranges \([low_i, high_i]\) for each note \( B_i \) starting from the last note. This ensures that from any note \( i \) onwards, the constraints can be satisfied.
   - For the last note, the range is \([L, R]\).
   - For each previous note, based on the relationship in \( A \):
     - **Increasing (\( A_i < A_{i+1} \))**: \( B_i \) must be in \([\max(L, low_{i+1} - K), \min(R, high_{i+1} - 1)]\).
     - **Equal (\( A_i = A_{i+1} \))**: \( B_i \) must be in \([\max(L, low_{i+1}), \min(R, high_{i+1})]\).
     - **Decreasing (\( A_i > A_{i+1} \))**: \( B_i \) must be in \([\max(L, low_{i+1} + 1), \min(R, high_{i+1} + K)]\).
   - If at any point \( low_i > high_i \), the melody is impossible, and we return -1.

2. **Forward Assignment**:
   - Construct \( B \) lexicographically smallest by assigning the smallest valid value to each note, starting from the first note:
     - **Increasing**: \( B_{i+1} = \max(low_{i+1}, B_i + 1) \).
     - **Equal**: \( B_{i+1} = B_i \).
     - **Decreasing**: \( B_{i+1} = \max(low_{i+1}, B_i - K) \).

### Solution Code
```cpp
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);

    long long n, L, R, K;
    cin >> n >> L >> R >> K;
    vector<long long> A(n);
    for (int i = 0; i < n; i++) {
        cin >> A[i];
    }

    vector<long long> low(n);
    vector<long long> high(n);

    low[n-1] = L;
    high[n-1] = R;

    for (int i = n-2; i >= 0; i--) {
        if (A[i] < A[i+1]) {
            low[i] = max(L, low[i+1] - K);
            high[i] = min(R, high[i+1] - 1);
        } else if (A[i] == A[i+1]) {
            low[i] = max(L, low[i+1]);
            high[i] = min(R, high[i+1]);
        } else {
            low[i] = max(L, low[i+1] + 1);
            high[i] = min(R, high[i+1] + K);
        }

        if (low[i] > high[i]) {
            cout << -1 << endl;
            return 0;
        }
    }

    vector<long long> res(n);
    res[0] = low[0];

    for (int i = 0; i < n-1; i++) {
        if (A[i] < A[i+1]) {
            res[i+1] = max(low[i+1], res[i] + 1);
        } else if (A[i] == A[i+1]) {
            res[i+1] = res[i];
        } else {
            res[i+1] = max(low[i+1], res[i] - K);
        }
    }

    for (int i = 0; i < n; i++) {
        if (i > 0) 
            cout << " ";
        cout << res[i];
    }
    cout << endl;

    return 0;
}
```

### Explanation
1. **Backward Propagation**:
   - The algorithm starts from the last note, initializing its range to \([L, R]\).
   - For each previous note, it calculates the valid range based on the next note's range and the relationship in \( A \):
     - **Increasing**: The current note must be at least \( \text{next\_note} - K \) and at most \( \text{next\_note} - 1 \).
     - **Equal**: The current note must equal the next note.
     - **Decreasing**: The current note must be at least \( \text{next\_note} + 1 \) and at most \( \text{next\_note} + K \).
   - If any note's feasible range is empty, the melody is impossible, and the algorithm outputs -1.

2. **Forward Assignment**:
   - Starting with the smallest valid value for the first note (\( low_0 \)), the algorithm constructs \( B \) by assigning the smallest possible value for each subsequent note:
     - **Increasing**: The next note is at least \( B_i + 1 \) but not less than its own \( low_{i+1} \).
     - **Equal**: The next note must match the current note.
     - **Decreasing**: The next note is at most \( B_i - 1 \) but not less than \( B_i - K \) or its own \( low_{i+1} \).
   - The resulting sequence \( B \) is lexicographically smallest and adheres to all constraints.

This approach efficiently checks feasibility and constructs the optimal melody in linear time, making it suitable for large inputs.