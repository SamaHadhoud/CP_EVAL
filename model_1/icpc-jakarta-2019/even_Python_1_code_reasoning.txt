 We are given: n, q, then array R of n integers, array C of n integers, then q queries of four integers (ra, ca, rb, cb)

 Important: The grid cell (i, j) is even if and only if R[i] and C[j] have the same parity (both even or both odd).

 Since the grid is defined by the arrays R and C, we can precompute the parities for each row and each column.

 The key observation:
 - The grid is partitioned into two types (by the parity of R[i] and C[j]):
   Type0: (even, even) -> even number (since even+even=even)
   Type1: (odd, odd)   -> even number (since odd+odd=even)

 Note: The problem states that the start and end cells are even, so they must be either Type0 or Type1.

 However, we cannot traverse the grid because n can be up to 100,000 (so grid has 10^10 cells).

 How do we check connectivity?
 - Adjacent moves: only allowed to cells that are also even. But note that an adjacent cell in the same row (same R[i]) will have the same row parity. The column index changes by one, so the column parity must be the same as the next column? Actually, the next column j+1 must have the same parity as the current column j? Not necessarily.

 Actually, for a cell (i, j) to be even, we have R[i] % 2 == C[j] % 2.

 Consider moving from (i, j) to (i, j+1):
   The new cell is (i, j+1): it is even if R[i] % 2 == C[j+1] % 2.

 But note: the current cell (i, j) is even so R[i] % 2 = C[j] % 2.

 Therefore, the cell (i, j+1) is even if and only if C[j] % 2 == C[j+1] % 2? 
   Actually: we require R[i] % 2 == C[j+1] % 2, and since R[i] % 2 = C[j] % 2, then we require C[j] % 2 == C[j+1] % 2.

 Similarly, moving vertically: from (i, j) to (i+1, j): 
   The new cell (i+1, j) is even if R[i+1] % 2 == C[j] % 2, and because the current cell condition is R[i] % 2 = C[j] % 2, we require R[i] % 2 == R[i+1] % 2? Actually, no: the condition for the new cell is independent. But note: we can only move if the new cell is even, so we require that R[i+1] % 2 equals C[j] % 2, which is the same as R[i] % 2 (because current cell is even). Therefore, we require R[i] % 2 == R[i+1] % 2.

 Therefore, we can move horizontally from (i, j) to (i, j+1) only if the two adjacent columns (j and j+1) have the same parity? 
   Actually: we require the entire row i to have the same row parity? But the row parity is fixed for the row. The condition for the horizontal move is: C[j] % 2 must equal C[j+1] % 2? Because we need the next cell to be even? And the row i has fixed parity (say p = R[i]%2). Then the current column j has parity p, so the next column j+1 must have parity p as well.

 Similarly, vertical move: from (i, j) to (i+1, j) is allowed only if R[i] % 2 == R[i+1] % 2? Because the current column j has parity p (which equals R[i]%2), and then we require R[i+1]%2 to be equal to C[j]%2 = p, so R[i]%2 must equal R[i+1]%2.

 However, note: what if the row parities are different? Then we cannot move vertically. Similarly for columns.

 Therefore, the connectivity within a type is only possible if we have contiguous segments of rows with the same parity? Actually, no: because we can also move horizontally only within contiguous columns of the same parity? But note: the entire grid is fixed by the row array and column array.

 Actually, the grid is a bipartite graph? But we are restricted to one type? Actually, the even cells form two separate sets: Type0 and Type1. And note: adjacent cells must share an edge only if they are of the same type? Actually, no: because two adjacent cells (in the grid) that are both even could be of different types? Let me check:

 Consider two adjacent cells: (i,j) and (i,j+1). 
   (i,j) is even -> so R[i] and C[j] have the same parity.
   (i,j+1) is even -> so R[i] and C[j+1] have the same parity.

 Therefore, we have:
   R[i] % 2 = C[j] % 2 = C[j+1] % 2.

 So the two adjacent cells are of the same type? Because the type is determined by the row and column parities. Since the row is the same, and the column parities are the same, then both are Type0 if R[i] is even (then C[j] and C[j+1] are even) or both are Type1 if R[i] is odd.

 Similarly, for vertical: 
   (i,j) and (i+1,j): 
        (i,j): R[i] %2 = C[j]%2.
        (i+1,j): R[i+1]%2 = C[j]%2.
   Therefore, R[i]%2 = R[i+1]%2? So the row parities must be the same? Then both cells are the same type: if R[i] is even then both Type0, if odd then both Type1.

 Therefore, we cannot move from Type0 to Type1? So the two types are disconnected.

 Thus, the first condition: the start and end must be of the same type.

 Now, within one type, how are the cells connected?

 We note that:
 - We can move horizontally between two columns j and j' only if all the columns in between have the same parity? And also the row we are on must have the same parity as the column (which is fixed for the entire row and the entire column set).

 But note: if we have a row i (with parity p) and we want to move horizontally from column j to j', then we require that every column from j to j' has parity p? Then every cell in the row i from j to j' is even? And we can traverse.

 Similarly, we can move vertically in a column j (with parity p) from row i to i', if every row from i to i' has parity p? Then every cell in that column j from row i to i' is even.

 However, we can change rows and columns arbitrarily? 

 Consider: we are at (i, j) and we want to go to (i', j').

 We can do:
   (i, j) -> (i, j1) -> (i2, j1) -> ... -> (i', j') 

 But the moves are restricted: 
   - Horizontal moves in row i: we can only traverse columns that have the same parity as row i (which is fixed) and contiguous same parity columns? 
   - Then when we move vertically in a column j1: we can only traverse rows that have the same parity as column j1. But note: for the horizontal move to j1, we required that the column j1 has the same parity as row i. And for the vertical move, we require that the rows we traverse have the same parity as column j1, which is the same as row i.

 Therefore, the entire path must lie in the same type (which we already have) and we can move freely within contiguous blocks of rows that have the same parity and contiguous blocks of columns that have the same parity? Actually, we can combine the row and column conditions.

 However, note: the row parities and column parities are independent. 

 How do we form connected components?

 In fact, the connectivity in the grid for a fixed type (say Type0) is as follows:

   - We can move from (i, j) to (i', j') if and only if:
        (1) The rows i and i' are in the same contiguous segment of rows that are all even (if we are Type0) or all odd (if we are Type1) and similarly the columns j and j' are in the same contiguous segment of columns that are all even (Type0) or all odd (Type1).

   Why?
        Because to move horizontally, we require that the columns we traverse are contiguous and of the same parity. Similarly for vertical moves. But also note that we can switch between rows and columns arbitrarily? Actually, if we have:

        Row i: even, and we are in a contiguous segment of columns [a, b] that are all even? Then we can traverse any column in [a,b] in that row.

        Then we can move to a row i+1 only if row i+1 is even? And then from row i+1, we can traverse the same contiguous columns [a,b]? 

        But what if the row i and row i+1 are adjacent and both even? Then we can move vertically at any column j? Actually, we can move from (i, j) to (i+1, j) only if column j is even? Which it is (because we are in a column segment of even). 

        Therefore, the entire block of rows that are contiguous even and columns that are contiguous even form a connected component? Actually, we can have:

          Row indices: [r1, r2] contiguous even rows? 
          Column indices: [c1, c2] contiguous even columns?

        Then any cell (i, j) with i in [r1, r2] and j in [c1, c2] is connected? 

        However, what if the row segments and column segments are not contiguous? 

        Example: 
          R = [0, 2, 1, 3]   -> parities: [0,0,1,1] -> so the even rows are [0,1] (0-indexed indices 0 and 1) and they are contiguous? 
          C = [0, 1, 2, 3]   -> parities: [0,1,0,1] -> the even columns are at indices 0 and 2, but they are not contiguous.

        Then in row0 (index0): we have columns 0 and 2 (even) -> so we can go from (0,0) to (0,2) if the columns between are even? But column1 is odd -> so we cannot traverse from column0 to column2 in row0? 

        Therefore, the row0 is split into two segments: [0,0] and [2,2] (if we consider contiguous even columns). 

        Similarly, row1: same as row0? 

        Now, can we go from (0,0) to (1,0)? Yes, because row0 and row1 are adjacent and both even, and column0 is even -> so we can move vertically. Then from (1,0) we can move to (1,2)? No, because we cannot traverse horizontally from column0 to column2 in row1? Because column1 is odd -> blocked.

        Therefore, (0,0) and (0,2) are in different components? 

        Actually, we can go from (0,0) to (1,0) and then we are stuck at (1,0) because we cannot move to (1,1) (which is odd) and we cannot move to (0,0) again. 

        How about (0,0) and (1,0) are connected? But (0,2) is isolated? 

        Then the connected component for Type0 is actually the union of:
          For each contiguous segment of rows (with even rows) and for each contiguous segment of columns (with even columns), we get a rectangle? But no, because within a row we can only traverse contiguous even columns? And then we can jump to an adjacent row (if it is even) at the same column? But the column must be even in both rows? 

        Therefore, the connected component is defined by the contiguous segments of rows (with even) and the contiguous segments of columns (with even) independently? Actually, no: because the connectivity in rows and columns are independent? 

        Actually, we can model the grid as a graph where:
          - Each row is a node? And each column is a node? Then the cell (i, j) is an edge connecting row i and column j? But that is for bipartite matching.

        Alternatively, we note:

          The entire grid for Type0 is a bipartite graph? Actually, we can view it as a grid graph? 

        After analysis, we can see:

          The grid for Type0 is connected if and only if the rows that are even form a contiguous block and the columns that are even form a contiguous block? But the sample input #2:

          Sample Input #2:
            3 2
            30 40 49   -> parities: 30:0, 40:0, 49:1 -> so rows: [0,0,1]
            15 20 25   -> parities: 15:1, 20:0, 25:1 -> so columns: [1,0,1]

          Then the Type0 cells are:
            row0: column1 -> (0,1) -> because 30+20=50 (even) and 30+15=45 (odd) and 30+25=55 (odd) -> so only (0,1)
            row1: column1 -> (1,1) -> 40+20=60 (even) -> so (1,1)
            row2: none? because 49 is odd and we need a column that is odd? columns: 15 and 25 are odd -> so (2,0) and (2,2) -> but 49+15=64 (even) -> yes, but wait: 49 is odd, 15 is odd -> odd+odd=even -> so (2,0) and (2,2) are Type0? Actually, Type1? 

          Actually, wait: our types are defined by the row and column having the same parity. So for row2 (which is odd) we need a column that is odd? Then (2,0) and (2,2) are Type0? 

          But let me check the problem: Type0: both even -> even number. Type1: both odd -> even number. So both are valid even cells.

          However, the problem states: "it is guaranteed that both cell (r_a, c_a) and cell (r_b, c_b) contain even numbers".

          Now, the queries:
            Query1: ⟨2, 2, 3, 3⟩ -> in 1-indexed: (2,2) and (3,3). Convert to 0-indexed: (1,1) and (2,2). 
                (1,1): row1 (index1) and column1 (index1): R[1]=40 (even) and C[1]=20 (even) -> Type0? 
                (2,2): row2 (index2) and column2 (index2): R[2]=49 (odd) and C[2]=25 (odd) -> Type1? 
                So they are different types -> NO.

            Query2: ⟨1, 2, 2, 2⟩ -> 0-indexed: (0,1) and (1,1). 
                (0,1): R[0]=30 (even) and C[1]=20 (even) -> Type0.
                (1,1): Type0 -> same type.
                Now, can we go from (0,1) to (1,1)? 
                    We can move vertically: from (0,1) to (1,1): 
                         (0,1): even -> valid, (1,1): even -> valid.
                    But the move is only one step. However, we must check the condition: 
                         For the vertical move: we require that the row0 and row1 are both even? (they are) and the column1 is even? (it is) -> so we can move.

          But wait: the sample output for query2 is "YES".

          However, in our example, the Type0 cells are:
            (0,1): [30,20] -> even
            (1,1): [40,20] -> even
            Are they connected? 
                Adjacent: yes, by a vertical move. So YES.

          So why the first query is NO? because the two cells are of different types.

        How about the connectivity within Type0? 
          We have two cells: (0,1) and (1,1). 
          The rows: row0 and row1 are both even? and they are adjacent? 
          The column1 is even? 
          Therefore, we can move vertically? 

        But what if we had a more complex scenario? 

        We can define for Type0:
          - The rows that are even: we group contiguous rows? 
          - The columns that are even: we group contiguous columns?

        Then a cell (i, j) in Type0 belongs to the connected component defined by the contiguous row segment that row i is in and the contiguous column segment that column j is in? 

        However, note: we can move from (i, j) to (i, j') only if j and j' are in the same contiguous even column segment? 
        And we can move from (i, j) to (i', j) only if i and i' are in the same contiguous even row segment? 

        Then if we want to go from (i, j) to (i', j'): we can go from (i,j) to (i, j') if j and j' are in the same contiguous column segment? But wait: we might have to leave the row? 

        Actually, we can do:
          (i,j) -> (i, j) is already there.
          Then we can move to (i', j) if the rows i and i' are contiguous? But they might not be adjacent? However, we can move along the column j as long as the rows between i and i' are even? But note: if the rows are contiguous even, then we can traverse from i to i' along column j? 

        Then the entire connected component is the Cartesian product of the contiguous row segment and the contiguous column segment? 

        Therefore, two cells (i, j) and (i', j') are connected in Type0 if and only if:
          - They are in the same contiguous row segment (for even rows) and the same contiguous column segment (for even columns).

        Why? 
          Because we can move horizontally within a row to any column in the contiguous column segment? And we can move vertically within a column to any row in the contiguous row segment? 

        Example: 
          R = [0,2,4] -> all even -> one contiguous row segment: [0,2] (0-indexed indices 0,1,2)
          C = [0,2,4] -> all even -> one contiguous column segment: [0,2]
          Then the entire grid is one connected component.

        Example with gaps:
          R = [0,2,3,4] -> even rows: indices0,1,3 -> but not contiguous? 
          Then the contiguous row segments: [0,1] and [3,3] (if we break at index2 which is odd).
          C = [0,1,2] -> even columns: indices0,2 -> not contiguous? so two segments: [0,0] and [2,2]? 

          Then the connected components for Type0 are:
            Component1: rows [0,1] and columns [0,0] -> rectangle: [0,0] to [1,0] -> two cells: (0,0) and (1,0)
            Component2: rows [0,1] and columns [2,2] -> two cells: (0,2) and (1,2)
            Component3: row [3] and column [0] -> (3,0)
            Component4: row [3] and column [2] -> (3,2)

          Now, can we go from (0,0) to (1,0)? yes, because adjacent vertically? 
          But can we go from (0,0) to (0,2)? 
                We need to move horizontally from (0,0) to (0,1): but (0,1) is not even? because R[0]=0 (even) and C[1]=1 (odd) -> odd -> not even. So we cannot.

          Therefore, the contiguous segments are independent? 

          How about (0,0) and (1,2)? 
                We would go: (0,0) -> (1,0) -> (1,2)? 
                But from (1,0) to (1,2): we have to go through (1,1) which is: R[1]=2 (even) and C[1]=1 (odd) -> odd -> not allowed.

          So the connectivity is only within the Cartesian product of a contiguous row segment and contiguous column segment? 

        Therefore, the algorithm:

          Precomputation:
            Step1: Precompute the parity arrays for R and C.
            Step2: For the rows, we want to assign each row to a contiguous segment of even rows? and for odd rows? Actually, we do separately for Type0 and Type1? But note: Type0 uses even rows and even columns, Type1 uses odd rows and odd columns.

          However, we can do:

            For Type0 (even cells that are even because both row and column are even) we need:
               - The contiguous segments for even rows? 
               - The contiguous segments for even columns?

            For Type1 (even cells that are even because both row and column are odd) we need:
               - The contiguous segments for odd rows?
               - The contiguous segments for odd columns?

          How to compute contiguous segments for an array of parities?

            For even rows (for Type0):
              We traverse the rows and group consecutive rows that are even? 

            Similarly for even columns.

            For odd rows (for Type1): group consecutive rows that are odd.
            For odd columns: group consecutive columns that are odd.

          But note: a row might be even and used in Type0, and also a row might be odd and used in Type1? So we do:

            row0_group: an array for each row i (if it is even) we assign the starting index of the contiguous segment of even rows that contains i. Similarly, if the row i is not even, we don't care? But we won't use it in Type0.

          How to build:

            Let's create an array for Type0 rows: row0_group = [-1] * n
            current_start = -1
            for i in range(n):
                if R_parity[i] == 0: # even row for Type0
                    if i==0 or R_parity[i-1] != 0: # then we start a new segment
                        current_start = i
                    row0_group[i] = current_start
                else:
                    # if odd, we don't care for Type0, but we reset the segment? Actually, no: because we are grouping only even rows.
                    # do nothing, and we don't set row0_group[i] (leave as -1, but we won't use it for Type0 cells)

            Similarly for even columns: col0_group = [-1] * n

            For Type1 (odd rows and odd columns):
                row1_group = [-1] * n
                for i in range(n):
                    if R_parity[i] == 1: 
                        if i==0 or R_parity[i-1] != 1:
                            current_start = i
                        row1_group[i] = current_start

                Similarly for columns: col1_group = [-1] * n

          Then for a query:
            Convert to 0-indexed: (ra, ca) and (rb, cb) -> indices: ra0, ca0, rb0, cb0.

            Check the type of the start cell (ra0, ca0): 
                typeA = (R_parity[ra0] == C_parity[ca0])? 
                But note: the problem guarantees that the start and end are even, so we know that R_parity[ra0] must equal C_parity[ca0]? 
                Similarly for the end.

            However, we must check: the start and end must be the same type.

            Steps for a query:
              if R_parity[ra0] != R_parity[rb0] or C_parity[ca0] != C_parity[cb0]:
                 # actually, if the row parity of start and end are different, then they are in different types? 
                 # But wait: the type is defined by (row_parity == col_parity). 
                 # However, if the start cell: (ra0,ca0) is Type0: then row_parity=0 and col_parity=0.
                 # the end cell: (rb0,cb0) is Type0: then row_parity=0 and col_parity=0? 
                 # So if the row_parity of start and end are different, then they are different types? 
                 # Actually, if the row_parity of start and end are different, then the type of start and end must be different? because the type of start = (row_parity_start == col_parity_start) -> but we know col_parity_start = row_parity_start? Similarly for end: col_parity_end = row_parity_end? 
                 # Therefore, the type of start = row_parity_start (because col_parity_start = row_parity_start) and type of end = row_parity_end? 
                 # So if row_parity_start != row_parity_end, then they are different types? 

                 But note: what if the start is Type0 and the end is Type1? 
                    start: row_parity_start = 0, col_parity_start = 0 -> type0.
                    end:   row_parity_end = 1, col_parity_end = 1 -> type1.

                 So we can check: if row_parity[ra0] != row_parity[rb0] then they are different types -> NO.

                 Alternatively, we can check the type by: 
                    type_start = R_parity[ra0]   # because we know that R_parity[ra0] == C_parity[ca0]
                    type_end   = R_parity[rb0]   # and similarly R_parity[rb0] == C_parity[cb0]

                 Then if type_start != type_end -> output "NO"

            If same type, then:
                if type_start == 0: 
                    # then we are in Type0
                    if row0_group[ra0] == row0_group[rb0] and col0_group[ca0] == col0_group[cb0]:
                        output "YES"
                    else:
                        output "NO"

                else: # type_start == 1
                    if row1_group[ra0] == row1_group[rb0] and col1_group[ca0] == col1_group[cb0]:
                        output "YES"
                    else:
                        output "NO"

        Why? 
          Because the contiguous row segment for Type0 is defined by the contiguous even rows, and the contiguous column segment for Type0 is defined by contiguous even columns? And the entire component is the Cartesian product? 

        Example: 
          In the sample input #2, the second query: 
            (0,1) and (1,1): 
                R_parity = [0,0,1] -> so row0: even -> row0_group[0] = 0? 
                row1: even -> row0_group[1] = 0? (because at i=1: we see previous row0 is even so same segment) -> so row0_group[0] == row0_group[1] = 0.
                Columns: 
                    C_parity = [1,0,1] -> for even columns (Type0): only index1 is even? 
                    col0_group: 
                        index0: 1 -> skip? 
                        index1: 0 -> then we set current_start=1? 
                        Actually, we traverse j=0: 
                            j0: C_parity[0]=1 -> skip? 
                            j1: C_parity[1]=0 -> then if j==0? no, and previous (j0) is 1 (which is not 0) -> so start new segment at j1=1 -> col0_group[1]=1.
                        j2: skip? 
                Then for (0,1): row0_group[0]=0, col0_group[1]=1.
                For (1,1): row0_group[1]=0, col0_group[1]=1.
                So same row group and same column group? -> YES.

          But what if we have two different column segments? 
            Example: columns: [0,0,1,0,0] -> then even columns at indices0,1,3,4. 
                     contiguous segments: [0,1] and [3,4]? 
            Then a cell (i,0) and (i,3) would be in the same row segment (if row i is even) but different column segments? -> so they are not connected? 

          Is that true? 
            We cannot traverse from column0 to column3 in the same row? because we have column2 which is odd? blocking the way? 
            So we cannot go from (i,0) to (i,3) in the same row? 

          Therefore, we must be in the same contiguous column segment? 

          Similarly, if we are in the same row segment and same column segment, then we can traverse? 

          But note: what if we have a row segment that is [0,2] and a column segment that is [0,2]? Then the entire block of rows [0,2] and columns [0,2] is connected? 
            How? 
              We can move freely in the entire rectangle? 
              Because every row in [0,2] is even? and every column in [0,2] is even? 
              Then we can move from any cell (i,j) to any other cell (i',j') by:
                  moving along the row i from j to j'? if the columns between are contiguous even? they are? because [0,2] is contiguous? 
                  and then if we need to change row, we can move vertically at column j'? 

          Therefore, the condition is: 
            The two cells must be in the same contiguous row segment (for their type) and the same contiguous column segment (for their type).

        However, note: the contiguous row segment for Type0 is independent of the contiguous column segment? 

        But what if the row segment is [0,2] and the column segment is [0,2], then the entire rectangle is connected? 
          We can traverse any row in [0,2] and any column in [0,2]? 

        So the algorithm is as described.

        Let's test with the sample input #1:

          Input: 
            N=5, Q=3
            R = [6,2,7,8,3] -> parities: [0,0,1,0,1]   (0:even, 1:odd)
            C = [3,4,8,5,1] -> parities: [1,0,0,1,1]

          Type0: 
            Rows: indices with even: 0,1,3 -> 
                  row0: index0 -> segment starts at0
                  row1: index1 -> segment: contiguous? index0 and index1 are consecutive? then row0_group[1]=0? 
                  row3: index3 -> segment: since row2 is odd, so row3 starts a new segment? -> row0_group[3]=3
            Columns: indices with even: 1,2 -> 
                  col0_group[1]=1? (because j1: first even? then at j=1: start=1; j=2: contiguous? so col0_group[2]=1? 
                  But note: j0: odd -> skip; j1: even -> new segment? so col0_group[1]=1; j2: even -> contiguous? so col0_group[2]=1; j3: odd -> skip; j4: odd -> skip.

          Now, queries:

            Query1: (2,2) to (1,3): 1-indexed -> convert to 0-indexed: 
                (1,1) to (0,2) -> 
                (1,1): row1 -> row0_group[1]=0? and column1 -> col0_group[1]=1? 
                (0,2): row0 -> row0_group[0]=0? and column2 -> col0_group[2]=1? 
                Then row0_group: 0==0 -> same row segment? 
                col0_group: 1==1 -> same column segment? -> YES.

            Query2: (4,2) to (4,3): 0-indexed: (3,1) to (3,2)
                (3,1): row3 -> row0_group[3]=3? 
                (3,2): row3 -> row0_group[3]=3? 
                column1: col0_group[1]=1? 
                column2: col0_group[2]=1? 
                same row segment and same column segment? -> YES.

            Query3: (5,1) to (3,4): 0-indexed: (4,0) to (2,3)
                (4,0): row4 -> R_parity[4]=1 -> Type1? 
                (2,3): row2 -> R_parity[2]=1 -> Type1? 
                So same type? 

                For Type1:
                  Rows: odd: indices2,4 -> 
                      row2: if we start at index2? then at index4: not consecutive? so two segments: 
                         row1_group[2]=2? 
                         row1_group[4]=4? 
                  Columns: odd: indices0,3,4 -> 
                      contiguous segments: 
                         j0: odd -> start=0 -> col1_group[0]=0
                         j1: even -> skip
                         j2: even -> skip
                         j3: odd -> not consecutive? so new segment: start=3 -> col1_group[3]=3
                         j4: odd -> contiguous? so col1_group[4]=3? 

                (4,0): row4 -> row1_group[4]=4, column0 -> col1_group[0]=0
                (2,3): row2 -> row1_group[2]=2, column3 -> col1_group[3]=3

                So row1_group: 4 != 2 -> NO.

          But the sample output for query3 is "NO", so it matches.

        However, note: the sample input #1: 
            (5,1) is (4,0) in 0-index: 
                R[4]=3 (odd) and C[0]=3 (odd) -> Type1 -> and the only neighbors: 
                    (4,1): R[4]=3, C[1]=4 -> odd+even -> odd -> invalid.
                    (3,0): R[3]=8 (even) and C[0]=3 -> even+odd -> odd -> invalid.
                So indeed stuck.

        Therefore, we implement as above.

        One more note: the problem says the start and end are even, so we don't have to worry about the cell not being even? 

        Steps:

          Precompute:
            r_parity = [x % 2 for x in R]
            c_parity = [x % 2 for x in C]

          Precompute arrays for Type0 and Type1 for rows and columns:

            row0_group = [-1] * n
            current_start = -1
            for i in range(n):
                if r_parity[i] == 0:
                    if i==0 or r_parity[i-1] != 0:
                        current_start = i
                    row0_group[i] = current_start
                # else: leave as -1 (we don't care)

            Similarly for Type0 columns: col0_group = [-1] * n
            current_start = -1
            for j in range(n):
                if c_parity[j] == 0:
                    if j==0 or c_parity[j-1] != 0:
                        current_start = j
                    col0_group[j] = current_start

            For Type1 rows: row1_group = [-1] * n
            current_start = -1
            for i in range(n):
                if r_parity[i] == 1:
                    if i==0 or r_parity[i-1] != 1:
                        current_start = i
                    row1_group[i] = current_start

            For Type1 columns: col1_group = [-1] * n
            current_start = -1
            for j in range(n):
                if c_parity[j] == 1:
                    if j==0 or c_parity[j-1] != 1:
                        current_start = j
                    col1_group[j] = current_start

          Then for each query (ra, ca, rb, cb) (converted to 0-indexed):

            ra0 = ra-1, ca0 = ca-1, rb0 = rb-1, cb0 = cb-1

            if r_parity[ra0] != r_parity[rb0] or c_parity[ca0] != c_parity[cb0]:
                # Actually, we know the start and end are even, so the type must be consistent? 
                # But the type is defined by the row and column having the same parity? 
                # However, the condition for the entire path? 
                # Actually, we can check the type of the start and end by:
                #   typeA = (r_parity[ra0] == c_parity[ca0]) -> but the problem guarantees that the start and end are even, so this is always true? 
                #   but wait: the problem says "both cell (r_a, c_a) and cell (r_b, c_b) contain even numbers", so we have:
                #       r_parity[ra0] == c_parity[ca0]   -> true.
                #       r_parity[rb0] == c_parity[cb0]   -> true.
                #
                # Therefore, we can express the type of the start by r_parity[ra0] and the type of the end by r_parity[rb0]? 
                #   and if r_parity[ra0] != r_parity[rb0], then they are different types -> NO.
                #   Similarly, if they are the same type, then we proceed.

                # But note: the type of the start is r_parity[ra0] and the type of the end is r_parity[rb0]? 
                #   because the start: (ra0,ca0): even -> so r_parity[ra0] == c_parity[ca0] -> so the type is the same as r_parity[ra0]? 
                #   and similarly for the end.

                # Therefore, if r_parity[ra0] != r_parity[rb0], output "NO"

                # But wait: what if the row parity of start and end are the same but the column parities are different? 
                #   Actually, the type of the start is r_parity[ra0] (because it must equal the column parity) and the type of the end is r_parity[rb0]. 
                #   So if the row parities are different, then the types are different.

                # However, we can also check: 
                #   if (r_parity[ra0] != c_parity[ca0]) or (r_parity[rb0] != c_parity[cb0]):
                #      This should not happen because the problem guarantees the start and end are even? 

                # So we do:
                if r_parity[ra0] != r_parity[rb0]:
                    out_lines.append("NO")
                else:
                    # This else should not happen? because if the row parities are the same, then the types are the same? 
                    # Actually, no: we have an else? 
                    # But wait: we are checking if the row parities of the start and end are different? 
                    #   and if they are, then output "NO". 
                    #   But if they are the same, then we proceed to the next condition? 
                    # However, we also have an "or" condition: ... or c_parity[ca0] != c_parity[cb0]? 
                    # But note: the type of the start is r_parity[ra0] (which equals c_parity[ca0]) and the type of the end is r_parity[rb0] (which equals c_parity[cb0]). 
                    #   So if r_parity[ra0] == r_parity[rb0], then the column parities? 
                    #      c_parity[ca0] = r_parity[ra0] = r_parity[rb0] = c_parity[cb0]? 
                    #   Therefore, the column parities must be the same? 
                    #   So the "or" condition is redundant? 

                Actually, we can simplify: 
                  if r_parity[ra0] != r_parity[rb0]:
                      "NO"
                  else:
                      ...  # then they are the same type.

            But wait: the problem guarantees the start and end are even? So we don't need to check the column? 

            Alternatively, we can check the type by the row parity? 

            Therefore, we can do:

                if r_parity[ra0] != r_parity[rb0]:
                    out_lines.append("NO")
                    continue

            Then, if they are the same type:

                if r_parity[ra0] == 0:
                    if row0_group[ra0] == row0_group[rb0] and col0_group[ca0] == col0_group[cb0]:
                        out_lines.append("YES")
                    else:
                        out_lines.append("NO")
                else:
                    if row1_group[ra0] == row1_group[rb0] and col1_group[ca0] == col1_group[cb0]:
                        out_lines.append("YES")
                    else:
                        out_lines.append("NO")

        However, note: what if the start cell has row0_group[ra0] = -1? 
            But if the row0_group[ra0] is -1, that means that row ra0 is not even? but we know r_parity[ra0] is 0? -> that should not happen? 
            How we built row0_group: if r_parity[ra0]==0, then we set row0_group[ra0] to the start of the segment. So it should not be -1.

        Similarly for others.

        Therefore, the code as above.

        Let's test with the sample input #2, query1: 
            (2,2) to (3,3) in 1-indexed: 
                Convert: (1,1) to (2,2) 0-indexed.
                R_parity: [0,0,1] -> 
                    (1,1): row1: r_parity[1]=0 -> type0? 
                    (2,2): row2: r_parity[2]=1 -> type1? 
                So we check: r_parity[1] (0) != r_parity[2] (1) -> output "NO"

        Query2: 
            (1,2) to (2,2): 0-indexed: (0,1) to (1,1)
                r_parity[0]=0, r_parity[1]=0 -> same.
                Then type0: 
                    row0_group[0]=0? 
                    row0_group[1]=0? -> same row segment? 
                    col0_group[1]=? 
                         C_parity: [1,0,1] -> 
                         j0:1 -> skip
                         j1:0 -> set current_start=1 -> col0_group[1]=1
                         j2:1 -> skip
                    col0_group[1] for both: 1 and 1 -> same -> "YES"

        So the sample output: 
            NO
            YES

        Matches.

        We write the code accordingly.

        Note: we assume that the contiguous segment grouping is by the starting index of the contiguous block? 
          This serves as a label: all rows in the same contiguous block of even rows will have the same starting index? 
          Similarly for columns.

        This is efficient: O(n) precomputation and O(1) per query.

        Let's code accordingly.

        Important: n and q up to 100,000 -> efficient.

        We'll read the entire input at once for speed.

        Code accordingly.

        Note: the problem states that the two cells are different? but we don't have to worry: if they are the same cell, the problem says they are different? but the input says: "two different cells". So we don't have same cell.

        Let's code.