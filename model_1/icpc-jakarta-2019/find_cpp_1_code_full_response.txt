To solve this problem, we need to count the number of occurrences of each query string in a grid where each occurrence is formed by starting at a cell, moving right 0 or more times, and then moving down 0 or more times. The solution involves efficiently checking all possible paths for each query string by leveraging hashing for quick string comparisons and precomputing certain values to optimize the process.

### Approach
1. **Problem Analysis**: The problem requires counting occurrences of query strings in a grid where each occurrence is a path that starts at a cell, moves right any number of times, and then moves down any number of times. The challenge is to efficiently handle multiple queries, especially given the constraints (grid size up to 500x500 and up to 200,000 queries with a total combined length of 200,000 characters).

2. **Key Insights**:
   - **Path Structure**: Each valid path can be split into a horizontal segment followed by a vertical segment. The horizontal segment starts at some cell (r, c) and moves right, and the vertical segment starts immediately below the end of the horizontal segment and moves down.
   - **Hashing**: Precompute hash values for all rows and columns to enable O(1) substring comparisons. This allows efficient checking of whether grid segments match query string segments.
   - **Query Processing**:
     - For strings of length 1, simply count occurrences of the character in the grid.
     - For strings of length 2, use precomputed counts of adjacent character pairs (both horizontally and vertically).
     - For longer strings, iterate over possible split points where the string transitions from horizontal to vertical movement. For each split, use precomputed hashes to compare grid segments with the query string segments.

3. **Optimization**:
   - **Precomputation**: Compute prefix hashes for all rows and columns to facilitate quick substring hash checks.
   - **Early Termination**: Skip query strings longer than the maximum possible path length (R + C - 1) as they cannot fit in the grid.
   - **Efficient Splits**: For each query string, only consider splits that are feasible given the grid dimensions, reducing the number of checks needed.

### Solution Code
```cpp
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
using namespace std;

typedef unsigned long long ull;

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);

    int R, C, Q;
    cin >> R >> C >> Q;
    vector<string> grid(R);
    for (int i = 0; i < R; i++) {
        cin >> grid[i];
    }

    int max_len = max(R, C);
    vector<ull> pow_base(max_len + 1);
    pow_base[0] = 1;
    for (int i = 1; i <= max_len; i++) {
        pow_base[i] = pow_base[i - 1] * 131;
    }

    vector<vector<ull>> H_row(R, vector<ull>(C + 1, 0));
    for (int r = 0; r < R; r++) {
        for (int c = 0; c < C; c++) {
            H_row[r][c + 1] = H_row[r][c] * 131 + (grid[r][c] - 'A' + 1);
        }
    }

    vector<vector<ull>> H_col(C, vector<ull>(R + 1, 0));
    for (int c = 0; c < C; c++) {
        for (int r = 0; r < R; r++) {
            H_col[c][r + 1] = H_col[c][r] * 131 + (grid[r][c] - 'A' + 1);
        }
    }

    vector<ull> freq(26, 0);
    for (int r = 0; r < R; r++) {
        for (int c = 0; c < C; c++) {
            freq[grid[r][c] - 'A']++;
        }
    }

    vector<vector<int>> hor_pairs(26, vector<int>(26, 0));
    for (int r = 0; r < R; r++) {
        for (int c = 0; c < C - 1; c++) {
            int a = grid[r][c] - 'A';
            int b = grid[r][c + 1] - 'A';
            hor_pairs[a][b]++;
        }
    }

    vector<vector<int>> ver_pairs(26, vector<int>(26, 0));
    for (int r = 0; r < R - 1; r++) {
        for (int c = 0; c < C; c++) {
            int a = grid[r][c] - 'A';
            int b = grid[r + 1][c] - 'A';
            ver_pairs[a][b]++;
        }
    }

    while (Q--) {
        string S;
        cin >> S;
        int L = S.size();

        if (L == 1) {
            cout << freq[S[0] - 'A'] << '\n';
        } else if (L == 2) {
            int a = S[0] - 'A';
            int b = S[1] - 'A';
            cout << hor_pairs[a][b] + ver_pairs[a][b] << '\n';
        } else {
            if (L > R + C - 1) {
                cout << 0 << '\n';
                continue;
            }

            vector<ull> H_S(L + 1, 0);
            for (int j = 0; j < L; j++) {
                H_S[j + 1] = H_S[j] * 131 + (S[j] - 'A' + 1);
            }

            int i0 = max(0, L - R);
            int i1 = min(L - 1, C - 1);
            if (i0 > i1) {
                cout << 0 << '\n';
                continue;
            }

            ull ans = 0;
            for (int i = i0; i <= i1; i++) {
                int h_len = i + 1;
                int v_len = L - i - 1;

                ull hash_horiz = H_S[h_len];
                ull hash_vert = 0;
                if (v_len > 0) {
                    hash_vert = H_S[i + 1 + v_len] - H_S[i + 1] * pow_base[v_len];
                }

                int max_r = R - (L - i);
                int max_c = C - h_len;
                if (max_r < 0 || max_c < 0) {
                    continue;
                }

                for (int r = 0; r <= max_r; r++) {
                    for (int c = 0; c <= max_c; c++) {
                        ull h_row_val = H_row[r][c + h_len] - H_row[r][c] * pow_base[h_len];
                        if (h_row_val != hash_horiz) {
                            continue;
                        }

                        if (v_len > 0) {
                            ull h_col_val = H_col[c + i][r + 1 + v_len] - H_col[c + i][r + 1] * pow_base[v_len];
                            if (h_col_val != hash_vert) {
                                continue;
                            }
                        }
                        ans++;
                    }
                }
            }
            cout << ans << '\n';
        }
    }

    return 0;
}
```

### Explanation
1. **Precomputation**:
   - **Power Array**: Stores powers of the base (131) for efficient hash calculations.
   - **Row and Column Hashes**: Precompute prefix hashes for each row and column to enable O(1) substring hash checks.
   - **Frequency Array**: Counts occurrences of each character in the grid for quick answers to single-character queries.
   - **Adjacent Pairs**: Precompute counts of horizontally and vertically adjacent character pairs to efficiently answer length-2 queries.

2. **Query Processing**:
   - **Length 1 Queries**: Directly use the precomputed frequency array.
   - **Length 2 Queries**: Sum the counts from the precomputed horizontal and vertical adjacent pairs.
   - **Longer Queries**:
     - Skip if the string length exceeds the maximum possible path length (R + C - 1).
     - For each feasible split point (where the string transitions from horizontal to vertical), compute the required hashes for the query string segments.
     - For each valid starting position (r, c), use the precomputed row and column hashes to check if the grid segments match the query string segments.
     - Count all valid paths for the query string.

This approach efficiently handles the constraints by leveraging precomputation and hashing to minimize the per-query processing time, especially for short queries, while ensuring correctness for longer queries through careful iteration and hash comparisons.