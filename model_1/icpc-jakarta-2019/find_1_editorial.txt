### Approach
The problem involves counting occurrences of query strings in a grid where each occurrence is formed by moving right 0 or more times and then moving down 0 or more times. The solution leverages hashing to efficiently compare grid segments with query strings for all possible valid paths.

#### Key Insights:
1. **Path Structure**: Each valid path starts at a cell (r, c), moves right to (r, c + Δc), then moves down to (r + Δr, c + Δc). The string formed is the horizontal segment from (r, c) to (r, c + Δc) followed by the vertical segment from (r + 1, c + Δc) to (r + Δr, c + Δc).
2. **String Matching with Hashing**: Precompute hash values for all rows and columns to enable O(1) substring comparisons. For each query string, check all possible split points where the string transitions from horizontal to vertical movement.
3. **Efficiency Optimization**: 
   - Skip any query string longer than R + C - 1, as it cannot fit in the grid.
   - For each valid split point, determine the range of starting rows and columns that allow the entire path to fit within the grid.
   - Use precomputed hash values to compare grid segments with query string segments quickly.

### Solution Code
```cpp
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
using namespace std;

typedef unsigned long long ull;

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);

    int R, C, Q;
    cin >> R >> C >> Q;
    vector<string> grid(R);
    for (int i = 0; i < R; i++) {
        cin >> grid[i];
    }

    int max_len = max(R, C);
    vector<ull> pow_base(max_len + 1);
    pow_base[0] = 1;
    for (int i = 1; i <= max_len; i++) {
        pow_base[i] = pow_base[i - 1] * 131;
    }

    vector<vector<ull>> H_row(R, vector<ull>(C + 1, 0));
    for (int r = 0; r < R; r++) {
        for (int c = 0; c < C; c++) {
            H_row[r][c + 1] = H_row[r][c] * 131 + (grid[r][c] - 'A' + 1);
        }
    }

    vector<vector<ull>> H_col(C, vector<ull>(R + 1, 0));
    for (int c = 0; c < C; c++) {
        for (int r = 0; r < R; r++) {
            H_col[c][r + 1] = H_col[c][r] * 131 + (grid[r][c] - 'A' + 1);
        }
    }

    while (Q--) {
        string S;
        cin >> S;
        int L = S.size();

        if (L > R + C - 1) {
            cout << 0 << '\n';
            continue;
        }

        vector<ull> H_S(L + 1, 0);
        for (int j = 0; j < L; j++) {
            H_S[j + 1] = H_S[j] * 131 + (S[j] - 'A' + 1);
        }

        int i0 = max(0, L - R);
        int i1 = min(L - 1, C - 1);
        if (i0 > i1) {
            cout << 0 << '\n';
            continue;
        }

        vector<ull> hash_horiz(i1 + 1, 0);
        vector<ull> hash_vert(i1 + 1, 0);
        for (int i = i0; i <= i1; i++) {
            int len_horiz = i + 1;
            hash_horiz[i] = H_S[i + 1];
            int len_vert = L - i - 1;
            if (len_vert > 0) {
                hash_vert[i] = H_S[i + 1 + len_vert] - H_S[i + 1] * pow_base[len_vert];
            }
        }

        ull ans = 0;
        for (int i = i0; i <= i1; i++) {
            int len_vert = L - i - 1;
            int max_r_flag;
            if (len_vert > 0) {
                int max_r_inclusive = R - (L - i);
                if (max_r_inclusive < 0) {
                    continue;
                }
                max_r_flag = max_r_inclusive + 1;
            } else {
                max_r_flag = R;
            }

            for (int d = i; d < C; d++) {
                int start_col = d - i;
                for (int r = 0; r < max_r_flag; r++) {
                    if (r >= R) break;

                    ull h_row = H_row[r][d + 1] - H_row[r][start_col] * pow_base[i + 1];
                    if (h_row != hash_horiz[i]) {
                        continue;
                    }

                    if (len_vert > 0) {
                        ull h_col = H_col[d][r + 1 + len_vert] - H_col[d][r + 1] * pow_base[len_vert];
                        if (h_col != hash_vert[i]) {
                            continue;
                        }
                    }
                    ans++;
                }
            }
        }
        cout << ans << '\n';
    }

    return 0;
}
```

### Explanation
1. **Precomputation**:
   - **Power Array**: Stores powers of the base (131) for efficient hash calculations.
   - **Row Hashes**: For each row, precompute hash values for all possible starting positions to enable O(1) substring hash queries.
   - **Column Hashes**: Similarly, precompute hash values for each column to support quick vertical segment comparisons.

2. **Query Processing**:
   - **Skip Long Strings**: Any query string longer than `R + C - 1` is immediately skipped as it cannot fit in the grid.
   - **Hash Calculation for Query String**: Precompute hash values for the query string to facilitate quick comparisons.
   - **Valid Split Points**: For each possible split point (where the string transitions from horizontal to vertical), determine the valid range of starting positions (r, c) that allow the entire path to fit in the grid.
   - **Segment Matching**: Using precomputed hashes, compare the horizontal and vertical segments of the grid with the corresponding segments of the query string for all valid paths. Count matches to accumulate the answer for each query.

This approach efficiently checks all possible paths by leveraging hashing for constant-time substring comparisons, ensuring optimal performance even for large grids and numerous queries.