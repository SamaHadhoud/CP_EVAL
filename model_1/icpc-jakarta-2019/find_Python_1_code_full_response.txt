To solve this problem, we need to count the number of occurrences of each query string in a grid, where each occurrence is formed by starting at a cell, moving right 0 or more times, and then moving down 0 or more times. The solution involves efficiently checking all possible paths in the grid that match the query string by leveraging hashing for quick substring comparisons.

### Approach
1. **Precomputation of Hash Values**: 
   - **Row-wise Hashing**: For each row in the grid, precompute the prefix hashes to allow O(1) comparison of any horizontal segment.
   - **Column-wise Hashing**: Similarly, for each column in the grid, precompute the prefix hashes to allow O(1) comparison of any vertical segment.
   - **Power Array**: Precompute powers of the base (131) used in the hashing to facilitate quick hash calculations.

2. **Query Processing**:
   - For each query string, first check if its length exceeds the maximum possible path length in the grid (R + C - 1). If so, the answer is 0.
   - For valid strings, compute the prefix hashes of the query string.
   - Iterate over all possible split points where the string transitions from horizontal to vertical movement. For each split:
     - Determine the valid starting rows and columns that allow the entire path to fit within the grid.
     - Use the precomputed hashes to compare the horizontal and vertical segments of the grid with the corresponding segments of the query string.
     - Count all valid paths that match the query string.

### Solution Code
```python
import sys

def main():
    data = sys.stdin.read().splitlines()
    if not data: 
        return
    
    R, C, Q = map(int, data[0].split())
    grid = []
    for i in range(1, 1+R):
        grid.append(data[i].strip())
    
    base = 131
    max_len = max(R, C)
    pow_base = [1] * (max_len + 1)
    for i in range(1, max_len + 1):
        pow_base[i] = pow_base[i-1] * base

    H_row = [[0] * (C + 1) for _ in range(R)]
    for r in range(R):
        for c in range(C):
            char_val = ord(grid[r][c]) - ord('A') + 1
            H_row[r][c+1] = H_row[r][c] * base + char_val

    H_col = [[0] * (R + 1) for _ in range(C)]
    for c in range(C):
        for r in range(R):
            char_val = ord(grid[r][c]) - ord('A') + 1
            H_col[c][r+1] = H_col[c][r] * base + char_val

    out_lines = []
    index = 1 + R
    for _ in range(Q):
        S = data[index].strip()
        index += 1
        L = len(S)
        if L > R + C - 1:
            out_lines.append("0")
            continue

        H_S = [0] * (L + 1)
        for j in range(L):
            char_val = ord(S[j]) - ord('A') + 1
            H_S[j+1] = H_S[j] * base + char_val

        low_i = max(0, L - 1 - (R - 1))
        high_i = min(L - 1, C - 1)
        ans = 0
        for i in range(low_i, high_i + 1):
            h_len = i + 1
            v_len = L - i - 1
            if v_len < 0:
                continue
            if v_len > 0:
                max_r = R - 1 - v_len
            else:
                max_r = R - 1
            for r in range(0, max_r + 1):
                for d in range(i, C):
                    start_col = d - i
                    if start_col < 0:
                        continue
                    hash_row = H_row[r][d+1] - H_row[r][start_col] * pow_base[h_len]
                    if hash_row != H_S[h_len]:
                        continue
                    if v_len > 0:
                        hash_col = H_col[d][r+1 + v_len] - H_col[d][r+1] * pow_base[v_len]
                        expected_vert = H_S[h_len + v_len] - H_S[h_len] * pow_base[v_len]
                        if hash_col != expected_vert:
                            continue
                    ans += 1
        out_lines.append(str(ans))
    
    sys.stdout.write("\n".join(out_lines))

if __name__ == "__main__":
    main()
```

### Explanation
1. **Precomputation**:
   - **Row and Column Hashes**: For each row and column, we compute prefix hashes. This allows O(1) hash computation for any horizontal or vertical segment in the grid.
   - **Power Array**: Stores powers of the base (131) to facilitate quick hash calculations for segments of varying lengths.

2. **Query Processing**:
   - **Initial Check**: If the query string length exceeds the maximum possible path length (R + C - 1), the answer is 0.
   - **Prefix Hash for Query String**: Compute the prefix hashes for the query string to enable quick segment comparisons.
   - **Split Points**: For each possible split point (where the string transitions from horizontal to vertical movement), determine valid starting positions (rows and columns) that allow the entire path to fit within the grid.
   - **Hash Comparisons**: For each valid starting position, use the precomputed hashes to compare the grid segments (horizontal followed by vertical) with the corresponding segments of the query string. Count all valid matches.

This approach efficiently checks all possible paths in the grid by leveraging hashing for quick segment comparisons, ensuring optimal performance even for large grids and numerous queries.