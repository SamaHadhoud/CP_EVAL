To solve this problem, we need to determine whether Randall (the first employee) remains in the company after M years under Q different scenarios. Each scenario involves updating the performance value of one new employee in a specific year, and these updates are cumulative. The key insight is that Randall remains in the company if, at the start of each year, there are at least R_i employees with performance worse than his, where R_i is the number of employees replaced in year i.

### Approach
1. **Initial Setup**: 
   - Read the number of employees (N), years (M), and scenarios (Q).
   - Read the initial performance values of employees and determine the count of employees with performance worse than Randall's (A[0]).

2. **Processing Years**:
   - For each year, read the number of employees to replace (R_i) and the performance values of the new employees.
   - Compute the count of new employees in each year with performance worse than Randall's (G_i).

3. **Precompute Conditions**:
   - Compute an array H where H[t] represents the number of employees worse than Randall at the start of year t.
   - Compute an array D0 where D0[t] = H[t] - R_t. This value must be non-negative for Randall to survive year t.

4. **Segment Tree for Efficient Updates**:
   - Build a segment tree over D0 to support range updates (suffix updates) and global minimum queries.
   - For each scenario, update the performance value of a specified new employee. Adjust G_i for the corresponding year and propagate the change to D0 for subsequent years using the segment tree.
   - After each update, check if the global minimum of D0 is non-negative. If it is, Randall survives all M years; otherwise, he is removed in some year.

### Solution Code
```python
import sys

class SegmentTree:
    def __init__(self, data, n):
        self.n = n
        self.size = 1
        while self.size < n:
            self.size *= 2
        self.tree = [10**18] * (2 * self.size)
        self.lazy = [0] * (2 * self.size)
        for i in range(n):
            self.tree[self.size + i] = data[i]
        for i in range(n, self.size):
            self.tree[self.size + i] = 10**18
        for i in range(self.size - 1, 0, -1):
            self.tree[i] = min(self.tree[2*i], self.tree[2*i+1])
    
    def apply(self, node, delta):
        self.tree[node] += delta
        if node < self.size:
            self.lazy[node] += delta
            
    def push(self, node):
        if self.lazy[node] != 0:
            self.apply(2*node, self.lazy[node])
            self.apply(2*node+1, self.lazy[node])
            self.lazy[node] = 0
            
    def update_range(self, l, r, delta, node, segL, segR):
        if r < segL or segR < l:
            return
        if l <= segL and segR <= r:
            self.apply(node, delta)
            return
        self.push(node)
        mid = (segL + segR) // 2
        self.update_range(l, r, delta, 2*node, segL, mid)
        self.update_range(l, r, delta, 2*node+1, mid+1, segR)
        self.tree[node] = min(self.tree[2*node], self.tree[2*node+1])
        
    def update(self, l, r, delta):
        if l > r:
            return
        self.update_range(l, r, delta, 1, 0, self.size-1)
        
    def global_min(self):
        return self.tree[1]

def main():
    data = sys.stdin.read().split()
    if not data:
        return
    
    it = iter(data)
    n = int(next(it)); m = int(next(it)); q = int(next(it))
    A = [int(next(it)) for _ in range(n)]
    A0 = A[0]
    F1 = sum(1 for x in A if x < A0)
    
    R_arr = [0] * (m+1)
    B_arr = [None] * (m+1)
    G_current = [0] * (m+1)
    
    for i in range(1, m+1):
        R_i = int(next(it))
        R_arr[i] = R_i
        B_i = [int(next(it)) for _ in range(R_i)]
        B_arr[i] = B_i
        count_less = sum(1 for val in B_i if val < A0)
        G_current[i] = count_less
        
    if m > 0:
        H = [0] * (m+2)
        H[1] = F1
        D0 = [0] * m
        for t in range(1, m+1):
            D0[t-1] = H[t] - R_arr[t]
            H[t+1] = H[t] - R_arr[t] + G_current[t]
        seg_tree = SegmentTree(D0, m)
    else:
        seg_tree = None
        
    out_lines = []
    for _ in range(q):
        X = int(next(it)); Y = int(next(it)); Z = int(next(it))
        idx = Y - 1
        old_val = B_arr[X][idx]
        old_contrib = 1 if old_val < A0 else 0
        new_contrib = 1 if Z < A0 else 0
        delta = new_contrib - old_contrib
        
        if delta != 0:
            if m > 0 and X <= m-1:
                seg_tree.update(X, m-1, delta)
            B_arr[X][idx] = Z
            G_current[X] += delta
            
        if m == 0:
            out_lines.append("1")
        else:
            min_val = seg_tree.global_min()
            if min_val >= 0:
                out_lines.append("1")
            else:
                out_lines.append("0")
                
    sys.stdout.write("\n".join(out_lines) + "\n")

if __name__ == "__main__":
    main()
```

### Explanation
1. **Reading Input**: The input is read in one go for efficiency, especially given the constraints.
2. **Initial Setup**: The initial count of employees worse than Randall (F1) is computed from the initial performance array.
3. **Processing Years**: For each year, the number of new employees (R_i) and their performance values are read. The count of new employees worse than Randall (G_i) is stored.
4. **Precompute Conditions**: Arrays H (employees worse than Randall at the start of each year) and D0 (difference between H[t] and R_t) are computed. D0 must be non-negative for Randall to survive each year.
5. **Segment Tree**: A segment tree is built over D0 to efficiently handle range updates (suffix updates) and global minimum queries.
6. **Handling Scenarios**: For each scenario, the specified employee's performance is updated. The corresponding G_i is adjusted, and the segment tree is updated to reflect changes in D0 for subsequent years. The global minimum of D0 is checked to determine if Randall survives all years.
7. **Output**: Results for each scenario are collected and printed.

This approach efficiently handles the dynamic updates and queries using a segment tree, ensuring optimal performance even for large inputs.