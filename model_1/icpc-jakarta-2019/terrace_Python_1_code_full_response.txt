To solve this problem, we need to maximize the number of ghosts repelled per day by strategically placing three types of tiles on a one-dimensional yard. The yard consists of soil ('.') and rock ('#') cells, with at most 50 rocks. The tiles have specific placement rules and ghost-repelling capabilities. The goal is to maximize the total ghosts repelled by selecting an optimal combination of tiles while adhering to the constraints.

### Approach
1. **Problem Analysis**:
   - **Type-1 Tile**: Covers a single soil cell, repelling `G1` ghosts. At most `K` such tiles can be used.
   - **Type-2 Tile**: Covers two consecutive soil cells, repelling `G2` ghosts.
   - **Type-3 Tile**: Covers a soil-rock-soil pattern (".#."), repelling `G3` ghosts.
   - The challenge is to maximize the total ghosts repelled by selecting tiles such that they do not overlap, and the constraints on Type-1 tiles are satisfied.

2. **Key Insights**:
   - **Type-3 Tiles**: These tiles are constrained by the positions of rocks. Each Type-3 tile requires a rock with adjacent soil cells. The problem reduces to selecting eligible rocks (those with adjacent soil cells) for Type-3 tiles without overlapping.
   - **Dynamic Programming for Type-3 Tiles**: We use a DP approach to determine the maximum number of Type-3 tiles (`T_max`) that can be placed. The DP state tracks whether a rock is used for a Type-3 tile, considering eligibility and gap conditions between consecutive rocks.
   - **Soil Allocation**: After placing Type-3 tiles, the remaining soil cells are allocated to Type-1 and Type-2 tiles. The optimal allocation is derived by evaluating all possible counts of Type-1 tiles (up to `K`) and computing the corresponding ghosts from Type-2 tiles for the remaining soil cells.

3. **Algorithm Selection**:
   - **DP for Type-3 Tiles**: For each rock, determine if it can support a Type-3 tile. Use DP to maximize the count of such tiles while respecting adjacency constraints.
   - **Greedy Allocation for Soil Cells**: For each possible count of Type-3 tiles (`T`), compute the remaining soil cells (`rem = total_soil - 2*T`). The optimal allocation of Type-1 and Type-2 tiles on `rem` soil cells is found by iterating over possible Type-1 counts (up to `min(K, rem)`) and calculating the corresponding ghosts from Type-2 tiles.

4. **Complexity Analysis**:
   - **Time Complexity**: The solution involves processing up to 50 rocks (O(m)) and iterating over possible Type-1 allocations (O(K)), leading to an overall complexity of O(m*K). Given constraints (N ≤ 100,000, K ≤ 100,000, m ≤ 50), this is efficient.
   - **Space Complexity**: O(N) for storing the yard and O(m) for DP states, which is feasible.

### Solution Code
```python
import sys

def main():
    data = sys.stdin.read().splitlines()
    if not data:
        return
    first_line = data[0].split()
    n = int(first_line[0])
    K = int(first_line[1])
    G1 = int(first_line[2])
    G2 = int(first_line[3])
    G3 = int(first_line[4])
    s = data[1].strip()
    
    total_soil = s.count('.')
    rocks = []
    for i, char in enumerate(s):
        if char == '#':
            rocks.append(i)
    m = len(rocks)
    
    if m == 0:
        ans = 0
        rem = n
        for x in range(0, min(K, rem) + 1):
            y = (rem - x) // 2
            candidate = x * G1 + y * G2
            if candidate > ans:
                ans = candidate
        print(ans)
        return

    segs = [0] * (m + 1)
    segs[0] = rocks[0]
    for i in range(1, m):
        segs[i] = rocks[i] - rocks[i-1] - 1
    segs[m] = n - 1 - rocks[m-1]
    
    eligible = [False] * m
    for i in range(m):
        if rocks[i] > 0 and rocks[i] < n - 1 and s[rocks[i]-1] == '.' and s[rocks[i]+1] == '.':
            eligible[i] = True

    T_max = 0
    if m > 0:
        dp0 = [0] * m
        dp1 = [-10**9] * m
        if eligible[0]:
            dp1[0] = 1
        else:
            dp1[0] = -10**9
        dp0[0] = 0
        
        for i in range(1, m):
            dp0[i] = max(dp0[i-1], dp1[i-1])
            if eligible[i]:
                candidate = 1 + dp0[i-1]
                if rocks[i] - rocks[i-1] > 2:
                    candidate = max(candidate, 1 + dp1[i-1])
                dp1[i] = candidate
            else:
                dp1[i] = -10**9
        T_max = max(dp0[m-1], dp1[m-1])
    else:
        T_max = 0
    
    if T_max < 0:
        T_max = 0
    
    ans = 0
    for T in range(0, T_max + 1):
        rem = total_soil - 2 * T
        if rem < 0:
            continue
        best_soil = 0
        up = min(K, rem)
        for x in range(0, up + 1):
            y = (rem - x) // 2
            candidate_soil = x * G1 + y * G2
            if candidate_soil > best_soil:
                best_soil = candidate_soil
        total_candidate = T * G3 + best_soil
        if total_candidate > ans:
            ans = total_candidate
    print(ans)

if __name__ == '__main__':
    main()
```

### Explanation
1. **Input Handling**: The input is read and parsed into the yard dimensions, constraints, ghost values, and the yard string.
2. **Rock Processing**: Positions of rocks are identified. If there are no rocks, the solution simplifies to allocating Type-1 and Type-2 tiles on the entire yard.
3. **Segment Calculation**: The yard is divided into segments between rocks. Each segment's length is stored for later use.
4. **Eligibility Check**: For each rock, check if it can support a Type-3 tile (i.e., has adjacent soil cells).
5. **DP for Type-3 Tiles**: A dynamic programming approach determines the maximum number of Type-3 tiles (`T_max`) that can be placed without violating adjacency constraints.
6. **Soil Allocation**: For each possible count of Type-3 tiles (`T` from 0 to `T_max`), the remaining soil cells (`rem = total_soil - 2*T`) are allocated to Type-1 and Type-2 tiles. The optimal allocation is found by evaluating all feasible counts of Type-1 tiles (up to `min(K, rem)`) and computing the corresponding ghosts from Type-2 tiles.
7. **Result Calculation**: The maximum ghosts repelled across all feasible tile combinations is printed.

This approach efficiently combines dynamic programming for Type-3 tile placement with greedy allocation for the remaining soil cells, ensuring optimal performance even for large inputs.