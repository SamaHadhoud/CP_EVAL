To solve this problem, we need to count the number of feasible deployment plans for cleaning robots in a tree-structured town such that the deployment is irreducible. An irreducible deployment means that no two robots' cleaning paths can be combined into a single longer path. The solution involves dynamic programming on trees with specific state transitions to ensure the irreducibility condition is met.

### Approach
1. **Problem Analysis**: The problem requires partitioning the tree into disjoint paths where each path is a contiguous sequence of nodes, and no two paths can be merged into a longer path. The key insight is that two adjacent paths cannot both have endpoints connected by an edge; otherwise, they can be combined.
2. **Dynamic Programming States**: We define three states for each node during the DFS traversal:
   - **dp0[u]**: Number of ways where the node `u` is not an endpoint of any path.
   - **dp1[u]**: Number of ways where the node `u` is an endpoint of exactly one path.
   - **dp2[u]**: Number of ways where the node `u` is an internal node of a path (handles cases where paths meet at `u`).
3. **State Transitions**: For each node `u` and its child `v`, we update the states based on whether the edge between `u` and `v` is used to extend a path or left as a cut. The transitions ensure that if the edge is not used, at least one of the nodes (either `u` or `v`) is not an endpoint to satisfy the irreducibility condition.
4. **Tree Traversal**: We perform a post-order traversal (from leaves to root) to compute the DP states for each node based on its children's states.
5. **Result Calculation**: The result for the entire tree is the sum of `dp0[root]` and `dp1[root]`, representing all valid configurations where the root either is not an endpoint or is an endpoint of a path.

### Solution Code
```python
MOD = 10**9 + 7

import sys
sys.setrecursionlimit(300000)

def main():
    data = sys.stdin.read().split()
    n = int(data[0])
    graph = [[] for _ in range(n)]
    index = 1
    for _ in range(n - 1):
        u = int(data[index])
        v = int(data[index + 1])
        index += 2
        u -= 1
        v -= 1
        graph[u].append(v)
        graph[v].append(u)
    
    parent = [-1] * n
    children = [[] for _ in range(n)]
    stack = [0]
    while stack:
        u = stack.pop()
        for v in graph[u]:
            if v == parent[u]:
                continue
            parent[v] = u
            children[u].append(v)
            stack.append(v)
    
    order = []
    stack = [0]
    while stack:
        u = stack.pop()
        order.append(u)
        for v in children[u]:
            stack.append(v)
    order.reverse()
    
    dp0 = [0] * n
    dp1 = [0] * n
    dp2 = [0] * n
    
    for u in order:
        dp0[u] = 1
        dp1[u] = 0
        dp2[u] = 0
        for v in children[u]:
            old0 = dp0[u]
            old1 = dp1[u]
            old2 = dp2[u]
            c0 = dp0[v]
            c1 = dp1[v]
            c2 = dp2[v]
            
            nd0 = (2 * old0 * c0 + 2 * old0 * c1 + old0 * c2 +
                   old1 * c0 + old1 * c1 +
                   old2 * c0 + old2 * c1) % MOD
            nd1 = (old0 * (c0 + c1) +
                   old1 * c0) % MOD
            nd2 = (old0 * (c0 + c1) +
                   old2 * c0) % MOD
            
            dp0[u] = nd0
            dp1[u] = nd1
            dp2[u] = nd2
    
    ans = (dp0[0] + dp1[0]) % MOD
    print(ans)

if __name__ == '__main__':
    main()
```

### Explanation
1. **Input Handling**: The input is read and parsed into a tree structure represented as an adjacency list.
2. **Tree Construction**: Using a stack, we build the tree structure by setting parent-child relationships starting from the root (node 0).
3. **Post-order Traversal**: We determine the processing order of nodes from leaves to root using a reverse post-order traversal.
4. **Dynamic Programming Initialization**: For each node, we initialize three states (`dp0`, `dp1`, `dp2`) to count valid path configurations.
5. **State Transitions**: For each node, we update its states based on its children's states. The transitions consider whether the edge to a child is used to extend a path or not, ensuring the irreducibility condition by avoiding combinable paths.
6. **Result Calculation**: The result is derived from the root's states, combining configurations where the root is either not an endpoint or is an endpoint of a path, modulo \(10^9 + 7\).

This approach efficiently counts all valid irreducible deployment plans by leveraging dynamic programming on trees with careful state management to meet the problem constraints.