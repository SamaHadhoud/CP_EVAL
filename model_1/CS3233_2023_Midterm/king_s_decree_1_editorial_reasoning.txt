We are given C test cases. For each test case, we are given:
  n: number of cats
  w: list of n integers, the current wealth of each cat
  l: list of n integers, the minimum wealth that each cat must have

We can perform any number of operations. In each operation:
  - Choose a cat i that has wealth strictly greater than l_i.
  - Choose any other cat j, and transfer 1 unit of wealth from i to j.

Note: 
  - We cannot take a cat below its minimum l_i (so we can only take from cat i down to l_i+1 at least? actually, we can take until it becomes l_i, but then we stop because we require strictly greater than l_i to take even one more unit).
  - We are allowed to transfer to any cat arbitrarily.

Our goal: maximize the minimum wealth (i.e., the wealth of the poorest cat) after any number of such operations.

Constraints:
  - Total n over test cases <= 300,000.

Observations:

1. The total wealth in the system is fixed (say T = sum(w_i)). Therefore, the average wealth is T/n. However, we cannot distribute arbitrarily because of the constraints on the minimums.

2. Each cat i must have at least l_i. Therefore, the total "excess" wealth that we can redistribute is:
        excess = T - sum(l_i)

3. However, we cannot take a cat below l_i, so the amount we can take from cat i is (w_i - l_i). Therefore, the total wealth we can redistribute is the sum of (w_i - l_i) for all cats.

4. After redistribution, each cat must have at least l_i. We are free to assign the excess wealth arbitrarily to the cats. Therefore, the poorest cat we can have is at least:
        base_min = min(l_i)   [but we can do better?]

   Actually, we can set the wealth of each cat arbitrarily as long as:
        - For each cat i: x_i >= l_i
        - The total wealth is T.

   We want to maximize the minimum x_i (let's call this M). So we are looking for the maximum M such that:
        (a) M <= min(l_i) is not necessary? Actually, no: we must have at least l_i for each cat, so M must be at least min(l_i)? 
        But note: we are maximizing the poorest. However, we cannot set the poorest below any l_i because each cat must have at least its own l_i.

   However, note: each cat i must have at least l_i, so the poorest cat must have at least min_i(l_i). But we can set the poorest to be above that? 

   Actually, the constraint is that for each cat i: x_i >= l_i. So the poorest cat (which is at least M) must be at least min_i(l_i). But we might set M to be higher than min_i(l_i).

   But also note: we can only redistribute the excess. So we have:

        x_1 + x_2 + ... + x_n = T
        x_i >= l_i for each i.

   We want to maximize M such that we can have x_i >= M for every i? Actually, we want the maximum M such that we can assign x_i (satisfying x_i>=l_i and sum x_i = T) and such that the minimum x_i is at least M.

   However, note: we can also set the x_i arbitrarily as long as the above constraints? But we are constrained by the fact that we cannot take from a cat below l_i. However, the redistribution process allows us to take from any cat that has above l_i and give arbitrarily to others.

   So the problem reduces to:

        We have T total wealth, and each cat i has a lower bound l_i.
        We wish to maximize M such that:
            x_i >= max(l_i, M)   for all i?   [Actually, we require that the poorest cat is at least M, so every cat must be at least M. But we also have the constraint that each cat must be at least l_i. Therefore, we require:
                x_i >= max(l_i, M)   -> but note: if M is greater than l_i, then we require x_i >= M. If M is less than or equal to l_i, then we require x_i>=l_i. However, since we are maximizing M, we are going to set M as large as possible. So we can write: we require x_i >= max(l_i, M).]

        But note: we can set each cat to at least max(l_i, M). However, we are free to set above that. The constraint is the total sum.

        The minimal total wealth required to satisfy x_i >= max(l_i, M) is:
            S(M) = sum_{i=1}^{n} max(l_i, M)

        We must have: T >= S(M).

        Therefore, we are to find the maximum M such that:
            S(M) <= T.

5. However, note: M must be at least min(l_i) and at most max(l_i)? Actually, M can be larger than max(l_i). Why?

        If M is greater than max(l_i), then for every cat i, we require x_i >= M. Then S(M) = n * M.

        Then we require n*M <= T.

        So M can be as large as T/n (if T/n is an integer, but we are in integers? note: T and M are integers? Actually, the problem uses integers, so M must be an integer?).

        But note: the transfers are 1 unit at a time, so the entire system is integer. Therefore, M must be an integer.

        So the problem becomes: find the maximum integer M such that:
            S(M) = sum_{i} max(l_i, M) <= T.

        Then the answer is M.

6. How to compute S(M)? Note that M is an integer and we are going to search for the maximum M satisfying the condition.

   However, note the constraints: T and the numbers can be up to 10^9, and n up to 300,000 per test case, but the total n over test cases is 300,000. Therefore, we can consider an approach that works in O(n log(max_value)) per test case? But the total n is 300,000, but the maximum value of M we need to consider? The maximum M we can have is at most T/n (which is at most 10^9) so we cannot iterate over M.

   We need a more efficient way.

   Notice that S(M) is a piecewise linear function that is:

        For M <= min(l_i): 
            S(M) = sum(l_i)   [because max(l_i, M) = l_i for every i]

        For M in the range [min(l_i), max(l_i)]: 
            For each cat i, if l_i >= M, then max(l_i, M) = l_i; if l_i < M, then max(l_i, M) = M.

        For M >= max(l_i):
            S(M) = n * M.

   How does S(M) change? It is increasing in M. Specifically, it is constant until M is above min(l_i), then becomes a linear function with slope equal to the number of cats that have l_i < M (i.e., the number of cats that we are setting to M because M is above their l_i). Then for M above max(l_i), the slope becomes n.

   Therefore, we can do a binary search on M. The range for M: 
        Lower bound: L0 = min(l_i)   [but note: we might have M below min(l_i)? Actually, if we set M below min(l_i), then the constraint for each cat i is x_i>=l_i (because max(l_i, M)=l_i) and then we require T>=sum(l_i). But we have T = sum(w_i) and we know that the total minimal requirement is sum(l_i). So if T>=sum(l_i), then we can set M to min(l_i) at least? Actually, we can set M to any value between min(l_i) and the maximum achievable. But note: we are looking for the maximum M. So we start from min(l_i) and go up?]

        Actually, the minimal M we can set is min(l_i) and the maximum M we can set is floor(T/n) (if we set every cat to M, we require M <= T/n). However, note that we might have to set some cats to at least their l_i which is above M? Actually, when M is above l_i, then we set that cat to M. But if M is above l_i, then we require the cat to have at least M, which is more than l_i. So we can set M as high as T/n? But also we have the constraint that for a cat i with l_i > T/n, we cannot set it to below l_i, so M must be at least l_i? Actually, if we set M = T/n, then for a cat i with l_i > T/n, we require x_i >= max(l_i, T/n) = l_i. Then the total minimal sum would be at least ... the sum of max(l_i, M) for all i.

        Therefore, we can binary search M in the range [min_l, max_M] where min_l = min(l_i) and max_M = floor(T/n) or even higher? Actually, if M is above max(l_i), then we require n*M <= T, so M can be as large as floor(T/n). But if max(l_i) is greater than T/n, then we cannot set M to T/n? Actually, we can set M to T/n only if T/n <= max(l_i)? 

        However, note: if we set M = T/n, but there is a cat i with l_i = L (which is > T/n), then we require x_i >= L. Therefore, the total minimal sum would be at least L + ... which might be greater than T. So we cannot set M to T/n in that case.

        Therefore, the candidate M must satisfy:
            If M <= min(l_i): then S(M)=sum(l_i) -> we require T>=sum(l_i) (which is always true? because we have at least the minimal wealth: w_i>=l_i, so T>=sum(l_i)). So M can be min(l_i). But we are looking for the maximum M.

        So we are going to search M from min(l_i) to ... but note: M can be as large as T, but practically we know that if M > max(l_i) then we require n*M<=T -> M<=T/n. So the upper bound for M is min(max(l_i), T/n)? Actually, no: if M is above max(l_i), then we set every cat to M and we require n*M<=T. So the maximum M we can set in that case is floor(T/n). Therefore, the overall upper bound for M is:

            UB = min( max(l_i), floor(T/n) )? 

        But wait: if we set M above max(l_i), then we require n*M<=T. But also, we can set M above max(l_i) as long as n*M<=T. So the upper bound for M is floor(T/n) (if n*M<=T) and we are not constrained by max(l_i) because when M>max(l_i), then max(l_i, M)=M, so we don't have to worry about the l_i's.

        Actually, the function S(M) is:

            S(M) = 
                if M <= min(l_i): sum(l_i)   [but actually, if M is below min(l_i), then max(l_i, M)=l_i, so S(M)=sum(l_i). But if M is between min(l_i) and max(l_i), then S(M)= (sum of l_i for which l_i>=M) + M * (number of l_i < M)
                if M > max(l_i): n * M

        Therefore, the entire domain for M is from -infty to +infty? But we are only interested in M in [min(l_i), T/n] (because above T/n, n*M>T, so we cannot have that). Also, M must be at least min(l_i) because we cannot set the poorest below min(l_i) (but actually, we can set the poorest to min(l_i) and then we have S(min(l_i)) = sum(l_i) which is <= T). 

        Therefore, we can set the search space: 
            low = min(l_i)   [but note: we can set M to min(l_i) and it is always feasible? because T>=sum(l_i).]
            high = T         [but note: we know that M cannot exceed T, and actually we know that if M > T/n, then n*M > T (if M is integer and n>=1). So we can set high = T, but we can also set high = T // 1? Actually, we can set high = T (if n=1, then M=T). But T can be as large as 300,000 * 10^9 = 3e14, so we cannot iterate from min_l to T.

        Instead, we do binary search over M. The range: 
            low = min_l = min(l_i)
            high = max_M = T   [but note: we know that if M = T, then for n>=2 we have n*T > T (unless n=1, then we require T>=T). Actually, we can set high = T (if n=1, then we require M<=T, and M can be T). For n>=2, we know that M cannot exceed T. But we also know that M must be at most T (because the total is T, so the poorest cannot exceed T). 

        However, a better upper bound: since we have n cats, the poorest cannot exceed T/n. Actually, if we set M = T/n, then the total minimal requirement for M is at most n*M = T. But note: if there are cats with l_i > M, then we require more than T? So actually, we cannot set M to T/n if there is a cat with l_i > T/n? 

        But wait: the minimal total requirement for setting the poorest to M is S(M) = sum_i max(l_i, M). Therefore, we require S(M) <= T. The maximum M we can set is the maximum integer M such that S(M)<=T.

        We can binary search M in the range [min_l, T]? But T can be very large (up to 300,000 * 10^9 = 3e14) and we have total n over test cases 300,000, so we cannot iterate over the entire range.

        We note that the function S(M) is monotonic (non-decreasing) in M. Therefore, we can use binary search. The challenge: how to compute S(M) quickly?

        We can precompute the l_i sorted. Then:

            Let F(M) = S(M) = 
                For the cats with l_i < M: we set them to M -> so their contribution is M (each) -> total = M * count1
                For the cats with l_i >= M: we set them to l_i -> total = sum of l_i for those cats.

        We can do:

            Sort the array l, and also precompute the prefix sum for l.

            Then, if we have M, we can:
                Find the index where l_i < M and l_i >= M? Actually, we want to split the array: 
                    count1 = number of cats with l_i < M
                    count2 = n - count1
                Then the sum for the cats with l_i >= M is the sum of l_i for the last count2 cats? Actually, if we sort l, then the cats with l_i >= M are the ones from the first index that is >= M to the end? 

            Alternatively, we can do:

                Let sorted_l = sorted(l)
                Precompute prefix_sum: 
                    prefix[i] = sorted_l[0] + sorted_l[1] + ... + sorted_l[i-1]

            Then, we can find the first index pos such that sorted_l[pos] >= M. Then:
                count1 = pos   [the number of cats with l_i < M? actually, sorted_l[0..pos-1] are < M? but note: if sorted_l is sorted, then the first 'pos' elements are < M? Actually, if we have duplicates, we can use bisect_left: 
                    pos = bisect.bisect_left(sorted_l, M)   -> the first index at which we can insert M to keep sorted, meaning that all indices < pos are < M.

                Then:
                    S(M) = (prefix_sum of the first pos)   [but wait, that is the sum of the ones that are < M? actually no: we don't use the l_i for the ones that are < M? we use M for them. So we don't need the sum of the l_i for the ones < M?]

            Actually, for the cats with l_i < M: we set their wealth to M -> total = M * count1.
            For the cats with l_i >= M: we set their wealth to l_i -> total = (total_sum_l - prefix_sum[pos])? Actually, the prefix_sum we precomputed is for the entire sorted array? 

            Alternatively, we can precompute the total sum of l: total_l = sum(l_i)

            Then the sum for the cats with l_i>=M is: 
                total2 = total_l - (sum of the first pos)   [because the first pos are the ones < M, so the rest are >= M]?

            But note: the entire array is sorted, so the first pos elements are the ones < M, and the rest (n-pos) are >= M.

            Therefore: 
                S(M) = M * pos + (total_l - prefix_sum[pos])

            However, note: prefix_sum[pos] = sum of the first pos elements (which are the ones < M). Then the rest (from index pos to n-1) have sum = total_l - prefix_sum[pos].

            So: 
                S(M) = M * pos + (total_l - prefix_sum[pos])

            But wait: for the cats that are < M, we use M (not their l_i) and for the cats >= M, we use their l_i (which is >= M). 

        However, note: we might have M that is not in the array. That is okay.

        Steps for a fixed M:

            pos = bisect_left(sorted_l, M)   -> the index of the first element >= M, so the count of elements < M is pos.

            prefix_sum[pos] = precomputed prefix sum for the first pos elements? 

            Then S(M) = M * pos + (total_l - prefix_sum[pos])

        Then we check: S(M) <= T.

        Then we want the maximum M such that S(M) <= T.

        We can binary search M in the range [min_l, max_M] where min_l = min(l_i) and max_M = T? Actually, we know that M cannot exceed T (because if M=T, then S(M) = n*T (if M>=max(l_i)) and that must be <= T? -> n*T <= T -> n=1. So for n>=2, M cannot be T. 

        Alternatively, we can set high = T // 1? We know that if M > max(l_i), then S(M)=n*M. Then the condition is n*M<=T -> M<=T//n (using integer floor). Also, if M is above max(l_i), then we don't need to look beyond T//n. So we can set:

            low = min_l
            high = max( max(l_i), T//n )   -> but then we set high = T? 

        Actually, we can set high = T, but then the binary search will run in O(log T) which is about 50 iterations. Since T can be up to 3e14 (as the total wealth) then log2(3e14) is about 50, which is acceptable.

        Algorithm per test case:

            n = input()
            w = list of n integers
            l = list of n integers

            T = sum(w)
            total_l = sum(l)   [we know T>=total_l? yes, because each w_i>=l_i]

            min_l = min(l)
            max_l = max(l)

            Sort the list l, and precompute the prefix sums for the sorted l.

            We want to find the maximum integer M (in the range [min_l, T]) such that:
                S(M) = 
                    if M <= min_l: then S(M)=total_l   -> but we are starting from min_l, so we don't need to consider below min_l? 
                    Actually, for M in [min_l, ...], we use the formula: 
                         pos = number of elements in l that are < M = bisect_left(sorted_l, M)   [this gives the index of the first element >=M, so the count of < M is pos]
                         S(M) = M * pos + (total_l - prefix_sum[pos])

            But note: for M above max_l, we can also use the same formula? 
                For M > max_l: 
                    pos = n   [because all elements are < M? Actually, no: if M>max_l, then all l_i are < M? so pos = n? Then S(M)= M*n + (total_l - prefix_sum[n]) = M*n + (total_l - total_l) = M*n.

            So the formula holds.

            Then we do:

                low = min_l
                high = T   # because M cannot exceed T (and T is the total wealth, the poorest cannot have more than T)

            while low <= high:
                mid = (low+high)//2
                # Compute S(mid)
                pos = bisect.bisect_left(sorted_l, mid)   # number of elements < mid is pos? Actually, bisect_left returns the first index >= mid, so the count of elements strictly less than mid is pos.
                s_val = mid * pos + (total_l - prefix_sum[pos])

                if s_val <= T:
                    low = mid + 1
                else:
                    high = mid - 1

            Then the answer is high? Because we are looking for the maximum M such that S(M)<=T. When we break, high is the last one that satisfies.

            Why? 
                We are setting low = mid+1 when s_val<=T -> meaning we can try a larger M.
                Then when we exit, low > high, and high is the last one that satisfied.

        Example with sample: 
            Input: 
                5
                4 2 3 6 12
                3 2 3 3 10

            T = 4+2+3+6+12 = 27
            l = [3,2,3,3,10] -> sorted: [2,3,3,3,10] -> total_l = 2+3+3+3+10 = 21
            prefix_sum = [0, 2, 5, 8, 11, 21]   (for indices 0..5: prefix_sum[0]=0, prefix_sum[1]=2, prefix_sum[2]=2+3=5, ... prefix_sum[5]=21)

            We want to compute S(M) for different M.

            We know the answer is 4.

            Let M=4:
                Find pos: the first index in [2,3,3,3,10] such that element>=4 -> at index 3? (because the first 3 elements are 2,3,3,3 which are <4? Actually, 3<4 -> so the first element >=4 is 10 at index 4? 
                Actually, bisect_left returns the index of the first element >=4. The array: 
                    index0:2 <4 -> skip
                    index1:3 <4 -> skip
                    index2:3 <4 -> skip
                    index3:3 <4 -> skip
                    index4:10>=4 -> so pos=4.

                Then s_val = 4*4 + (21 - prefix_sum[4]) 
                    prefix_sum[4] = 2+3+3+3 = 11? 
                    s_val = 16 + (21-11) = 16+10 = 26 <=27 -> feasible.

            Now M=5:
                pos: first element>=5 -> the array has [2,3,3,3,10] -> first element>=5 is 10 at index4 -> pos=4 (because the count of elements <5 is 4? actually, the index returned is 4, so the count of elements strictly less than 5 is 4? 
                Then s_val = 5*4 + (21-11) = 20+10=30 >27 -> not feasible.

            Therefore, maximum M is 4.

        But wait: why M=4 is the poorest cat? 

            We require every cat to have at least max(l_i, 4). 
                Cat1: l1=3 -> must have at least 4? -> 4
                Cat2: l2=2 -> must have at least 4? -> 4
                Cat3: l3=3 -> must have at least 4? -> 4
                Cat4: l4=3 -> must have at least 4? -> 4
                Cat5: l5=10 -> must have at least 10? -> 10

            Total = 4+4+4+4+10 = 26, which is <=27. Then we have 1 unit left? we can assign it arbitrarily to any cat (so the poorest can be 4, and we have one extra unit that we can give to one cat to make it 5, but the poorest remains 4). Therefore, the poorest cat is 4.

        However, what if we try to set M=4? Then we have 26, and we have 1 extra. We can give that to cat5 to make it 11, but the poorest is still 4. Or we can give it to one of the first four to make it 5? then the poorest becomes 4 (because one cat becomes 5 and the others are 4). So the minimum remains 4.

        Therefore, the answer is 4.

        But note: we can actually set the poorest to 4.5? No, because we are in integers. So we must use integer M.

        Therefore, the algorithm for each test case:

            Step 1: Precompute T = sum(w), total_l = sum(l)
            Step 2: min_l = min(l), and sort the list l, and precompute the prefix sum for the sorted l.

            Step 3: Set low = min_l, high = T   (or we could set high = (T) // 1? but T is integer)

            Step 4: Binary search for the maximum M in [min_l, T] such that S(M) <= T.

            Step 5: Output high (which is the maximum M that satisfies the condition).

        Let's test with the second sample:

            Input: 
                8
                998 244 353 3109 4650 4305 6507 9699
                100 200 300 2040 4230 4236 5234 3233

            T = 998+244+353+3109+4650+4305+6507+9699 = let's compute: 
                998+244=1242, +353=1595, +3109=4704, +4650=9354, +4305=13659, +6507=20166, +9699=29865.

            l = [100,200,300,2040,4230,4236,5234,3233] -> sorted: 
                [100, 200, 300, 2040, 3233, 4230, 4236, 5234] 
            total_l = 100+200+300+2040+3233+4230+4236+5234 = let's compute:
                100+200=300, +300=600, +2040=2640, +3233=5873, +4230=10103, +4236=14339, +5234=19573.

            The answer is 3233.

            Let's compute S(3233):

                How many elements in l are < 3233? 
                    [100,200,300,2040] -> 4 cats
                Then the rest: 3233,4230,4236,5234 -> 4 cats.

                S(3233) = 3233 * 4 + (19573 - (100+200+300+2040)) 
                    = 12932 + (19573 - 2640) 
                    = 12932 + 16933 = 29865 <= 29865 -> feasible.

            Now M=3234:
                How many elements < 3234? 
                    The first 5 elements: [100,200,300,2040,3233] are all <3234? -> count = 5
                Then S(3234) = 3234 * 5 + (19573 - (100+200+300+2040+3233))
                    = 16170 + (19573 - 5873) 
                    = 16170 + 13700 = 29870 > 29865 -> not feasible.

            Therefore, the answer is 3233.

        But note: the problem states that the poorest cat must have at least l_i. However, in our formulation, we set every cat to at least max(l_i, M). Then the poorest cat will be M? 

            Why? Because we have set every cat to at least M (and also at least l_i). Then the poorest cat is at least M. But we are setting the minimal requirement to be M. However, we can assign the extra wealth arbitrarily. Therefore, we can make the poorest cat exactly M? 

            Actually, we have to meet the constraint: each cat i must be at least max(l_i, M). Then we can set:
                For the cats with l_i < M: set them to M (minimum) and then we can set the cats with l_i>=M to l_i (minimum). Then the poorest cat is min( M, min{l_i for cats with l_i>=M} )? 

            But note: we are setting the cats with l_i>=M to at least l_i (which is >=M) and the cats with l_i<M to M. Then the poorest cat is min(M, min{l_i for cats with l_i>=M})? 

            Actually, the poorest cat will be M? because we set the ones that were below M to M. And the ones that are above M are set to at least l_i (which is >=M) so the minimum wealth is M.

            Therefore, the poorest cat is M.

        So the answer is M.

        However, note: we have exactly S(M) = minimal total wealth required. Then if we have extra wealth (T - S(M) > 0), we can distribute that arbitrarily to the cats. But that extra wealth can be used to increase the wealth of some cats above M, but it does not help to increase the minimum (because we cannot set any cat below M). Therefore, the poorest cat remains M.

        Therefore, the algorithm is:

            Precomputation:
                total_wealth = sum(w)
                total_l = sum(l)
                sorted_l = sorted(l)
                prefix = [0]
                for i in range(n):
                    prefix.append(prefix[-1] + sorted_l[i])

            Then define function S(M):
                # Find the count of cats with l_i < M -> which is the index of the first element >= M
                pos = bisect.bisect_left(sorted_l, M)   # returns the first index in sorted_l that is >= M -> then the number of cats with l_i < M is pos.
                return M * pos + (total_l - prefix[pos])

            Then binary search:

                low = min_l = sorted_l[0]   # or min(l)
                high = total_wealth   # because the poorest cannot have more than total_wealth (if n=1)

                while low <= high:
                    mid = (low+high)//2
                    if S(mid) <= total_wealth:
                        low = mid + 1
                    else:
                        high = mid - 1

                Then output high.

        Note: the total_wealth is T.

        But note: the condition T>=total_l is always satisfied? yes, because w_i>=l_i, so T>=sum(l_i). Therefore, at M=min_l, S(min_l)=total_l<=T, so the binary search starts with a feasible point.

        Complexity: 
            Sorting l: O(n log n) per test case? But note: the total n over test cases is 300,000. So we can do one sort per test case? And we have C test cases, but the total n<=300,000. Therefore, the total work for sorting is O( (total n) * log (n))? and the total n is 300,000, so the total log(n) is about 19. Then the total sorting is about 300,000 * 19 ~ 5.7e6, which is acceptable.

            The binary search runs in O(log T) per test case, which is about 50 iterations per test case. And the total number of test cases C is at most 300,000? But note: the total n over test cases is 300,000, but the number of test cases C can be up to 300,000? However, the constraint says: "The sum of n over all test cases does not exceed 300000". Therefore, the total number of cats is 300,000. So we can have one test case with n=300,000, or 300,000 test cases each with n=1. 

            Therefore, we must be careful: if there are 300,000 test cases, each with n=1, then we do 300,000 binary searches? each with 50 iterations? then 15e6 iterations, which is acceptable.

            However, note: in each test case, we do:

                Read n, then read two lists of n integers.

                Then we do:
                    sort the list l (n elements) 
                    compute prefix sums (O(n))
                    then binary search (50 iterations)

            The total work: 
                Sorting: the total n over test cases is 300,000. So if we have many test cases, each with small n, then the total sorting time is O( (total n) * log (max n in test case) ). But worst-case, the largest test case n can be 300,000, but the total n is 300,000, so we have one test case with n=300,000. Then the total sorting is one sort of 300,000 elements -> O(300000 log(300000)) ~ 300000 * 19 = 5.7e6 comparisons.

            Therefore, we can do:

                for test_case in range(C):
                    n = int(input().strip())
                    w = list(map(int, input().split()))
                    l_list = list(map(int, input().split()))

                    T = sum(w)
                    total_l = sum(l_list)
                    sorted_l = sorted(l_list)
                    prefix = [0]
                    for i in range(len(sorted_l)):
                        prefix.append(prefix[-1] + sorted_l[i])

                    low = sorted_l[0]
                    high = T

                    while low <= high:
                        mid = (low+high)//2
                        pos = bisect.bisect_left(sorted_l, mid)
                        s_val = mid * pos + (total_l - prefix[pos])
                        if s_val <= T:
                            low = mid+1
                        else:
                            high = mid-1

                    print(high)

        However, note: if we have many test cases (like 300,000) but each with n=1, then we do 300,000 test cases, each with n=1. Then:

            Sorting: for n=1, sorting is O(1). 
            prefix: [0, l0] -> O(1)
            binary search: 50 iterations per test case -> 300,000*50 = 15e6 iterations, which is acceptable in Python? 

        But note: the problem constraints: time limit 1.0s? 

        In Python, 15e6 iterations might be borderline in Pyton (if each iteration is a few operations, it should be acceptable). But we have to read 300,000 test cases, each with n=1: 
            Input: 
                300000 lines: each test case: 
                    n=1
                    two lines: one integer for w, one integer for l.

            Then total input is 300000*3 lines? Actually, each test case: 
                first line: n (one integer)
                second line: n integers
                third line: n integers

            For n=1: we read 3 integers per test case? Then total integers: 3*300000 = 900,000 integers. That is acceptable.

        Alternatively, we can avoid the binary search for each test case by optimizing the search: note that the function S(M) is defined only at the points of the sorted_l? Actually, no: we can evaluate at any integer M. But the function is linear between the breakpoints (which are the distinct values in l). Therefore, we can iterate over the breakpoints? 

        However, the distinct values in l might be up to 300,000 per test case, and the total n is 300,000, so we cannot iterate over each distinct value per test case (because if we have one test case with n=300,000, we do 300,000 distinct values, which is acceptable? but then we have 300,000 evaluations per test case, and the total n is 300,000, so only one test case -> 300,000 evaluations). 

        But note: we have 300,000 distinct values? Then we can try:

            Instead of binary search over [min_l, T] (which is a big range) we can do a binary search over the candidate breakpoints? Actually, the function S(M) is piecewise linear and convex? Actually, it is linear in segments. The breakpoints are the distinct values in l and also we have the point at which M becomes larger than max(l) and then it becomes linear with slope n. 

        We can consider the candidate M in the set: 
            { min_l, min_l+1, ... }? -> too many.

        Alternatively, we can note that the maximum M must be at most T//n (if M>max_l) or in the range [min_l, max_l]? 

        Actually, we can consider candidate M in the set of distinct l_i and also the candidate T//n? But we must check the next integer after the candidate? 

        However, the problem asks for the maximum integer M. And the function S(M) is linear between the l_i. Therefore, the maximum M may occur between two breakpoints? 

        Actually, for a fixed segment [a, b] (where a and b are consecutive distinct values in l, and then beyond max_l), the function S(M) is linear. Then the condition S(M)<=T is linear and we can solve for the maximum M in the segment? 

        But note: we are in integers. 

        Steps without binary search over the entire [min_l, T]?

            We know the breakpoints: the distinct values of l, and then we have the segment beyond max_l.

            We can iterate over the segments? 

            Steps:

                Let candidate M be the distinct values in l (and also the boundaries: min_l, max_l, and then beyond max_l: the candidate M = floor((T - ...)/n) ?) -> complicated.

            Alternatively, we can iterate over the distinct values of l and also the candidate M = T//n (if T//n > max_l) and then check the next integer? 

            But note: the maximum M might be in a segment [a, b] and we can compute the maximum M in that segment by solving:

                In the segment [a, b): 
                    Let a = current breakpoint, and the next breakpoint is b (the next distinct value in l). Then for M in [a, b-1] (if we are in integers) the function S(M) is linear: 
                        S(M) = M * k + c, where k = (number of cats with l_i < M) = fixed in the segment? Actually, in [a, b) the set of cats with l_i < M is fixed: it is the set of cats with l_i < a? because a<=M<b, so any cat with l_i < a is included, and any cat with l_i>=a is not included? 

                Actually, no: in the segment [a, b), the set of cats with l_i < M is the set of cats with l_i < a? and the set with l_i>=M is the rest? But note: if we have a cat with l_i = a, then for M>=a, we require that cat to be at least max(l_i, M)=max(a, M)=M? Actually, no: if M is in [a, b) and a cat has l_i = a, then a<=M, so we set it to M? 

                Actually, the function S(M) in the segment [a, b) is:

                    Let k = the number of cats with l_i < M. But note: as M increases from a to b, the set of cats with l_i < M is fixed? Actually, no: when M is in [a, b), the cats with l_i = a are not less than M? because M>=a? So the set of cats with l_i < M is the set of cats with l_i < a? 

                But wait: a cat with l_i = a: 
                    if M>a, then l_i = a < M -> so it is included in the set that we set to M? 
                    if M=a, then l_i=a is not < a -> not included.

                Therefore, the breakpoints are at the distinct values of l. 

                How the function changes at a distinct value d?

                    When M < d: the cats with l_i=d are not included in the set that we set to M? (because they are >= M) -> so their contribution is d.
                    When M >= d: the cats with l_i=d are included in the set that we set to M? -> so their contribution becomes M.

                Therefore, at M=d, we include the cats with l_i=d in the set that we set to M.

                So the slope changes at every distinct value d: the slope becomes (previous_slope + count(d)) where count(d) is the frequency of d.

                Actually, the slope is the number of cats that are set to M. Initially, at M<min_l, the slope is 0. Then at M=min_l, we set the cats with l_i=min_l to M? Actually, no: at M=min_l, we don't set any cat to M that wasn't already set? 

                Actually, the function S(M) is:

                    S(M) = total_l + (M - min_l)*count(min_l) for M in [min_l, next_value) ? -> no.

                We can precompute the slope changes:

                    Let events: for each distinct value d in l, we know the frequency f = count(d). Then the slope of S(M) increases by f when M passes d.

                Then we can traverse the distinct values in increasing order? 

                Let D = sorted distinct values of l.

                Then for M in [d_i, d_{i+1}), the slope is s_i = (the number of cats with l_i <= d_i) -> actually, the number of cats that are set to M is the number of cats with l_i <= d_i? 

                Actually, the number of cats set to M is the number of cats with l_i <= M? But note: when M>=l_i, we set cat i to M. So the number of cats set to M at a given M is the number of cats with l_i <= M.

                Therefore, the slope at M is the cumulative frequency of l_i <= M.

                How to compute S(M) for M in [d_i, d_{i+1})? 

                    Let F(d_i) = the cumulative frequency (number of cats with l_i<=d_i) = f_1 + f_2 + ... + f_i (if d_i is the i-th distinct value).

                    Then S(M) = S(d_i) + (M - d_i) * F(d_i)   [because for M>=d_i, we set the F(d_i) cats to M? but note: the cats with l_i<=d_i are set to M? Actually, the cats with l_i<=d_i are set to M? 

                However, the cats with l_i>d_i? They are set to l_i, which is fixed. 

                Therefore, we can compute:

                    S(M) = [sum of l_i for cats with l_i>d_i] + M * F(d_i)

                But note: the sum of l_i for cats with l_i>d_i is total_l - (sum of l_i for cats with l_i<=d_i).

                Then S(M) = M * F(d_i) + total_l - (sum of l_i for cats with l_i<=d_i)

                Then we can iterate over the distinct values and then also the segment beyond max_l? 

                We want the maximum M such that S(M)<=T.

                We can iterate over the distinct values and then for each segment [d_i, d_{i+1}) we compute:

                    We have: 
                         S(M) = M * F_i + (total_l - prefix_sum_i)   [where F_i = F(d_i) = number of cats with l_i<=d_i, and prefix_sum_i = sum of l_i for cats with l_i<=d_i]

                    Then we solve for the maximum M in [d_i, d_{i+1}-1] (if d_{i+1} exists) such that:

                         M * F_i + (total_l - prefix_sum_i) <= T

                    => M <= (T - (total_l - prefix_sum_i)) / F_i

                    Then the maximum integer M in this segment is: 
                         candidate = min( d_{i+1}-1, floor( (T - (total_l - prefix_sum_i)) / F_i ) )

                    Then we update the answer = max(answer, candidate)

                Also, we have the segment [max_l, T]? 
                    Then the function becomes: S(M)=n*M
                    Then we require n*M<=T -> M<=T//n.
                    Then candidate = T//n   (if T//n>=max_l, then we take T//n; but note we are looking for the maximum M, so we take the maximum candidate over the segments).

                Then we take the maximum candidate over all segments.

            Steps:

                Precomputation: 
                    total_wealth = T
                    total_l = sum(l)
                    Count frequencies and distinct values? We can group by the sorted distinct l.

                Let distinct = sorted(set(l))
                Precompute for each distinct value d: 
                    count_d = frequency of d
                    cumulative_freq = 0
                    cumulative_sum = 0

                Then iterate over distinct in increasing order:

                    cumulative_freq += count_d
                    cumulative_sum += count_d * d

                    Then for the segment [d, next_d) (if next_d exists, then next_d = distinct[i+1], else we break) and also the segment beyond the last distinct value.

                    For the current segment [d, next_d) (if we are not at the last distinct) or [d, ...) for the last distinct:

                        F = cumulative_freq   [number of cats with l_i<=d] -> but note: when M>=d, we set all these cats to M? Actually, the set that we set to M is the cats with l_i<=d? But wait: when M is in [d, next_d), the cats with l_i<=d are set to M? Actually, no: the cats with l_i<=d are set to M? 

                        Actually, the set of cats set to M is the cats with l_i<=M. But in the segment [d, next_d), we have M>=d, so the cats with l_i<=d are included? And the cats with l_i in (d, next_d) are not included? Actually, no: if a cat has l_i = d' (where d' is between d and next_d) then when M>=d', we set it to M? But we are in the segment [d, next_d) and d' is in (d, next_d) so M<d'? -> no: if M is in [d, next_d) and d' is in (d, next_d) and M<d', then we don't set that cat to M? 

                This method is complicated because the function S(M) changes at every distinct value, and the slope at a segment [d, d') (where d' is the next distinct value) is the number of cats with l_i<=d? Actually, no: the slope is the number of cats with l_i<=M. And when M is in [d, d'), then the set of cats with l_i<=M is exactly the set of cats with l_i<=d? because the next distinct value is d' and M<d'. So no cat has l_i in (d, d')? Actually, we have distinct values, so there are no values between d and d'. 

                Therefore, for M in [d, d') (where d' is the next distinct value), the set of cats with l_i<=M is exactly the set of cats with l_i<=d.

                Then:

                    S(M) = M * F(d) + (total_l - cumulative_sum)   [where cumulative_sum is the sum of l_i for cats with l_i<=d]

                Then we can compute the maximum M in the segment [d, d'-1] (if d' exists) as:

                    M <= (T - (total_l - cumulative_sum)) / F(d)

                    candidate = min(d'-1, floor((T - (total_l - cumulative_sum)) / F(d) ) 

                Then update ans = max(ans, candidate)

                For the last segment [max_d, T] (max_d = max(l)):

                    F = n   [all cats]
                    S(M)= n*M
                    candidate = min( T, T//n )? Actually, we require n*M<=T -> M<=T//n? But we are in integers, so candidate = min( T, T//n )? Actually, M must be integer, so candidate = T//n? (because T//n is the floor). But note: we are taking the maximum M, so candidate = T//n? However, we must check if T//n >= max_d? Then we take candidate = T//n? 

                Then update ans = max(ans, candidate)

            Then output ans.

            But note: we are looking for the maximum M overall. 

        Example: first sample.

            distinct = sorted(set([3,2,3,3,10])) = [2,3,10]

            Step 1: d=2
                count=1, cumulative_freq=1, cumulative_sum=2.
                segment: [2,3) -> M in [2,3) -> but M integer: only M=2.
                S(2) = 2 * 1 + (21 - 2) = 2+19=21<=27 -> candidate=2.

            Step 2: d=3
                cumulative_freq = 1+3 = 4   [because 2,3,3,3]
                cumulative_sum = 2+3*3=2+9=11
                segment: [3,10) -> M in [3,10) -> integers 3 to 9.
                F=4
                S(M)= M*4 + (21-11) = 4M+10
                Condition: 4M+10<=27 -> 4M<=17 -> M<=4.25 -> so M=4 (floor(4.25)=4) and the upper bound of the segment is 9, so candidate = min(9,4)=4.

            Step 3: d=10
                cumulative_freq=4+1=5
                cumulative_sum=11+10=21
                segment: [10, ...) -> M>=10
                F=5
                S(M)=5*M
                Condition: 5M<=27 -> M<=5.4 -> candidate=5.

            Then the maximum candidate is max(2,4,5)=5? But the answer should be 4.

            Why 5? 
                But note: at M=5, S(5)=5*5=25<=27? -> feasible? 
                    Then we require:
                        Cats with l_i<5: set to 5 -> which cats? 
                            l=[2,3,3,3,10]: 
                                cats with l_i<5: the first 4 -> set to 5: 4*5=20
                                cat with l_i=10: set to 10? -> but wait, we set cats with l_i>=5 to l_i? -> so 10.
                        Total = 20+10=30>27 -> not feasible.

            Why did we get 5? 
                For the segment [10, ...): 
                    We computed: S(M)=5*M -> but actually, for M>=10, we set every cat to M? 
                        Then the minimal total is 5*M -> we set every cat to M? 
                    But note: we require each cat to have at least max(l_i, M). 
                        For a cat with l_i=10 and M=5: we require at least max(10,5)=10? 
                        So for M=5, we don't set the cat with l_i=10 to 5? 

                Actually, the formula for the segment [d, ...) for the last distinct d=10: 
                    We are in the segment [10, ...). Then M>=10. 
                    Then for every cat: 
                         max(l_i, M)=M (because M>=10 and 10 is the maximum l_i) 
                    So S(M)=n*M=5*M.

                But for M=5, we are not in the segment [10, ...). 

            Therefore, we must only consider the segment [d, ...) for M>=d. 

            How did we get candidate=5? 
                We computed for d=10: 
                    candidate = min(T, T//n) = min(27, 27//5)=5? 
                But then we set M=5? and 5 is in the segment [10, ...)? no, 5<10.

            So we should skip the segment [10, ...) for M=5? 

            The issue: the segment [d, ...) is only for M>=d. Therefore, for d=10, we only consider M>=10.

            Then for the segment [10, ...): 
                Condition: 5*M<=27 -> M<=5.4 -> the maximum integer M in this segment is 5? 
                But 5<10 -> so we skip? Actually, we require M>=10, so the smallest M in the segment is 10, and 5*10=50>27 -> no solution in the segment.

            Then the candidate for the last segment is not set? 

            Therefore, the candidate from the segment [3,10) is 4.

            Then the answer is 4.

        Steps for the distinct method:

            Precomputation: 
                T, total_l = as before.
                distinct = sorted(set(l))
                freq = frequency dictionary for l.

            cumulative_freq = 0
            cumulative_sum = 0
            ans = 0

            for i in range(len(distinct)):
                d = distinct[i]
                count_d = freq[d]
                cumulative_freq += count_d
                cumulative_sum += count_d * d

                # For the segment [d, next_d) 
                if i < len(distinct)-1:
                    next_d = distinct[i+1]
                else:
                    next_d = None   # meaning we are at the last distinct

                # The segment: 
                #   If next_d is not None: M in [d, next_d) -> integers d, d+1, ... next_d-1.
                #   Else: M in [d, T] (because M cannot exceed T) and we are in the last segment.

                # The formula: 
                #   S(M) = M * cumulative_freq + (total_l - cumulative_sum)

                # We want the maximum integer M in the segment such that S(M)<=T.

                # Solve: M * cumulative_freq <= T - (total_l - cumulative_sum)
                #   => M <= (T - total_l + cumulative_sum) / cumulative_freq

                # Let candidate = floor( (T - total_l + cumulative_sum) / cumulative_freq )

                if next_d is not None:
                    # M must be at most next_d-1
                    candidate = min(next_d-1, (T - total_l + cumulative_sum) // cumulative_freq)
                else:
                    # M must be at most T (and also M must be at least d, but the formula gives at least d? because (T-total_l+cumulative_sum) is nonnegative? 
                    # But note: T>=total_l? yes, so T-total_l>=0, then cumulative_sum>=0 -> so the value is nonnegative.
                    candidate = min(T, (T - total_l + cumulative_sum) // cumulative_freq)

                # But note: M must be at least d. The candidate computed might be less than d? 
                #   Because (T-total_l+cumulative_sum) might be negative? but T>=total_l, and cumulative_sum is positive, so nonnegative.
                #   Then candidate>=0? but we require candidate>=d? 
                #   Actually, we are in the segment [d, ...). So if candidate < d, then we skip? but the condition might hold for M=d? 

                # How to handle: 
                #   We require M>=d. Then if candidate < d, then the maximum M in the segment that satisfies is d-1? but we are not in the segment? 

                # Actually, we are iterating the segments in increasing order. The candidate for the segment must be at least d? 

                # But note: (T-total_l+cumulative_sum) / cumulative_freq might be less than d? Then we cannot choose any M in the segment? Then we skip? 

                # Then we update ans = max(ans, candidate) only if candidate>=d? 

                # However, if candidate < d, then there is no solution in the segment? but note: the condition at M=d: 
                #   S(d) = d * cumulative_freq + (total_l - cumulative_sum) 
                #   = cumulative_freq*d + total_l - cumulative_sum
                #   But cumulative_sum = cumulative_freq*d? no: cumulative_sum is the sum of l_i for the cats we've seen (which are <=d). And we are including the cats with l_i=d in cumulative_freq and cumulative_sum.

                # Actually, cumulative_sum = cumulative_freq * d? only if all the cats we've seen have l_i=d? 

                # For example, d=3: 
                #   cumulative_freq=4, cumulative_sum=2+3+3+3=11, and 4*3=12 !=11.

                # Therefore, S(d)= d * cumulative_freq + (total_l - cumulative_sum) 
                #   = 3*4 + (21-11)=12+10=22<=27 -> feasible. 

                # But if we compute candidate = (27-21+11)//4 = (17)//4=4 -> which is >=d (3) -> then we take candidate=4.

                # So if candidate < d, then the condition fails at M=d? 

                # Actually, the condition at M=d: 
                #   S(d)= d * cumulative_freq + (total_l - cumulative_sum) 
                #   = cumulative_freq*d + total_l - cumulative_sum
                #   = total_l + cumulative_freq*d - cumulative_sum

                # How do we know if this is <=T? 

                # But we are computing candidate = (T - total_l + cumulative_sum) // cumulative_freq -> then we require candidate>=d to have a solution in the segment? 

                # Actually, the formula for M in the segment: 
                #   M <= (T - total_l + cumulative_sum) / cumulative_freq

                # Then if (T - total_l + cumulative_sum) / cumulative_freq < d, then for all M>=d, the condition fails? 

                # Then we skip the segment.

                # But we still have the solution from previous segments? 

                # Therefore, we only update if candidate>=d.

                if candidate >= d:
                    ans = max(ans, candidate)

            Then also we have the segment beyond the last distinct? Actually, we did the last distinct in the loop? 

            However, we did the segment for the last distinct value? 

            But note: the segment beyond the last distinct value (max_l) is not covered? 

            Actually, in the last iteration, we set next_d=None, and then we set candidate = min(T, (T - total_l + cumulative_sum) // cumulative_freq). But then we update if candidate>=d (the last distinct value). 

            For the last segment, cumulative_freq = n, and cumulative_sum = total_l? 
                Then candidate = min(T, (T - total_l + total_l) // n) = min(T, T//n) = T//n.

            Then we update if T//n >= max_l? 

            Example: second sample: 
                distinct = [100,200,300,2040,3233,4230,4236,5234] -> last distinct=5234.
                cumulative_freq = 8
                cumulative_sum = total_l = 19573
                Then candidate = min(29865, (29865-19573+19573)//8) = min(29865, 29865//8)=29865//8=3733.125 -> floor=3733.
                But 3733 < 5234? -> so we do not update.

            Then we rely on the previous segments.

            How about the segment for d=3233? 
                d=3233: 
                    cumulative_freq = 5? (because 100,200,300,2040,3233) -> 5 cats
                    cumulative_sum = 100+200+300+2040+3233 = 5873? 
                    Then next_d=4230 -> segment [3233,4230): M in [3233,4230)
                    candidate = min(4229, (29865 - 19573 + 5873) // 5) 
                            = min(4229, (29865 - 19573 + 5873) = 29865 - 19573 = 10292? -> 10292+5873=16165? then 16165//5=3233) 
                    candidate = min(4229, 3233) = 3233.
                Then update ans = max(0,3233)=3233.

            Then the segment for d=4230: 
                cumulative_freq=6, cumulative_sum=5873+4230=10103
                candidate = min(4235? -> next_d=4236-1=4235, (29865-19573+10103)//6) = (29865 -19573 = 10292 +10103=20395) //6 = 20395//6=3399.166->3399)
                candidate= min(4235,3399)=3399 -> and 3399>=4230? -> no, so skip.

            Then the last segment: d=5234: candidate = 29865//8=3733, which is <5234 -> skip.

            Therefore, the answer is 3233.

        Therefore, we can do:

            ans = 0
            cumulative_freq = 0
            cumulative_sum = 0
            distinct = sorted(set(l))
            # Precompute frequency for each distinct value? 
            from collections import Counter
            freq = Counter(l)

            for i, d in enumerate(distinct):
                count_d = freq[d]
                cumulative_freq += count_d
                cumulative_sum += count_d * d

                # The constant term: total_l - cumulative_sum
                # The coefficient: cumulative_freq

                # Compute the upper bound for M in the segment starting at d
                #   We have: M * cumulative_freq + (total_l - cumulative_sum) <= T
                #   => M <= (T - (total_l - cumulative_sum)) / cumulative_freq
                #   => M <= (T - total_l + cumulative_sum) / cumulative_freq

                # Compute candidate = floor( (T - total_l + cumulative_sum) / cumulative_freq )
                numerator = T - total_l + cumulative_sum
                # Since we are in integers, use integer floor division? 
                # But note: if numerator is negative? but T>=total_l and cumulative_sum>=0, so numerator>=0.

                candidate = numerator // cumulative_freq
                # But if numerator is negative? we skip? but we know numerator>=0.

                # Now, the segment: 
                if i < len(distinct)-1:
                    next_d = distinct[i+1]
                    candidate = min(candidate, next_d-1)
                else:
                    candidate = min(candidate, T)

                # Only consider candidate if it is at least d (so that it falls in the segment [d, ...))
                if candidate < d:
                    # This segment yields no candidate? 
                    continue

                if candidate > ans:
                    ans = candidate

            Then output ans.

        However, note: the segment [d, next_d) might yield candidate that is less than d? then we skip.

        But what if we don't have any segment that yields a candidate? 
            The minimal M is min_l, and we start from the first distinct (min_l) and the condition at min_l: 
                cumulative_freq = count(min_l)
                cumulative_sum = count(min_l)*min_l
                numerator = T - total_l + cumulative_sum
                candidate = numerator // count(min_l)

            Then we require candidate>=min_l? 

            Example: 
                n=1, w=[10], l=[5]
                T=10, total_l=5.
                distinct=[5]
                cumulative_freq=1, cumulative_sum=5.
                numerator = 10-5+5=10
                candidate = 10//1=10 -> min(10, T=10)=10 -> and 10>=5 -> update ans=10.

            Then the poorest cat can be 10? yes.

        Therefore, the distinct method works.

        But note: the total n over test cases is 300,000. The distinct values per test case: worst-case, each cat has a distinct l_i -> then the distinct list has n elements. Then the loop runs n times per test case. And the total n over test cases is 300,000, so the total distinct values is 300,000. Then the total work is 300,000.

        This is better than the binary search over a big range? 

        However, the binary search over the big range only does 50 iterations per test case. And the total number of test cases is the number of test cases (which is the total n over test cases? no: the total n over test cases is 300,000, but the number of test cases C can be 300,000? Then the distinct method: for each test case, we iterate over the distinct values in l. For a test case with n=1, distinct values=1 -> then total distinct values over test cases is 300,000. So the total work is 300,000.

        The binary search: 50 * (number of test cases). The number of test cases is the total n over test cases? no: the total n over test cases is 300,000, but the number of test cases is the number of test cases C. The constraint: "The sum of n over all test cases does not exceed 300000". So the total n is 300,000. Then the maximum number of test cases is 300,000 (each with n=1). Then the binary search method: 300,000 * 50 = 15,000,000 iterations, which is acceptable.

        Therefore, we can do either. 

        However, the distinct method is O(n) per test case (where n is the number of distinct values in l) and the total distinct values over test cases is 300,000, so it is O(300,000). 

        The binary search method is O(50 * C) and C is at most 300,000, so 15,000,000.

        Both are acceptable? 

        But note: the distinct method requires grouping the l_i by distinct values and then iterating over distinct values. The grouping can be done with a Counter and then sorting the distinct values. The total work per test case: O(n) for the Counter and O(u log u) for sorting the distinct values (where u is the number of distinct values). The total u over test cases is 300,000? 

        Actually, the total distinct values over test cases might be 300,000 (if each test case has distinct values, and the total n=300,000, then the total distinct values is 300,000). Then the total sorting time: the distinct values per test case: if one test case has 300,000 distinct values, then sort one test case: O(300000 log 300000) ~ 300000*19 = 5.7e6, which is acceptable. But if we have 300,000 test cases, each with 1 distinct value, then the total distinct values is 300,000, and we do 300,000 sorts of 1 element -> O(300000) which is acceptable.

        Therefore, both methods are acceptable. 

        We choose the distinct method for clarity? 

        However, note: the distinct method must be implemented carefully. 

        Alternatively, we can do:

            Precompute the sorted list l_sorted, and then we know the distinct values are l_sorted, but we need to group by frequency? 

            Actually, we can traverse the sorted list and group:

                distinct = []
                freq = []
                current = None
                count = 0
                for x in sorted_l:
                    if x==current:
                        count += 1
                    else:
                        if current is not None:
                            distinct.append(current)
                            freq.append(count)
                        current = x
                        count = 1
                distinct.append(current)
                freq.append(count)

            Then we iterate over distinct.

        But we can also use:

            from collections import Counter
            cnt = Counter(l)
            distinct = sorted(cnt.keys())

            Then for d in distinct:
                count_d = cnt[d]

        This is O(n).

        Let's implement the distinct method.

        However, note: the problem has a time limit of 1.0s. The distinct method for one test case with n=300,000: 
            Sorting the list l: O(n log n) = 300000 * 19 = 5.7e6 comparisons.
            Then grouping: O(n) -> or using Counter: O(n) and then sorting the distinct: O(u log u) where u=300,000 -> 300000*19=5.7e6? 

            Actually, the distinct values are 300,000, so sorting distinct is O(300000 log 300000) which is about 5.7e6 comparisons.

            Then we iterate over distinct: 300,000 iterations.

            Total per test case: 5.7e6 (for sorting the entire list) + 5.7e6 (for sorting distinct? but distinct is the same as the list l? no: distinct is the set of l, and we sort that set) -> but the set has u=300,000 elements.

            But we already have the entire list sorted? Then we can get distinct by traversing the sorted list? 

            Actually, we can do:

                sorted_l = sorted(l)
                distinct = []
                freq = []
                i = 0
                while i < len(sorted_l):
                    j = i
                    while j < len(sorted_l) and sorted_l[j]==sorted_l[i]:
                        j += 1
                    distinct.append(sorted_l[i])
                    freq.append(j-i)
                    i = j

            Then we have distinct and freq.

            This is O(n).

        Therefore, we do:

            for test_case in range(C):
                n = int(input())
                w = list of n integers
                l_list = list of n integers

                T = sum(w)
                total_l = sum(l_list)
                sorted_l = sorted(l_list)
                # Group by distinct values
                distinct = []
                freq = []
                i = 0
                n_val = len(sorted_l)
                while i < n_val:
                    j = i
                    while j < n_val and sorted_l[j]==sorted_l[i]:
                        j += 1
                    distinct.append(sorted_l[i])
                    freq.append(j-i)
                    i = j

                cumulative_freq = 0
                cumulative_sum = 0
                ans = 0
                for idx in range(len(distinct)):
                    d = distinct[idx]
                    count_d = freq[idx]
                    cumulative_freq += count_d
                    cumulative_sum += count_d * d

                    # Compute the numerator: T - total_l + cumulative_sum
                    numerator = T - total_l + cumulative_sum
                    # candidate from the equation: floor(numerator / cumulative_freq)
                    # But note: if cumulative_freq==0? skip, but cumulative_freq>=1.
                    candidate_val = numerator // cumulative_freq   # integer floor

                    # The segment: 
                    if idx < len(distinct)-1:
                        next_d = distinct[idx+1]
                        # The segment is [d, next_d) -> integers from d to next_d-1.
                        candidate_seg = min(next_d-1, candidate_val)
                    else:
                        candidate_seg = min(T, candidate_val)

                    # Check if candidate_seg is at least d (so that it falls in the segment [d, ...))
                    if candidate_seg < d:
                        # Skip this segment: no candidate in this segment.
                        # But note: it might be that the condition fails for the entire segment? 
                        continue

                    # Update the answer
                    if candidate_seg > ans:
                        ans = candidate_seg

                print(ans)

        Let me test with the sample: n=1, w=[10], l=[5]

            T=10, total_l=5.
            sorted_l=[5]
            distinct=[5], freq=[1]
            cumulative_freq=1, cumulative_sum=5.
            numerator=10-5+5=10
            candidate_val=10//1=10
            idx=0: last distinct? -> candidate_seg = min(10,10)=10 -> 10>=5 -> ans=10.

        Sample 1: 
            n=5, w=[4,2,3,6,12], l=[3,2,3,3,10] -> sorted_l=[2,3,3,3,10]
            distinct=[2,3,10], freq=[1,3,1]

            Step1: d=2, count_d=1
                cum_freq=1, cum_sum=2
                numerator = 27 - 21 + 2 = 8
                candidate_val = 8//1=8
                next_d=3 -> candidate_seg = min(3-1=2, 8)=2
                2>=2 -> ans = max(0,2)=2

            Step2: d=3, count_d=3
                cum_freq=4, cum_sum=2+9=11
                numerator=27-21+11=17
                candidate_val=17//4=4   (since 17//4=4.25 -> floor=4)
                next_d=10 -> candidate_seg = min(10-1=9,4)=4
                4>=3 -> ans = max(2,4)=4

            Step3: d=10, count_d=1
                cum_freq=5, cum_sum=21
                numerator=27-21+21=27
                candidate_val=27//5=5
                candidate_seg=min(27,5)=5
                5<10? -> skip.

            Then output 4.

        But note: the segment for d=10: we skip because 5<10? 

        However, we must consider: what if we set M=10? 
            Then S(10)=5*10=50>27 -> not feasible.

        Therefore, the answer is 4.

        The distinct method is efficient.

        However, note: the division is integer floor division. But we have:

            candidate_val = (T - total_l + cumulative_sum) // cumulative_freq

            This is integer floor, which is correct? 

            We require M * cumulative_freq <= numerator? 
                Then the maximum integer M is floor(numerator / cumulative_freq).

        Therefore, the distinct method is correct.

        We choose the distinct method.

        But note: the problem constraints, the total n over test cases is 300,000. The distinct values per test case: worst-case 300,000 (one test case) -> then we do one iteration over 300,000 distinct values. 

        Code:

            import sys

            data = sys.stdin.read().split()
            t = int(data[0])
            index = 1
            out_lines = []
            for _ in range(t):
                n = int(data[index]); index += 1
                w = list(map(int, data[index:index+n])); index += n
                l_list = list(map(int, data[index:index+n])); index += n

                T = sum(w)
                total_l = sum(l_list)
                # Sort l_list
                l_list.sort()
                distinct = []
                freq = []
                i = 0
                while i < n:
                    j = i
                    while j < n and l_list[j]==l_list[i]:
                        j += 1
                    distinct.append(l_list[i])
                    freq.append(j-i)
                    i = j

                cum_freq = 0
                cum_sum = 0
                best = 0
                num_distinct = len(distinct)
                for idx in range(num_distinct):
                    d = distinct[idx]
                    count_d = freq[idx]
                    cum_freq += count_d
                    cum_sum += count_d * d
                    numerator = T - total_l + cum_sum
                    # If cum_freq is 0 skip, but we have count_d>=1 so cum_freq>=1.
                    # candidate_val = floor(numerator / cum_freq)
                    candidate_val = numerator // cum_freq   # integer floor division

                    if idx < num_distinct-1:
                        next_d = distinct[idx+1]
                        candidate_seg = min(next_d-1, candidate_val)
                    else:
                        candidate_seg = min(T, candidate_val)

                    if candidate_seg >= d:
                        if candidate_seg > best:
                            best = candidate_seg

                out_lines.append(str(best))

            print("\n".join(out_lines))

        But note: the problem sample 2: 
            8 cats, answer=3233.

        We already checked the segment for d=3233 yields 3233.

        However, note: we start with best=0. Then we update to 3233.

        But what if there is a segment that yields a candidate greater than 3233? 
            We have the segment for d=4230: 
                cum_freq=6 (after 5 cats and then 4230: so 100,200,300,2040,3233,4230 -> 6)
                cum_sum=100+200+300+2040+3233+4230 = 10103? 
                numerator = 29865 - 19573 + 10103 = 29865 - 19573 = 10292 + 10103 = 20395
                candidate_val = 20395 // 6 = 3399 (since 3399*6=20394, 3400*6=20400>20395)
                next_d=4236 -> candidate_seg = min(4236-1, 3399)=3399
                Then 3399>=4230? -> no, skip.

            Then the segment for 4230 is skipped.

        Therefore, the distinct method is implemented.

        We'll run the sample 2: 

            distinct = [100,200,300,2040,3233,4230,4236,5234] 
            freq = [1,1,1,1,1,1,1,1]   (each distinct appears once)

            Step1: d=100: 
                cum_freq=1, cum_sum=100
                numerator = 29865 - 19573 + 100 = 29865-19573=10292+100=10392
                candidate_val=10392 // 1 = 10392
                next_d=200 -> candidate_seg = min(199,10392)=199
                best = max(0,199)=199   [and 199>=100 -> update]

            Step2: d=200:
                cum_freq=2, cum_sum=300
                numerator = 29865-19573+300=10292+300=10592
                candidate_val=10592//2=5296
                next_d=300 -> candidate_seg = min(299,5296)=299
                best = max(199,299)=299

            Step3: d=300:
                cum_freq=3, cum_sum=600
                numerator=10292+600=10892
                candidate_val=10892//3=3630
                next_d=2040 -> candidate_seg = min(2039,3630)=2039
                best = max(299,2039)=2039

            Step4: d=2040:
                cum_freq=4, cum_sum=600+2040=2640
                numerator=10292+2640=12932
                candidate_val=12932//4=3233
                next_d=3233 -> candidate_seg = min(3233-1=3232,3233)=3232
                best = max(2039,3232)=3232

            Step5: d=3233:
                cum_freq=5, cum_sum=2640+3233=5873
                numerator=10292+5873=16165
                candidate_val=16165//5=3233
                next_d=4230 -> candidate_seg = min(4230-1,3233)=4230-1=4229,3233 -> 3233
                best = max(3232,3233)=3233

            Then the rest are skipped.

            Output: 3233.

        But note: the sample output is 3233.

        However, in step4: we got 3232? but then step5: we got 3233.

        Why in step4: d=2040, we got candidate_seg=3232? 
            But 3232 is in the segment [2040,3233)? and 3232>=2040 -> update to 3232.

        Then step5: we get 3233 -> update to 3233.

        So it is correct.

        However, note: the segment for d=3233: we have candidate_val=3233, and next_d=4230, so candidate_seg=min(4229,3233)=3233, and 3233>=3233 -> update.

        Therefore, the answer is 3233.

        We'll run sample1 in the distinct method as above: we got 4.

        Therefore, we output the code.

        But note: the problem sample1: 
            distinct = [2,3,10] with frequencies [1,3,1]

            Step1: d=2: 
                cum_freq=1, cum_sum=2
                numerator=27-21+2=8
                candidate_val=8
                candidate_seg=min(3-1,8)=2 -> update best=2.

            Step2: d=3:
                cum_freq=4, cum_sum=2+3*3=11
                numerator=27-21+11=17
                candidate_val=17//4=4   (since 17//4=4.25 -> floor=4)
                candidate_seg=min(10-1,4)=4 -> and 4>=3 -> update best=4.

            Step3: d=10:
                cum_freq=5, cum_sum=21
                numerator=27-21+21=27
                candidate_val=27//5=5
                candidate_seg=min(27,5)=5 -> but 5<10 -> skip.

            Then output 4.

        It is correct.

        One more: n=1, l=[5], w=[5] -> 
            T=5, total_l=5.
            distinct=[5], freq=[1]
            numerator=5-5+5=5
            candidate_val=5//1=5
            candidate_seg=min(5,5)=5 -> and 5>=5 -> best=5.

        But what if w=[4]? 
            T=4, total_l=5? -> but wait, the input constraint: l_i<=w_i. So l_i=5 and w_i=4 is not possible.

        Therefore, we assume l_i<=w_i.

        We output the distinct method.

        However, note: the problem says the total n over test cases is 300,000. Our distinct method iterates over the distinct values in l per test case. The total distinct values over all test cases is at most 300,000. Therefore, the total work is 300,000.

        We write the code accordingly.

        But note: the problem constraints: w_i and l_i up to 10^9, and n up to 300,000 per test case, but the total n<=300,000.

        We are using sorting: O(n log n) per test case? The total n over test cases is 300,000, so the total sorting time is O( (sum n) * log (max n in test case) ). The worst-case test case: n=300,000 -> O(300000 log 300000) which is acceptable.

        Therefore, we output the distinct method.

        Code:

            import sys

            def main():
                data = sys.stdin.read().split()
                if not data:
                    return
                t = int(data[0])
                index = 1
                results = []
                for _ in range(t):
                    n = int(data[index]); index += 1
                    w = list(map(int, data[index:index+n]))
                    index += n
                    l_list = list(map(int, data[index:index+n]))
                    index += n

                    total_wealth = sum(w)
                    total_l = sum(l_list)

                    # Sort l_list and group distinct values
                    l_list.sort()
                    distinct = []
                    freqs = []
                    i = 0
                    n_val = len(l_list)
                    while i < n_val:
                        j = i
                        while j < n_val and l_list[j] == l_list[i]:
                            j += 1
                        distinct.append(l_list[i])
                        freqs.append(j - i)
                        i = j

                    cum_freq = 0
                    cum_sum = 0
                    best = 0  # we will update with the maximum M found

                    # Iterate over distinct values
                    num_distinct = len(distinct)
                    for idx in range(num_distinct):
                        d = distinct[idx]
                        count_d = freqs[idx]
                        cum_freq += count_d
                        cum_sum += count_d * d

                        # Compute numerator = total_wealth - total_l + cum_sum
                        numr = total_wealth - total_l + cum_sum
                        # Candidate value from the equation: M = floor(numr / cum_freq)
                        candidate_val = numr // cum_freq   # integer division

                        # Determine the upper bound of the segment
                        if idx < num_distinct - 1:
                            next_d = distinct[idx+1]
                            candidate_seg = min(next_d - 1, candidate_val)
                        else:
                            candidate_seg = min(total_wealth, candidate_val)   # M cannot exceed total_wealth

                        # Check if candidate_seg is at least the current d (to be in the segment [d, ...))
                        if candidate_seg >= d:
                            if candidate_seg > best:
                                best = candidate_seg

                    results.append(str(best))

                print("\n".join(results))

            if __name__ == '__main__':
                main()

        We'll run the provided examples.

        However, note: the problem sample input has:

            Sample Input #1:
                2
                5
                4 2 3 6 12
                3 2 3 3 10
                8
                998 244 353 3109 4650 4305 6507 9699
                100 200 300 2040 4230 4236 5234 3233

            Our program should output:
                4
                3233

        We tested above and it works.

        But we note: the distinct method for the first test case: 
            distinct = [2,3,10] -> we get best=4.

        For the second: distinct = sorted([100,200,300,2040,4230,4236,5234,3233]) -> 
            Actually, we sort the l_list: 
                l_list = [100,200,300,2040,4230,4236,5234,3233] -> sorted: [100,200,300,2040,3233,4230,4236,5234]

            Then distinct = [100,200,300,2040,3233,4230,4236,5234] and frequencies all 1.

            Then we get best=3233.

        Therefore, we output the distinct method.

        We'll submit.

        However, note: the problem says the total n over test cases <= 300,000, so we are safe.

        Let me test with a small case: n=2, w=[5,5], l=[1,1] -> 
            T=10, total_l=2.
            distinct=[1] (with frequency=2)
            Step1: d=1, cum_freq=2, cum_sum=2
            numerator=10-2+2=10
            candidate_val=10//2=5
            candidate_seg = min( (if next_d exists? no) so min(10,5)=5 -> 5>=1 -> update best=5.

            Answer=5.

            Explanation: we can set both cats to 5: 
                Initially: [5,5] -> we don't need to do anything. 
                Then the poorest cat has 5.

        Another: n=2, w=[3,3], l=[1,1] -> 
            T=6, total_l=2.
            distinct=[1] (freq=2)
            numerator=6-2+2=6, candidate_val=6//2=3 -> candidate_seg=min(6,3)=3 -> update best=3.

        Another: n=2, w=[3,1], l=[1,1] -> 
            T=4, total_l=2.
            distinct=[1] (freq=2)
            numerator=4-2+2=4, candidate_val=4//2=2 -> best=2.

            How: 
                Initially: [3,1] -> we can take 1 from cat0 to cat1: [2,2] -> poorest is 2.

        One more: n=3, w=[10,10,10], l=[1,2,3] -> 
            T=30, total_l=6.
            distinct=[1,2,3] (freq=[1,1,1])
            Step1: d=1: 
                cum_freq=1, cum_sum=1
                numerator=30-6+1=25
                candidate_val=25 -> candidate_seg = min(2-1,25)=1 -> update best=1.
            Step2: d=2:
                cum_freq=2, cum_sum=1+2=3
                numerator=30-6+3=27
                candidate_val=27//2=13
                candidate_seg = min(3-1,13)=2 -> update best=2.
            Step3: d=3:
                cum_freq=3, cum_sum=1+2+3=6
                numerator=30-6+6=30
                candidate_val=30//3=10
                candidate_seg=min(30,10)=10 -> 10>=3 -> update best=10.

            Then the answer=10.

            How: 
                We require:
                    cat0: at least max(1,10)=10
                    cat1: at least max(2,10)=10
                    cat2: at least max(3,10)=10
                Total minimal = 30, and we have 30. So we set each cat to 10. 
                The poorest cat is 10.

            But initially we have [10,10,10] -> no transfer needed.

        Therefore, the distinct method is correct.

        We write the code as described.