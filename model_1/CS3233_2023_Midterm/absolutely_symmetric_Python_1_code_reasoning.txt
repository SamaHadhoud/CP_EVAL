 We are following the editorial exactly.
 Steps:
 1. Check for every pair (i, j) with i < j: (A[i][j] + A[j][i]) must be even. If not, output -1.
 2. Check if the entire matrix A is absolutely symmetric (i.e., |A[i][j]| = |A[j][i]| for all i, j). If yes, then output 1 and the matrix A.
 3. Otherwise, output 2 and then output two matrices:
    - Matrix X1: diagonal entries are 0, off-diagonal (i,j) = (A[i][j] - A[j][i]) // 2.
    - Matrix X2: diagonal entries are the same as A, off-diagonal (i,j) = (A[i][j] + A[j][i]) // 2.

 Note: The condition for existence (even sum for every off-diagonal pair) ensures that the differences and sums are integers.

 However, note: the problem says that the decomposition matrices must consist of integers and be absolutely symmetric.

 Why is X1 absolutely symmetric?
   For i != j: 
        X1[i][j] = (A[i][j] - A[j][i]) // 2
        X1[j][i] = (A[j][i] - A[i][j]) // 2 = - (A[i][j] - A[j][i]) // 2
   Therefore, |X1[i][j]| = |X1[j][i]|.

 Why is X2 absolutely symmetric?
   For i != j:
        X2[i][j] = (A[i][j] + A[j][i]) // 2
        X2[j][i] = (A[j][i] + A[i][j]) // 2 = same as above.
   Therefore, X2[i][j] = X2[j][i], so |X2[i][j]| = |X2[j][i]|.

 Also, note: the diagonal of X1 is 0 and of X2 is A[i][i], so when we add:
   For diagonal: 0 + A[i][i] = A[i][i]
   For off-diagonal: 
        (A[i][j]-A[j][i])//2 + (A[i][j]+A[j][i])//2 = (2*A[i][j])//2 = A[i][j]

 Therefore, the decomposition is valid.

 But note: the problem states that the entries of the decomposition matrices must be integers and within [-10^18, 10^18]. 
 The operations (addition and subtraction) and division by 2 are integer and the even condition ensures no fractional part.

 However, we must consider the diagonal: the diagonal of A is not altered in the decomposition. The off-diagonals are computed as integers.

 Important: The problem constraints say that the input integers can be as large as 10^9. The computed values in the matrices will be at most around 10^9 (or 10^9 + 10^9 = 2e9, then divided by 2 -> 1e9) so they are within the bounds.

 But note: the problem says the output entries must be between -10^18 and 10^18, inclusive. Our computed values are well within that.

 However, what about the absolute symmetry condition for the entire matrix? We have broken the matrix into two parts that are absolutely symmetric.

 Implementation:

   Step 1: Read n and the matrix A.

   Step 2: Check for every off-diagonal pair (i, j) with i < j: (A[i][j] + A[j][i]) % 2 == 0. If not, print -1 and return.

   Step 3: Check if for every i, j: |A[i][j]| == |A[j][i]|. If yes, then output k=1 and the matrix A.

   Step 4: Otherwise, output k=2, then output matrix X1 (with diagonals 0 and off-diagonals as described) and then matrix X2.

 But note: the problem says if k<=50 then output the k matrices. Since k is either 1 or 2 (and 2<=50) we always output the matrices when k>0.

 However, note: what if the matrix is absolutely symmetric? Then we output k=1 and the matrix. Otherwise, k=2 and the two matrices.

 However, consider: what if the matrix is absolutely symmetric? Then we skip step 4 and go to step 3.

 But note: the condition in step 3 is sufficient for the entire matrix to be decomposed as one matrix.

 However, there is a catch: the absolutely symmetric condition in the problem is defined as |T_{i,j}| = |T_{j,i}| for every i, j. 
 This does not require T_{i,j} = T_{j,i} (symmetric) nor T_{i,j} = -T_{j,i} (anti-symmetric). For example, the matrix [[1, 2], [3, 4]] is not symmetric, but if we look at absolute values: 
     |1| = |2|? -> 1 vs 2 -> no, but for (0,1): |1| vs |2|? -> no, actually it fails.

 Actually, the condition must hold for every pair. For the entire matrix A to be absolutely symmetric, we require for every i, j: |A[i][j]| = |A[j][i]|.

 But note: the diagonal: i=j, then |A[i][i]| = |A[i][i]|, so that's always true.

 Example: 
   [[1, 3], [5, 7]]: 
        |1| = |1| -> true? Actually, we have:
          i=0, j=1: |3| = |5| -> 3 != 5 -> not absolutely symmetric.

   So the sample input 3 is not absolutely symmetric -> we output k=2.

   However, sample input 1: the zero matrix: |0|=|0| for every pair -> absolutely symmetric.

   Another example: 
        [[1, -2], 
         [2, 3]]
        |1| = |1|? -> no, because we have:
          (0,1): |1| =? |2| -> 1 != 2 -> fails? 
        Actually, we have:
          (0,0): |1| = |1| -> true (diagonals are always symmetric in absolute value? because same element)
          (0,1): |A[0][1]| = |-2| = 2, |A[1][0]| = |2| = 2 -> true.
          (1,0): same as (0,1) -> true.

        So this matrix is absolutely symmetric.

   Therefore, we must compare the absolute values of A[i][j] and A[j][i] for every pair (i, j).

   But note: the condition is for every i, j: |A[i][j]| = |A[j][i]|. 

   So in the example above: 
        A[0][1] = -2 -> absolute value 2, A[1][0]=2 -> absolute value 2 -> equal.

   Therefore, we can check:

        for i in range(n):
            for j in range(n):
                if abs(A[i][j]) != abs(A[j][i]):
                    then not absolutely symmetric.

   However, note: we can break early if we find a discrepancy.

   But note: the diagonal? 
        i=j: abs(A[i][i]) == abs(A[i][i]) -> always true.

   So we only need to check i != j? Actually, we can iterate all pairs.

   Alternatively, we can iterate for all i and j. Since n is at most 50, it's efficient.

   Therefore, the code as in the editorial is:

        is_abs_sym = True
        for i in range(n):
            for j in range(n):
                if abs(A[i][j]) != abs(A[j][i]):
                    is_abs_sym = False
                    break
            if not is_abs_sym:
                break

   Then if is_abs_sym is True, we output k=1 and the matrix.

   However, note: the problem says "if k<=50" then output the k matrices. Since k=1 or k=2, we always output the matrices.

   But what if k=0? The problem states k is the minimal number of matrices. The zero matrix can be decomposed as one matrix (the zero matrix) so k=1.

   Therefore, we don't have k=0.

   Also note: the problem says "if there are multiple possible decompositions, any is acceptable". We are providing a specific minimal decomposition.

   Let's test with the provided examples.

   Example 1: n=3, zero matrix -> k=1, output the zero matrix.

   Example 2: 
        Input: 
            2
            0 1
            0 0
        Check pairs:
            (0,0): 0+0=0 -> even -> ok.
            (0,1): 1+0=1 -> odd -> so we output -1. Matches sample.

   Example 3:
        Input:
            2
            1 3
            5 7

        Check pairs: 
            (0,0): skip? we check i<j: only (0,1): 3+5 = 8 -> even -> condition holds.

        Then check absolute symmetry:
            (0,0): |1|==|1| -> True.
            (0,1): |3|==|5| -> 3!=5 -> not absolutely symmetric -> k=2.

        Then we output:
            Matrix X1:
                diagonal: 
                    [0, 0] for the first row? 
                    row0: [0, (3-5)//2] = [0, (3-5)//2] = [0, (-2)//2] = [0, -1]
                    row1: [ (5-3)//2, 0] = [ (2)//2, 0] = [1, 0]
                But note: in our construction for X1, we set:
                    for (i,j) with i != j: 
                         X1[i][j] = (A[i][j] - A[j][i]) // 2
                So for (0,1): (3-5)//2 = -1
                for (1,0): (5-3)//2 = 1
                But wait: the problem requires absolute symmetry: 
                    |X1[0][1]| = | -1 | = 1, |X1[1][0]| = |1| = 1 -> holds.

            Matrix X2:
                diagonal: 
                    [1, 7] (same as A)
                off-diagonal:
                    (0,1): (3+5)//2 = 8//2 = 4
                    (1,0): (5+3)//2 = 8//2 = 4
                So X2[0][1]=4, X2[1][0]=4 -> |4| = |4| -> holds.

            Now, the sample output for example 3 is:
                2
                1 -1
                1 -1   -> wait, the sample output provided in the problem is:

                2
                1 -1
                1 -1   ??? -> but wait the sample output is:

                Sample Output #3:
                2
                1 -1
                1 -1
                0 4
                4 8

            This does not match our construction.

            Let me check the problem's sample output:

                Matrix 1:
                    1 -1
                    1 -1
                Matrix 2:
                    0 4
                    4 8

            Then the sum of the two matrices is:
                [1+0, -1+4] = [1, 3]
                [1+4, -1+8] = [5, 7] -> matches the input.

            How did they get that?

            We have an alternative decomposition? 

            But note: the problem says any decomposition is acceptable. 

            However, our method is:

                X1 = [[0, (3-5)//2], [(5-3)//2, 0]] = [[0, -1], [1, 0]]
                X2 = [[1, (3+5)//2], [(5+3)//2, 7]] = [[1,4],[4,7]]

            Then the sum is:
                [[0+1, -1+4] = [1,3]
                 [1+4, 0+7] = [5,7]] -> correct.

            But the sample output provided in the problem uses:

                Matrix 1: [[1,-1],[1,-1]]
                Matrix 2: [[0,4],[4,8]]

            This is a different decomposition.

            Why does the problem say that?

            Actually, the problem's sample input 3 is:

                2
                1 3
                5 7

            and the sample output is:

                2
                1 -1
                1 -1
                0 4
                4 8

            So they are using two matrices that are absolutely symmetric? Let's check:

            Matrix 1:
                |1| = |1| -> true (for (0,0) and (1,1) and (0,1) and (1,0)):
                    (0,1): |1| vs |-1| -> 1 vs 1 -> true? Actually, |1| = 1 and |-1| = 1 -> equal? yes.
                    (1,0): |1| = 1, and the element at (0,1) is -1 -> absolute value 1, and (1,0) is 1 -> absolute value 1 -> equal.
                So Matrix 1 is absolutely symmetric.

            Matrix 2:
                (0,1): 4 and (1,0):4 -> |4|=|4| -> true.

            And the sum: 
                Matrix1[0][0] + Matrix2[0][0] = 1+0 = 1
                Matrix1[0][1] + Matrix2[0][1] = -1+4 = 3
                Matrix1[1][0] + Matrix2[1][0] = 1+4 = 5
                Matrix1[1][1] + Matrix2[1][1] = -1+8 = 7 -> correct.

            So the problem's sample output is valid.

            But our solution produces a different decomposition. Why?

            We are constructing a specific decomposition: 
                X1: antisymmetric in the sense of the signs for off-diagonals? (but note: the condition of absolute symmetry is satisfied because the absolute values of the off-diagonals are the same: |x| = |-x|).
                X2: symmetric.

            The problem does not require a specific decomposition. 

            However, the problem constraints for the output: the entries must be integers between -10^18 and 10^18. Our solution produces integers.

            Therefore, both decompositions are acceptable.

            But note: the problem says "if there are multiple possible decompositions, SoCCat will be satisfied by any of them".

            So we can output either.

            However, the editorial specifically describes:

                X1: diagonals 0, off-diagonals (A[i][j]-A[j][i])//2.
                X2: diagonals A[i][i], off-diagonals (A[i][j]+A[j][i])//2.

            So we follow the editorial.

            Why does the sample output in the problem use a different decomposition? 
                They might have an alternative minimal decomposition.

            Since the problem says "any", we can output our decomposition.

            But note: the problem sample output is provided as:

                2
                1 -1
                1 -1
                0 4
                4 8

            However, our program would output:

                First matrix (X1):
                    0 -1
                    1 0

                Second matrix (X2):
                    1 4
                    4 7

            But the problem's sample output is different.

            However, the problem says "if there are multiple possible decompositions, any of them".

            Therefore, we can output the decomposition as described in the editorial.

            But note: the problem sample output does not match the editorial's decomposition. 

            Why then the sample input 3 is provided with that output?

            The problem statement says:

                Sample Input #3
                2
                1 3
                5 7

                Sample Output #3
                2
                1 -1
                1 -1
                0 4
                4 8

            So to pass the sample, we must output the sample output? 

            Actually, the problem says "any", so both are acceptable. However, the sample output provided in the problem is an example.

            The problem does not require matching the sample output exactly. It requires a valid decomposition.

            But the sample input 3 must be handled by our program and output a valid decomposition.

            We can output:

                2
                0 -1
                1 0
                1 4
                4 7

            However, the problem sample output is:

                2
                1 -1
                1 -1
                0 4
                4 8

            So the judge must accept multiple answers.

            But note: the problem says "if k<=50, you should output the k matrices". The minimal k is 2, and we output two matrices.

            Therefore, we stick to the editorial's construction.

            However, the problem's sample output does not use the same decomposition. 

            But wait: the problem sample output uses two matrices that are absolutely symmetric? Yes.

            And our decomposition is also two absolutely symmetric matrices.

            So both are acceptable.

            But the problem sample input 3 has a sample output that is different from ours. 

            How can we reconcile?

            Actually, the problem sample output is:

                Matrix 1:
                    1 -1
                    1 -1

                Matrix 2:
                    0 4
                    4 8

            This decomposition is valid. However, our method produces a different one.

            Why? Because the problem does not require a specific decomposition. 

            But note: the editorial says:

                "Otherwise, k = 2 is sufficient and minimal. We can decompose A into two absolutely symmetric matrices."

            and then describes the construction.

            So we follow the editorial.

            Therefore, we output:

                First: 
                    [0, (3-5)//2] = [0, -1]
                    [(5-3)//2, 0] = [1, 0]

                Second:
                    [1, (3+5)//2] = [1,4]
                    [ (5+3)//2, 7] = [4,7]

            Then we output:

                2
                0 -1
                1 0
                1 4
                4 7

            However, the problem sample output is:

                2
                1 -1
                1 -1
                0 4
                4 8

            But note: the problem says "any". The judge must accept any valid decomposition.

            However, if the problem's test cases have fixed outputs, we might fail the sample.

            How to handle? The problem sample input 3 must be accepted by the judge with our output.

            Since the problem says "any", the judge should accept multiple decompositions.

            But to be safe, we can check: what does the problem sample input 3 expect? It provides the output as shown.

            Actually, the problem says "Sample Output #3" and then shows:

                2
                1 -1
                1 -1
                0 4
                4 8

            But that is just one example of a valid decomposition.

            Therefore, we output as per the editorial.

            However, note: the problem does not require to match the sample output exactly.

            We are following the editorial. So we output the decomposition as described.

            But wait: the editorial says for the second matrix: the diagonal entries are A[i][i]. In the sample, the diagonal of A is [1,7]. 
            So the second matrix should have diagonal [1,7]. However, the sample output's second matrix has diagonal [0,8] (because the second matrix is [[0,4],[4,8]] -> diagonals 0 and 8). 

            How is that? 

            The problem does not require the diagonal of the second matrix to be A[i][i]? 

            Actually, the decomposition we described in the editorial for the second matrix sets the diagonal to A[i][i]. 

            But the sample output uses:

                Matrix1: [[1, -1], [1, -1]] -> diagonal [1, -1] (but then the diagonal of the first matrix is 1 and -1? and the second matrix diagonal is 0 and 8?).

            Then the diagonal of the entire decomposition: 
                [1+0, ...] -> 1+0=1 for (0,0) and -1+8=7 for (1,1) -> matches.

            So the decomposition of the diagonals can be split arbitrarily as long as the sum is A[i][i] and each matrix is absolutely symmetric.

            The editorial provides one way: put the entire diagonal in the second matrix and 0 in the first. 

            But the sample output splits the diagonals: 
                (0,0): 1 (from first matrix) and 0 (from second) -> 1.
                (1,1): -1 (from first) and 8 (from second) -> 7.

            Why is the first matrix absolutely symmetric? 
                The diagonal: 
                    |1| = |1| -> for (0,0) and (1,1): we require |1| = | -1 |? -> no, we require for every pair. 
                Specifically, for the diagonal, we compare the same element: 
                    (0,0): |1| and |1| -> same? yes.
                    (1,1): | -1 | and | -1 | -> same? yes.

                And for off-diagonals: 
                    (0,1): | -1 | = 1, (1,0): |1| = 1 -> equal.

            So the diagonals can be assigned arbitrarily to the matrices as long as the sum is A[i][i] and the absolute symmetry condition holds for each matrix.

            However, the minimal k is 2, and we can assign the diagonals arbitrarily? 

            But note: the condition for absolute symmetry for a matrix T requires that for every pair (i,j) (including when i=j): |T_{i,j}| = |T_{j,i}|. 
            For the diagonal: i=j, then |T_{i,i}| = |T_{i,i}| -> always true. So the diagonals can be any integers.

            Therefore, the decomposition for the diagonals is: we can assign the diagonal of A arbitrarily to the two matrices as long as the sum is A[i][i]. 

            The editorial's construction is one valid way: put the entire diagonal in the second matrix and 0 in the first. 

            But the problem sample output uses a different split: 
                X1[0][0] = 1, X1[1][1] = -1, 
                X2[0][0] = 0, X2[1][1] = 8.

            Why is this valid? 
                The absolute symmetry condition for the diagonals is automatically satisfied because |1|=|1| (for the same element) and similarly for the others.

            Therefore, the problem's sample output is valid.

            However, our solution uses the editorial's construction: 
                X1: diagonals are 0, and X2: diagonals are A[i][i].

            So we output:

                First matrix: 
                    0 -1
                    1 0

                Second matrix:
                    1 4
                    4 7

            But note: the second matrix has diagonal [1,7] and off-diagonals [4,4]. 

            And the sum: 
                (0,0): 0+1 = 1 -> correct.
                (0,1): -1+4 = 3 -> correct.
                (1,0): 1+4 = 5 -> correct.
                (1,1): 0+7 = 7 -> correct.

            So it is correct.

            Therefore, we stick to the editorial's construction.

            However, the problem sample output is different. But the problem says any decomposition is acceptable.

            We output:

                2
                0 -1
                1 0
                1 4
                4 7

            This is acceptable.

            But the problem sample input 3 expects:

                2
                1 -1
                1 -1
                0 4
                4 8

            How can we pass the sample? 

            Actually, the problem's test cases will accept any valid decomposition. 

            Therefore, we don't need to worry.

            However, note: the problem sample input 3 is provided as:

                2
                1 3
                5 7

            and our program outputs:

                2
                0 -1
                1 0
                1 4
                4 7

            This is different from the sample output.

            But the problem sample output is just an example.

            Therefore, we write the code as per the editorial.

            But note: the problem sample input 1 and 2 must be matched.

            We have:

                Input 1: 
                    3
                    0 0 0
                    0 0 0
                    0 0 0

                Our program: 
                    Check: all pairs (i,j): A[i][j]+A[j][i] = 0+0=0 -> even -> ok.
                    Then check absolute symmetry: |0|==|0| everywhere -> true -> k=1 and output the zero matrix.

                Input 2:
                    2
                    0 1
                    0 0

                Check: pair (0,1): 1+0=1 -> odd -> output -1.

            So we pass sample 1 and 2.

            For sample 3, we output:

                2
                0 -1
                1 0
                1 4
                4 7

            This is acceptable.

            However, note: the problem sample output for sample 3 is different. But the problem does not require matching the sample output exactly. It requires a valid decomposition.

            Therefore, we output as per the editorial.

            But wait: what if the matrix is absolutely symmetric? Then we output k=1 and the matrix A. 

            However, what if A has negative values? 

            Example: 
                A = [[1, -2], 
                     [2, 3]]

            This is absolutely symmetric? 
                |1| = |1| -> true (diagonal)
                | -2 | = 2, |2| = 2 -> equal -> true.

            So we output k=1 and the matrix A.

            But note: the problem says "decompose into a sum of absolutely symmetric matrices". 
            The matrix A itself is absolutely symmetric, so one matrix suffices.

            Therefore, we output k=1 and the matrix A.

            But what if A is symmetric? Then |A[i][j]| = |A[j][i]|? 
                If A is symmetric, then A[i][j] = A[j][i], so |A[i][j]| = |A[j][i]| -> so symmetric matrices are absolutely symmetric? Yes.

            Similarly, anti-symmetric? 
                If A is anti-symmetric: A[i][j] = -A[j][i], then |A[i][j]| = |A[j][i]| -> so anti-symmetric matrices are absolutely symmetric? Yes.

            Therefore, we are good.

            Code Implementation:

                We check the even-sum condition for every off-diagonal pair (i<j). 
                Then we check the absolute symmetry condition for every pair (i,j) (which includes the diagonal, but the diagonal is always true).

            One more corner: n=1.

                For n=1: 
                    There are no off-diagonal pairs -> skip the even-sum check? 
                    Then check absolute symmetry: only one element -> always true? 
                    So we output k=1 and the matrix.

            Example: 
                Input: 
                    1
                    5

                Output:
                    1
                    5

            How about a matrix that is not absolutely symmetric? 

                n=2: 
                    [[1, 2],
                     [3, 4]]

                Check even-sum: (1,2): 2+3 = 5 -> odd? -> output -1? -> no, wait: 5 is odd -> so output -1.

                But also check: absolute symmetry? 
                    |1| = |1| -> true (diagonal)
                    |2| = |3| -> 2 != 3 -> not absolutely symmetric, but we already output -1 because of the even condition.

            Therefore, the even condition is necessary and we check it first.

            What if the matrix passes the even condition but is absolutely symmetric? Then k=1.

            What if the matrix passes the even condition but is not absolutely symmetric? Then k=2.

            Therefore, the code as written in the editorial is correct.

            We write the code accordingly.

            Note: The problem constraints: n<=50, and integers in the matrix between -10^9 and 10^9.

            We use integer arithmetic.

            Let's code accordingly.

            But note: the division by 2: 
                We have (A[i][j] - A[j][i]) // 2 and (A[i][j] + A[j][i]) // 2.

            Since we checked that (A[i][j] + A[j][i]) is even, then both the sum and the difference are even? 

                Actually: 
                    Let a = A[i][j], b = A[j][i]. Then a+b is even -> a and b have the same parity.

                    Then a-b is also even? 
                        Because: 
                            a mod 2 = b mod 2 -> (a-b) mod 2 = 0.

            So both (a-b) and (a+b) are divisible by 2.

            Therefore, the integer division is exact.

            We are safe.

            Code:

                n = int(input().strip())
                A = []
                for i in range(n):
                    A.append(list(map(int, input().split()))   # But if n==0? but n>=1

            Then:

                for i in range(n):
                    for j in range(i+1, n):
                        if (A[i][j] + A[j][i]) % 2 != 0:
                            print(-1)
                            exit(0)

                abs_sym = True
                for i in range(n):
                    for j in range(n):
                        if abs(A[i][j]) != abs(A[j][i]):
                            abs_sym = False
                            break
                    if not abs_sym:
                        break

                if abs_sym:
                    print(1)
                    for i in range(n):
                        print(" ".join(map(str, A[i])))
                else:
                    print(2)
                    # Build X1: diagonal 0, off-diagonal (A[i][j]-A[j][i])//2
                    for i in range(n):
                        row = []
                        for j in range(n):
                            if i == j:
                                row.append(0)
                            else:
                                row.append((A[i][j] - A[j][i]) // 2)
                        print(" ".join(map(str, row)))
                    # Build X2: diagonal A[i][i], off-diagonal (A[i][j]+A[j][i])//2
                    for i in range(n):
                        row = []
                        for j in range(n):
                            if i == j:
                                row.append(A[i][j])
                            else:
                                row.append((A[i][j] + A[j][i]) // 2)
                        print(" ".join(map(str, row)))

            Let me test with a small example: 
                n=1: 
                    A = [[5]]
                Then:
                    skip the even-sum loop (no i<j).
                    Check absolute symmetry: |5|==|5| -> True -> output k=1 and [5].

            n=2: 
                A = [[1, 2], [4, 3]]
                Check even-sum: i=0,j=1: 2+4 = 6 -> even -> ok.
                Check absolute symmetry: 
                    (0,0): |1|==|1| -> True.
                    (0,1): |2|==|4| -> 2==4? -> False -> so not absolutely symmetric -> k=2.
                Then:
                    X1: 
                         [0, (2-4)//2] = [0, ( -2 )//2] = [0, -1]
                         [ (4-2)//2, 0] = [ (2)//2, 0] = [1, 0]
                    X2:
                         [1, (2+4)//2] = [1, 6//2] = [1,3]
                         [ (4+2)//2, 3] = [3,3]   -> but wait: the second row? 
                         Actually, for the second matrix:
                             row0: [1, 3]
                             row1: [ (4+2)//2, 3] = [3, 3]   -> but the diagonal of the second matrix: 
                                 (0,0): 1, (1,1): 3.

                Then the sum:
                    (0,0): 0+1 = 1 -> matches.
                    (0,1): -1+3 = 2 -> matches.
                    (1,0): 1+3 = 4 -> matches.
                    (1,1): 0+3 = 3 -> matches.

            So it works.

            However, note: in the second matrix, the off-diagonal (1,0) is set to (A[1][0]+A[0][1])//2 = (4+2)//2 = 3, and (0,1) is 3 -> symmetric.

            Therefore, we output:

                2
                0 -1
                1 0
                1 3
                3 3

            But the problem requires the output of the two matrices: first matrix then the second.

            This matches.

            We are done.

            Let me write the code accordingly.

            Note: The problem says the output entries must be between -10^18 and 10^18. Our computed values are at most (10^9+10^9)//2 = 10^9, which is within the range.

            We are safe.

            Code below.

            However, note: the problem constraints say that the input integers can be as large as 10^9. 
                The maximum absolute value in the computation: 
                    For (A[i][j] - A[j][i]): at most 2e9 in absolute value? Then divided by 2 -> 1e9, which is < 10^18.
                Similarly for the sum: at most 2e9 -> divided by 2 -> 1e9.

            Therefore, no overflow.

            We write the code.