To solve this problem, we need to maximize the wealth of the poorest cat in the kingdom after redistributing wealth such that each cat has at least its specified minimum wealth. The redistribution involves transferring wealth from cats with more than their minimum required wealth to other cats, one unit at a time.

### Approach
1. **Problem Analysis**: The goal is to maximize the minimum wealth among all cats after redistribution, ensuring each cat has at least its specified minimum wealth. The total wealth is fixed, and we need to find the largest possible minimum value \( M \) such that the sum of \( \max(l_i, M) \) for all cats does not exceed the total wealth.

2. **Key Insight**: The function \( S(M) = \sum_{i} \max(l_i, M) \) is piecewise linear and non-decreasing. By sorting the minimum wealth values \( l_i \), we can efficiently compute \( S(M) \) for segments defined by distinct values in \( l \).

3. **Algorithm Selection**:
   - **Preprocessing**: Calculate the total wealth \( T \) and the sum of all minimum wealths \( \text{total}_l \). Sort the list of minimum wealths \( l \) and group distinct values with their frequencies.
   - **Segment Processing**: For each distinct value \( d \) in \( l \), compute the minimal total wealth required \( S(M) \) for \( M \) in the segment \([d, \text{next}_d)\), where \( \text{next}_d \) is the next distinct value. The formula for \( S(M) \) in this segment is \( M \times \text{cum\_freq} + (\text{total}_l - \text{cum\_sum}) \), where \( \text{cum\_freq} \) is the cumulative frequency of cats processed so far and \( \text{cum\_sum} \) is the cumulative sum of their minimum wealths.
   - **Maximizing \( M \)**: For each segment, solve \( S(M) \leq T \) to find the maximum feasible \( M \) within the segment. Update the best candidate \( M \) across all segments.

### Solution Code
```cpp
#include <iostream>
#include <vector>
#include <algorithm>
#include <numeric>
using namespace std;

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    int C;
    cin >> C;
    vector<long long> results;
    for (int c = 0; c < C; c++) {
        int n;
        cin >> n;
        vector<long long> w(n);
        vector<long long> l(n);
        long long total_wealth = 0;
        for (int i = 0; i < n; i++) {
            cin >> w[i];
            total_wealth += w[i];
        }
        for (int i = 0; i < n; i++) {
            cin >> l[i];
        }
        long long total_l = accumulate(l.begin(), l.end(), 0LL);
        sort(l.begin(), l.end());
        vector<long long> distinct;
        vector<int> freqs;
        for (int i = 0; i < n; ) {
            int j = i;
            while (j < n && l[j] == l[i]) {
                j++;
            }
            distinct.push_back(l[i]);
            freqs.push_back(j - i);
            i = j;
        }
        long long cum_freq = 0;
        long long cum_sum = 0;
        long long best = 0;
        int num_d = distinct.size();
        for (int i = 0; i < num_d; i++) {
            long long d = distinct[i];
            int cnt = freqs[i];
            cum_freq += cnt;
            cum_sum += static_cast<long long>(cnt) * d;
            long long numerator = total_wealth - total_l + cum_sum;
            long long candidate_val = numerator / cum_freq;
            long long candidate_seg;
            if (i < num_d - 1) {
                candidate_seg = min(candidate_val, distinct[i+1] - 1);
            } else {
                candidate_seg = candidate_val;
            }
            if (candidate_seg >= d) {
                if (candidate_seg > best) {
                    best = candidate_seg;
                }
            }
        }
        results.push_back(best);
    }
    for (long long res : results) {
        cout << res << '\n';
    }
    return 0;
}
```

### Explanation
1. **Reading Input**: The input consists of multiple test cases. For each test case, we read the number of cats, their wealth, and their minimum required wealth.
2. **Total Wealth Calculation**: We compute the total wealth \( T \) and the sum of all minimum wealths \( \text{total}_l \).
3. **Sorting and Grouping**: The minimum wealth values are sorted, and distinct values along with their frequencies are identified.
4. **Segment Processing**: For each distinct value \( d \), we calculate the minimal total wealth required \( S(M) \) for \( M \) in the segment \([d, \text{next}_d)\). The feasible \( M \) in this segment is derived by solving \( M \times \text{cum\_freq} + (\text{total}_l - \text{cum\_sum}) \leq T \).
5. **Updating Best Candidate**: The maximum feasible \( M \) across all segments is tracked and stored as the result for each test case.
6. **Output**: The results for all test cases are printed at the end.

This approach efficiently narrows down the search for the optimal \( M \) by leveraging sorted distinct values and their cumulative properties, ensuring optimal performance even for large inputs.