### Approach
The problem involves redistributing wealth among cats such that each cat has at least its specified minimum wealth, and the wealth of the poorest cat is maximized. The key insight is that the solution can be framed as finding the maximum possible minimum wealth \( M \) such that the total wealth required to ensure every cat has at least \( \max(l_i, M) \) does not exceed the total available wealth.

#### Key Insights:
1. **Total Wealth Constraint**: The total wealth \( T \) (sum of all \( w_i \)) is fixed. The sum of the minimum required wealth for each cat (each cat must have at least \( \max(l_i, M) \)) must be \( \leq T \).
2. **Piecewise Function**: The function \( S(M) = \sum_{i} \max(l_i, M) \) is piecewise linear and non-decreasing. It can be broken into segments based on the distinct values in the list \( l \).
3. **Binary Search Alternative**: Instead of binary searching over a large range of \( M \), we evaluate \( S(M) \) efficiently by leveraging the sorted distinct values of \( l \) and their frequencies. For each segment between two distinct values, \( S(M) \) is linear, allowing us to compute the maximum feasible \( M \) in that segment directly.

#### Algorithm:
1. **Preprocessing**:
   - Compute the total wealth \( T \) and the sum of minimum wealths \( \text{total}_l \).
   - Sort the list \( l \) and group it into distinct values with their frequencies.
2. **Segment Processing**:
   - Iterate over the distinct values of \( l \) in increasing order.
   - For each distinct value \( d \), maintain cumulative frequency and cumulative sum of \( l_i \) values processed so far.
   - Calculate the minimal total wealth required \( S(M) \) for \( M \) in the current segment \([d, \text{next}_d)\) as \( M \times \text{cum\_freq} + (\text{total}_l - \text{cum\_sum}) \).
   - Solve for the maximum \( M \) in the segment that satisfies \( S(M) \leq T \). This is given by \( M = \left\lfloor \frac{T - \text{total}_l + \text{cum\_sum}}{\text{cum\_freq}} \right\rfloor \), bounded by the segment's upper limit.
3. **Update Result**: Track the maximum feasible \( M \) across all segments.

### Solution Code
```python
import sys

def main():
    data = sys.stdin.read().split()
    if not data:
        return
    t = int(data[0])
    index = 1
    results = []
    for _ in range(t):
        n = int(data[index])
        index += 1
        w = list(map(int, data[index:index + n]))
        index += n
        l_list = list(map(int, data[index:index + n]))
        index += n
        
        total_wealth = sum(w)
        total_l = sum(l_list)
        l_list.sort()
        distinct = []
        freqs = []
        i = 0
        n_val = len(l_list)
        while i < n_val:
            j = i
            while j < n_val and l_list[j] == l_list[i]:
                j += 1
            distinct.append(l_list[i])
            freqs.append(j - i)
            i = j
            
        cum_freq = 0
        cum_sum = 0
        best = 0
        num_distinct = len(distinct)
        
        for idx in range(num_distinct):
            d = distinct[idx]
            count_d = freqs[idx]
            cum_freq += count_d
            cum_sum += count_d * d
            numerator = total_wealth - total_l + cum_sum
            candidate_val = numerator // cum_freq
            
            if idx < num_distinct - 1:
                next_d = distinct[idx + 1]
                candidate_seg = min(next_d - 1, candidate_val)
            else:
                candidate_seg = min(total_wealth, candidate_val)
                
            if candidate_seg >= d:
                if candidate_seg > best:
                    best = candidate_seg
                    
        results.append(str(best))
        
    print("\n".join(results))

if __name__ == '__main__':
    main()
```

### Explanation
1. **Reading Input**: The input is read in bulk for efficiency, especially given the constraints.
2. **Processing Each Test Case**:
   - **Total Wealth Calculation**: The sum of all cats' wealth \( T \) and the sum of their minimum wealth requirements \( \text{total}_l \) are computed.
   - **Sorting and Grouping**: The list \( l \) (minimum wealths) is sorted, and distinct values along with their frequencies are extracted.
3. **Segment Evaluation**:
   - For each distinct value \( d \) in \( l \), the algorithm calculates the minimal total wealth required \( S(M) \) for \( M \) in the segment \([d, \text{next}_d)\), where \( \text{next}_d \) is the next distinct value.
   - The maximum feasible \( M \) in the segment is derived by solving \( M \times \text{cum\_freq} + (\text{total}_l - \text{cum\_sum}) \leq T \), where \( \text{cum\_freq} \) and \( \text{cum\_sum} \) are the cumulative frequency and sum of \( l_i \) values up to \( d \).
4. **Result Compilation**: The maximum \( M \) across all segments is tracked and stored as the result for each test case.
5. **Output**: Results for all test cases are printed at the end.

This approach efficiently narrows down the search for the optimal \( M \) by leveraging the sorted distinct values of \( l \) and their cumulative properties, ensuring optimal performance even for large inputs.