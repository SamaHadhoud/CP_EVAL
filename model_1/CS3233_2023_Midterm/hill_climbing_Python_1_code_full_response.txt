To solve this problem, we need to determine if we can color at least \(\left\lceil \frac{n}{2} \right\rceil\) edges of a connected graph such that each color class forms a connected subgraph and the number of edges colored with each color \(c\) does not exceed \(a_c\). If such a coloring exists, we should output one valid coloring; otherwise, we output "No".

### Approach
1. **Problem Analysis**:
   - **Input**: The graph is connected with \(n\) vertices and \(m\) edges. Each color \(c\) (from 1 to \(m\)) has a maximum capacity \(a_c\).
   - **Output**: "Yes" if a valid coloring exists with at least \(\left\lceil \frac{n}{2} \right\rceil\) edges colored, along with the coloring; otherwise, "No".
   - **Constraints**: The sum of \(n\) and \(m\) across all test cases is at most 300,000.

2. **Key Insights**:
   - **Total Capacity Check**: If the sum of all \(a_c\) values is less than \(\left\lceil \frac{n}{2} \right\rceil\), it's impossible to color enough edges, so the answer is "No".
   - **Sufficient Colors for Single-Edge Components**: If there are at least \(\left\lceil \frac{n}{2} \right\rceil\) colors with \(a_c \geq 1\), we can color \(\left\lceil \frac{n}{2} \right\rceil\) edges, each as a separate component (each edge is a connected component by itself).
   - **Packing Components for Remaining Cases**: If the above condition isn't met, we use a BFS-based approach to pack edges into connected components for each available color (sorted by capacity in descending order). Each component is grown by adding adjacent unused edges until the color's capacity is reached or no more edges can be added.

3. **Algorithm Selection**:
   - **First Branch (Single-Edge Components)**: For each test case, if there are enough colors with \(a_c \geq 1\), assign each of the first \(\left\lceil \frac{n}{2} \right\rceil\) edges a distinct color.
   - **Second Branch (BFS Packing)**: If not, sort available colors by capacity in descending order. For each color, start with an unused edge and grow a connected component by BFS, adding adjacent unused edges until the color's capacity is reached. If the total edges colored meet or exceed \(\left\lceil \frac{n}{2} \right\rceil\), output the coloring; otherwise, output "No".

4. **Complexity Analysis**:
   - **Time Complexity**: For each test case, the BFS processes each edge at most once, leading to \(O(m)\) per test case. The total time across all test cases is \(O(\sum m)\), which is within the constraint of 300,000.
   - **Space Complexity**: The graph representation and auxiliary data structures use \(O(n + m)\) space per test case, which is efficient given the constraints.

### Solution Code
```python
import sys
from collections import deque

def main():
    data = sys.stdin.read().split()
    if not data:
        return
    t = int(data[0])
    index = 1
    out_lines = []
    
    for _ in range(t):
        n = int(data[index]); m = int(data[index+1]); index += 2
        a_list = list(map(int, data[index:index+m]))
        index += m
        edges = []
        for i in range(m):
            u = int(data[index]); v = int(data[index+1]); index += 2
            edges.append((u, v))
        
        T = (n + 1) // 2
        
        total_cap = sum(a_list)
        if total_cap < T:
            out_lines.append("No")
            continue
        
        cnt = 0
        for x in a_list:
            if x >= 1:
                cnt += 1
                
        if cnt >= T:
            non_zero_colors = []
            for i in range(m):
                if a_list[i] >= 1:
                    non_zero_colors.append(i+1)
            non_zero_colors = non_zero_colors[:T]
            res = [0] * m
            for i in range(T):
                res[i] = non_zero_colors[i]
            out_lines.append("Yes")
            out_lines.append(" ".join(map(str, res)))
        else:
            graph = [[] for _ in range(n+1)]
            for i in range(m):
                u, v = edges[i]
                graph[u].append((v, i))
                graph[v].append((u, i))
            
            colors_with_index = []
            for i in range(m):
                if a_list[i] > 0:
                    colors_with_index.append((a_list[i], i))
            colors_with_index.sort(key=lambda x: x[0], reverse=True)
            
            unused_edges = set(range(m))
            components = []
            
            for cap, color_idx in colors_with_index:
                if not unused_edges:
                    break
                start_edge = next(iter(unused_edges))
                comp_edges = set()
                comp_edges.add(start_edge)
                unused_edges.remove(start_edge)
                u0, v0 = edges[start_edge]
                vertices = set([u0, v0])
                qv = deque([u0, v0])
                
                while len(comp_edges) < cap and qv:
                    u = qv.popleft()
                    for neighbor, eidx in graph[u]:
                        if eidx in unused_edges:
                            comp_edges.add(eidx)
                            unused_edges.remove(eidx)
                            if neighbor not in vertices:
                                vertices.add(neighbor)
                                qv.append(neighbor)
                            if len(comp_edges) >= cap:
                                break
                components.append((color_idx, comp_edges))
            
            total_edges_colored = 0
            for _, comp_set in components:
                total_edges_colored += len(comp_set)
                
            if total_edges_colored >= T:
                res = [0] * m
                for color_idx, comp_set in components:
                    c_val = color_idx + 1
                    for eidx in comp_set:
                        res[eidx] = c_val
                out_lines.append("Yes")
                out_lines.append(" ".join(map(str, res)))
            else:
                out_lines.append("No")
                
    print("\n".join(out_lines))

if __name__ == '__main__':
    main()
```

### Explanation
1. **Reading Input**: The input is read in one go for efficiency, especially given the constraints.
2. **Processing Each Test Case**:
   - **Initial Checks**: For each test case, check if the total capacity of colors is sufficient to color \(\left\lceil \frac{n}{2} \right\rceil\) edges. If not, output "No".
   - **Single-Edge Coloring**: If there are enough colors (each with \(a_c \geq 1\)), color the first \(\left\lceil \frac{n}{2} \right\rceil\) edges with distinct colors.
   - **Component-Based Coloring**: If single-edge coloring isn't feasible, use BFS to grow connected components for each color (sorted by capacity). Each component starts with an unused edge and expands by adding adjacent edges until the color's capacity is reached.
3. **Output**: After processing all colors, if the total colored edges meet the requirement, output the coloring; otherwise, output "No".

This approach efficiently checks for feasible colorings by leveraging connected component properties and greedy BFS-based edge packing, ensuring optimal performance within given constraints.