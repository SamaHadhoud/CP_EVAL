 We are going to follow the editorial exactly.
 Steps:
 1. Read the input matrix A of size n x n.
 2. Check for every off-diagonal pair (i, j) with i < j: if (A[i][j] + A[j][i]) is even? If not, output -1.
 3. Check if the entire matrix A is absolutely symmetric: for every i, j, |A[i][j]| == |A[j][i]|. If yes, then output k=1 and the matrix A.
 4. Otherwise, output k=2 and then output two matrices:
     Matrix X1: 
        Diagonal: 0
        Off-diagonal (i, j): (A[i][j] - A[j][i]) // 2   [Note: integer division, but we know the difference is even? Actually, the condition we checked ensures that the sum is even, so the difference is even too? Let me see: 
          Let s = A[i][j] + A[j][i] is even -> A[i][j] and A[j][i] have the same parity -> then A[i][j] - A[j][i] is even. So yes, integer division is exact.

     Matrix X2:
        Diagonal: A[i][i]
        Off-diagonal (i, j): (A[i][j] + A[j][i]) // 2

 However, note: the condition we checked (even sum) is necessary for the decomposition to integers. Also, the absolute symmetry of X1 and X2 is guaranteed:
   For X1: 
        We have for i != j: 
          |X1[i][j]| = |(A[i][j] - A[j][i])/2|
          and X1[j][i] = (A[j][i] - A[i][j])/2 = - (A[i][j] - A[j][i])/2 = - X1[i][j]
          Therefore, |X1[i][j]| = |X1[j][i]|.

   For X2:
        We have for i != j: 
          X2[i][j] = (A[i][j] + A[j][i]) / 2
          X2[j][i] = (A[j][i] + A[i][j]) / 2 = X2[i][j]
          Therefore, |X2[i][j]| = |X2[j][i]|.

 But note: what about the diagonal? 
   For X1: diagonal is 0 -> symmetric.
   For X2: diagonal is set to A[i][i] (so symmetric by definition).

 Also, note: the entire matrix A = X1 + X2? 
   For diagonal: 
        X1[i][i] + X2[i][i] = 0 + A[i][i] = A[i][i]
   For off-diagonal (i, j):
        X1[i][j] + X2[i][j] = (A[i][j]-A[j][i])/2 + (A[i][j]+A[j][i])/2 = (2*A[i][j])/2 = A[i][j]

  So it is correct.

 However, note the constraints: the values in the output matrices must be between -10^18 and 10^18. 
   Since the input values are up to 10^9, the computations (differences and averages) will be within the range of long long.

 Implementation in C++:

 Steps:
   - Read n, then n lines of n integers each.
   - Check for the even-sum condition for every i<j. If fails, output -1 and return.
   - Check absolute symmetry: for every i,j, if abs(A[i][j]) != abs(A[j][i]), then set flag to false.
   - If absolutely symmetric, output 1 and then the matrix A.

   - Otherwise, output 2 and then two matrices.

 Important: The problem says if k<=50 then we output the matrices. Here k is either 1 or 2, which are <=50, so we always output the matrices when decomposition exists.

 But note: the condition for k=1 is that the matrix is absolutely symmetric. Otherwise, k=2.

 However, what if the matrix is not absolutely symmetric but we have the even condition? Then we output k=2 and the two matrices.

 But note: the condition for absolute symmetry is independent: even if the matrix is absolutely symmetric, we output k=1. Otherwise, we output k=2.

 However, what if the matrix is absolutely symmetric? Then we output k=1 and the matrix itself.

 But note: the condition of absolute symmetry is |T_{i,j}| = |T_{j,i}| for all i,j. This does not require T_{i,j}=T_{j,i} (which would be symmetric) nor T_{i,j}=-T_{j,i} (antisymmetric). It's a weaker condition.

 However, the problem says: "SoCCat deemed a matrix T ... to be absolutely symmetric if and only if |T_{i,j}| = |T_{j,i}| for all i,j".

 So the matrix [ [0, 1], [1, 0] ] is absolutely symmetric? Yes, because |1| = |1|.
 Also, [ [0, -1], [1, 0] ] is absolutely symmetric? Because | -1 | = |1| -> 1=1.

 But note: the matrix [ [0, 1], [-1, 0] ] is also absolutely symmetric? |1| = | -1 | -> true.

 However, the decomposition we are going to do for k=2 is valid only when the matrix is not absolutely symmetric? Actually, the problem says: minimize k. So if the matrix is absolutely symmetric we can use k=1.

 Therefore, the algorithm:

   Step 1: Check even-sum condition for every off-diagonal (i<j). If fails, output -1.

   Step 2: Check if the matrix is absolutely symmetric: for every i, j: |A[i][j]| == |A[j][i]|. If yes, then output k=1 and the matrix.

   Step 3: Otherwise, output k=2 and then the two matrices as described.

 But note: what if the matrix is absolutely symmetric? Then we are done with k=1.

 However, consider: the zero matrix? It is absolutely symmetric. And the condition of even-sum? It holds. So we output k=1.

 But what about a matrix that is absolutely symmetric and has an odd sum in an off-diagonal? Actually, the even-sum condition is necessary for the decomposition to exist. However, note that if the matrix is absolutely symmetric, then we don't require the decomposition into two matrices? Actually, we are using k=1. But the even-sum condition is required for the entire problem? Actually, the problem says: "SoCCat wants to decompose this matrix A into a sum ...".

 Let me reconsider: the necessary condition (even sum for every pair) is required regardless? Why?

 Consider: if we are using k=1, then we require that A is absolutely symmetric. But note: the condition of absolute symmetry does not require the even-sum condition? Actually, the even-sum condition is a separate condition that we deduced for the existence of a decomposition (for any k). However, we must note:

   In the decomposition into k matrices, each matrix is absolutely symmetric. Consider two positions (i,j) and (j,i). In each matrix X, we have |X_{i,j}| = |X_{j,i}|. Therefore, the entire sum must satisfy:

        A_{i,j} = sum_{matrices} X_{i,j}
        A_{j,i} = sum_{matrices} X_{j,i}

   But note that the absolute values of the entries in each matrix at (i,j) and (j,i) are the same, but the signs can be arbitrary. However, we cannot deduce that the sum A_{i,j}+A_{j,i} is even without more.

 But let me think of the additive property of the condition:

   Let the decomposition be A = X1 + X2 + ... + Xk.

   For each matrix X, we have |X_{i,j}| = |X_{j,i}|. Therefore, we can write:

        X_{i,j} = s * a,   X_{j,i} = t * a,   where s,t in {-1, 1} and a is a nonnegative integer.

   Then, the sum for (i,j) is the sum of the s_i * a_i (over the k matrices) and for (j,i) is the sum of the t_i * a_i.

   Now, the condition on the entire matrix: 

        A_{i,j} = sum_i (s_i * a_i)
        A_{j,i} = sum_i (t_i * a_i)

   Then, A_{i,j} + A_{j,i} = sum_i ( (s_i + t_i) * a_i )

   And note that s_i + t_i can be: 
        if s_i = t_i = 1 -> 2
        if s_i = t_i = -1 -> -2
        if s_i = 1 and t_i = -1 -> 0
        if s_i = -1 and t_i = 1 -> 0

   Therefore, each term is even? Actually, 2, -2, 0 are even. So the entire sum is even.

   Therefore, the condition A_{i,j}+A_{j,i} even is necessary for any k.

   And we have to check that first.

   So the algorithm:

     1. Check for every i<j: (A[i][j] + A[j][i]) % 2 == 0. If any fails, output -1 and exit.

     2. Then check if the matrix is absolutely symmetric? Actually, the problem says we want to minimize k. The minimal k is 1 if A is absolutely symmetric. Otherwise, we can do k=2.

     However, note: what if the matrix is not absolutely symmetric? Then we use k=2.

     But is k=2 always sufficient? We have a construction: X1 and X2 as above. And we know the even condition ensures integer entries.

     3. Therefore:

        if the entire matrix is absolutely symmetric -> k=1, output A.

        else -> k=2, output the two matrices.

   However, note: the diagonal entries: in the absolutely symmetric condition, the diagonal entries are fixed? Actually, for the diagonal, we have i=j, so the condition is |A_{i,i}| = |A_{i,i}| -> always true. So the diagonal doesn't break absolute symmetry.

   Therefore, the condition for absolute symmetry is only on the off-diagonals? Actually, it's for every pair (i,j) including when i=j? But when i=j, it's trivial. So we can skip the diagonal? Actually, the condition is for all i,j, so including diagonal. But diagonal is always satisfied.

   So we can check only off-diagonals? Actually, the condition for diagonal is always true, so we only need to check for i != j.

   But note: the condition |A[i][j]| = |A[j][i]| must hold for every i, j. For i=j, it's always true. So we can skip the diagonal.

   So we can do:

        for i in range(n):
            for j in range(i+1, n):
                if abs(A[i][j]) != abs(A[j][i]):
                    then not absolutely symmetric.

   However, note: the condition must also hold for j>i? Actually, we are checking pairs (i,j) and (j,i) with i<j. That covers all off-diagonals.

   So the code:

        bool abs_sym = true;
        for (int i = 0; i < n; i++) {
            for (int j = i+1; j < n; j++) {
                if (abs(A[i][j]) != abs(A[j][i])) {
                    abs_sym = false;
                    break;
                }
            }
            if (!abs_sym) break;
        }

   But note: if n=1, then the inner loop does nothing and we set abs_sym to true? That's correct: a 1x1 matrix is always absolutely symmetric.

 Implementation:

   We'll use:
        vector<vector<long long>> A(n, vector<long long>(n));

   Why long long? Because the values can be up to 10^9, and we do (a+b)/2 and (a-b)/2: which are integers and within long long.

   Steps:

        Read n, then n lines of n integers.

        Check for even sum for every i<j: 
            for (int i=0; i<n; i++)
                for (int j=i+1; j<n; j++)
                    if ((A[i][j] + A[j][i]) % 2 != 0) { ... }

        But note: the absolute value of the numbers? The modulo 2 condition: 
            (a+b) mod 2 = (a mod 2 + b mod 2) mod 2.

        However, if the numbers are negative? In C++, for negative numbers: 
            (-1) % 2 is -1? Actually, we want to check evenness: we can check (a+b) % 2 != 0 might be problematic for negative? 

        Alternatively: 
            if ((A[i][j] + A[j][i]) % 2 != 0) 
        This might not work as expected for negative numbers? Because the modulus of a negative number is negative.

        We can do: 
            if ((abs(A[i][j] + A[j][i])) % 2 != 0) 
        But that is not the same: because the parity of a negative number is the same as the absolute value? Actually, the parity is defined by the modulo 2 in the mathematical sense: a number is even if divisible by 2, regardless of sign.

        Alternatively, we can do:
            if ((A[i][j] + A[j][i]) & 1) 
        This checks the last bit: which is 1 if odd, 0 if even. This works for negative in two's complement? Actually, in C++ the representation for integers is two's complement and the standard says that for negative odd, the last bit is 1? 

        But note: the standard says that for signed integers, the modulus operation with 2 might be implementation-defined for negatives? Actually, we are using modulo 2 and then comparing to 0. Alternatively, we can do:

            if ((A[i][j] + A[j][i]) % 2 != 0) 
        but if the sum is negative, then modulo 2 might be negative? 

        Example: (-3) % 2 in C++: 
            (-3) % 2 = -1? 

        To avoid, we can do:

            if (((A[i][j] + A[j][i]) % 2 + 2) % 2 != 0) 

        Or simpler: check the absolute value modulo 2? Actually, the parity of a number is the same as the parity of its absolute value? 

        Actually, we can do:

            if ((A[i][j] + A[j][i]) % 2 != 0) 
            -> but if the sum is negative, then modulo 2 might be negative. We can adjust:

        Alternatively, we can use:

            if ((A[i][j] + A[j][i]) & 1) 

        This is safe? Because the bitwise AND with 1 extracts the least significant bit, which is the same as the modulus 2 in the mathematical sense? Actually, for two's complement, the LSB is the same for negative and positive? 

        But the standard says: for signed integers, if the value is negative, then the result of a & 1 is the same as the modulus in the sense that it gives the two's complement representation's last bit? 

        However, we know that the mathematical parity of a number n is the same as the parity of n mod 2 in the set {0,1}. So we can do:

            long long s = A[i][j] + A[j][i];
            if (s % 2 != 0) 

        But to avoid negative modulus issues, we can use:

            if (s % 2 == 1 || s % 2 == -1) 

        Or use:

            if (s & 1)   // because if s is odd, then the last bit is 1 -> true.

        This is safe for negative? Let me test:

            s = -3:  in two's complement: ...1111101 -> last bit is 1 -> odd -> true: correct.
            s = -2: ...1111110 -> last bit 0 -> false: correct.

        So we can do:

            if ((A[i][j] + A[j][i]) & 1) 

        But note: the numbers can be as large as 10^9, and their sum up to 2e9, which fits in long long? Actually, long long is 64 bits. But we are storing in long long.

        Alternatively, we can do:

            if ( ( (A[i][j] % 2 + A[j][i] % 2) % 2 ) != 0 ) 

        But modulo 2 of a negative: we can adjust:

            long long a = A[i][j] % 2;
            long long b = A[j][i] % 2;
            if ( ( (a+2) % 2 + (b+2) % 2 ) % 2 != 0 )

        This is messy.

        Actually, the condition: the sum is even if and only if the two numbers have the same parity? 
            A[i][j] and A[j][i] have the same parity? Then their sum is even.

        So we can check:

            if ( (A[i][j] % 2 == 0) != (A[j][i] % 2 == 0) )   // i.e. one is even and the other odd -> then false.

        But note: negative: 
            -3 % 2: might be -1 -> so (-3 % 2 != 0) -> true (odd) -> same as positive.

        Actually, in C++: 
            (-3) % 2 is -1 -> so (-3 % 2 != 0) -> true -> odd -> correct.

        So we can do:

            if ( (A[i][j] % 2 == 0) ^ (A[j][i] % 2 == 0) ) 
            // if one is even and the other odd, then condition fails.

        But note: the expression (A[i][j] % 2 == 0) is true for even, false for odd. Then we want: if they are different -> condition fails.

        Alternatively:

            if ( (A[i][j] & 1) != (A[j][i] & 1) ) 

        This is safe? 

        Actually, the condition we require is: the sum is even -> the two numbers have the same parity.

        So we can check:

            if ( (A[i][j] & 1) != (A[j][i] & 1) ) 
            then the sum is odd -> output -1.

        So:

            for (int i=0; i<n; i++)
                for (int j=i+1; j<n; j++)
                    if ( (A[i][j] & 1) != (A[j][i] & 1) ) {
                        cout << -1 << endl;
                        return;
                    }

   But note: what about the diagonal? The condition is only for i<j? The diagonal (i=j) is not included? Correct: the condition is only for off-diagonals? Actually, the condition for the diagonal is automatically satisfied? Because the diagonal entry is the same as itself. But we don't require the even condition for the diagonal? Actually, the necessary condition we deduced is for every pair (i,j) and (j,i) in the entire matrix? But note: for i=j, we have:

        A_{i,i} = ... (from the decomposition) -> but the condition we deduced for the pair (i,i) is:

          A_{i,i} + A_{i,i} = 2*A_{i,i} -> which is even.

        So the diagonal always satisfies the even condition? Therefore, we only check off-diagonals.

   Therefore, we only check i < j.

   Now, the code:

        Read n and matrix A.

        Check for every i < j: 
            if ( (A[i][j] & 1) != (A[j][i] & 1) ) -> then output -1 and return.

        Then check for absolute symmetry: for every i < j: if (abs(A[i][j]) != abs(A[j][i])) -> then set abs_sym = false.

        If abs_sym is true: output k=1 and the matrix A.

        Else: output k=2, then the two matrices.

   But note: the problem says that the entries in the output matrices must be between -10^18 and 10^18. Our computations:

        For X1: off-diagonal: (A[i][j] - A[j][i]) / 2. 
            The absolute value of the difference is at most 2e9 -> divided by 2 is 1e9, which is within bounds.

        For X2: off-diagonal: (A[i][j] + A[j][i]) / 2: the absolute value is at most 2e9 -> divided by 2 is 1e9, which is within bounds.

        Diagonal: in X1: 0, in X2: A[i][i] which is at most 10^9.

   So we are safe.

   However, note: integer overflow in the expression? 
        (A[i][j] - A[j][i]) might be as large as 2e9 in absolute value? Actually, 10^9 - (-10^9) = 2e9 -> which is 2000000000, which fits in int? But we are using long long? Yes.

   We are storing A in long long. So the subtraction and addition are in long long and then we divide by 2 -> integer division? But we know the numbers are even? 

        Actually, the even condition is for the sum, but the difference? 
          We know that A[i][j] and A[j][i] have the same parity -> so the difference is even? 
          Because: same parity -> difference is even.

        So (A[i][j] - A[j][i]) is divisible by 2? Yes.

        Similarly, the sum is even? By the condition we checked? Actually, we checked the same parity -> the sum is even? Yes.

   Therefore, integer division by 2 is exact.

   Code for output:

        For k=1: we output the matrix A.

        For k=2: we output two matrices:

          Matrix1: 
             for i in range(n):
                 for j in range(n):
                     if i==j: output 0
                     else: output (A[i][j] - A[j][i]) / 2

          Matrix2:
             for i in range(n):
                 for j in range(n):
                     if i==j: output A[i][j]   (which is A[i][i])
                     else: output (A[i][j] + A[j][i]) / 2

   But note: the problem sample:

        Input: 
            2
            1 3
            5 7

        Then we have:

          For (0,0): 1 -> matrix1:0, matrix2:1 -> 0+1=1
          For (0,1): 3 -> matrix1: (3-5)/2 = (-2)/2 = -1
                     matrix2: (3+5)/2 = 8/2 = 4 -> then -1+4=3 -> correct.
          For (1,0): 5 -> matrix1: (5-3)/2 = (2)/2 = 1? 
                    But note: in matrix1 at (1,0): we have (A[1][0] - A[0][1])/2 = (5-3)/2 = 1? 
                    Then at (1,0) in matrix1: 1 -> and at (0,1): -1 -> then |1| = | -1 | -> true.

          However, the sample output:

            Matrix1: 
                1 -1
                1 -1   -> wait, no: the sample output for matrix1 is:

                1 -1
                1 -1   -> but that doesn't match our construction? 

          Actually, the sample output:

                "2
                 1 -1
                 1 -1
                 0 4
                 4 8"

          This sample output does not match our construction.

          Our construction:

            Matrix1: 
                [0, (3-5)/2] = [0, -1]
                [(5-3)/2, 0] = [1, 0]

            Matrix2:
                [1, (3+5)/2] = [1, 4]
                [(5+3)/2, 7] = [4, 7]

          Then the sum of the two matrices:

            Row0: [0+1, -1+4] = [1,3]
            Row1: [1+4, 0+7] = [5,7] -> correct.

          But the sample output for the two matrices are:

            Matrix1: 
                 1 -1
                 1 -1

            Matrix2:
                 0 4
                 4 8

          And the sum:

            Row0: 1+0, -1+4 -> 1, 3 -> correct.
            Row1: 1+4, -1+8 -> 5, 7 -> correct.

          However, note: the problem does not require a unique decomposition. Our decomposition is valid and the sample output is also valid? 

          How did the sample output get that?

          Actually, the problem says: "if there are multiple possible decompositions, SoCCat will be satisfied by any".

          But our decomposition is:

            X1 = [ [0, -1], [1, 0] ]
            X2 = [ [1, 4], [4, 7] ]

          The sample output:

            X1 = [ [1, -1], [1, -1] ]
            X2 = [ [0, 4], [4, 8] ]

          Why is X1 absolutely symmetric?

            For X1: 
               |T0,0| = |1| = 1, |T0,0| = |1| -> same? Actually, for (0,0): 1 and (0,0):1 -> |1|=|1| -> true.
               (0,1): | -1 | = 1, (1,0): |1| = 1 -> true.
               (1,1): | -1 | = 1 -> same? true.

          So X1 is absolutely symmetric? 

          Similarly, X2: 
               (0,0):0, (0,1):4 -> |0|=|0|? and |4|=|4|? 
               (1,0):4 -> |4| = |4| -> true.

          So both decompositions are valid.

          How did they get that? 

          Actually, the problem does not require minimal k? It does: we are to minimize k. But we output k=2. And any two matrices that are absolutely symmetric and sum to A is acceptable.

          Therefore, we can output our decomposition. But note: the problem sample output is provided as an example. We are not required to match the sample output exactly.

          However, the problem says: "if there are multiple, any is acceptable".

          So we output the decomposition as described in the editorial.

          But note: the editorial says:

            Matrix1: off-diagonals: (A[i][j] - A[j][i])/2, diagonals:0.
            Matrix2: off-diagonals: (A[i][j] + A[j][i])/2, diagonals: A[i][i].

          So we output that.

   Therefore, the code:

        #include <iostream>
        #include <vector>
        #include <cmath>
        #include <cctype>
        #include <algorithm>
        using namespace std;

        int main() {
            int n;
            cin >> n;
            vector<vector<long long>> A(n, vector<long long>(n));
            for (int i=0; i<n; i++) {
                for (int j=0; j<n; j++) {
                    cin >> A[i][j];
                }
            }

            // Check the even condition for every i < j: same parity for A[i][j] and A[j][i]
            for (int i=0; i<n; i++) {
                for (int j=i+1; j<n; j++) {
                    // Check the last bit: if they are different -> fail.
                    if ( (A[i][j] & 1) != (A[j][i] & 1) ) {
                        cout << -1 << endl;
                        return 0;
                    }
                }
            }

            // Check absolute symmetry: for every i < j: |A[i][j]| == |A[j][i]|?
            bool abs_sym = true;
            for (int i=0; i<n; i++) {
                for (int j=i+1; j<n; j++) {
                    // We compare the absolute values? But note: the numbers can be negative.
                    if (abs(A[i][j]) != abs(A[j][i])) {
                        abs_sym = false;
                        break;
                    }
                }
                if (!abs_sym) break;
            }

            if (abs_sym) {
                cout << 1 << endl;
                for (int i=0; i<n; i++) {
                    for (int j=0; j<n; j++) {
                        cout << A[i][j];
                        if (j < n-1) cout << " ";
                    }
                    cout << endl;
                }
            } else {
                cout << 2 << endl;
                // Output matrix X1: off-diagonals: (A[i][j]-A[j][i])/2, diagonals:0.
                for (int i=0; i<n; i++) {
                    for (int j=0; j<n; j++) {
                        if (i == j) {
                            cout << 0;
                        } else {
                            long long val = (A[i][j] - A[j][i]) / 2;
                            cout << val;
                        }
                        if (j < n-1) cout << " ";
                    }
                    cout << endl;
                }
                // Output matrix X2: off-diagonals: (A[i][j]+A[j][i])/2, diagonals: A[i][i]
                for (int i=0; i<n; i++) {
                    for (int j=0; j<n; j++) {
                        if (i == j) {
                            cout << A[i][j];
                        } else {
                            long long val = (A[i][j] + A[j][i]) / 2;
                            cout << val;
                        }
                        if (j < n-1) cout << " ";
                    }
                    cout << endl;
                }
            }

            return 0;
        }

   But note: the problem sample input #2:

        Input: 
            2
            0 1
            0 0

        We check: 
          i=0, j=1: A[0][1]=1, A[1][0]=0.
          Parity: 1 is odd, 0 is even -> different -> condition fails -> output -1.

        Correct.

   However, what if the matrix has one element? 

        n=1: 
          Check even condition: no off-diagonal -> skip.
          Then check absolute symmetry: no off-diagonal -> skip -> abs_sym=true -> output k=1 and the single element.

   This is correct.

   But note: what if the matrix has negative numbers? The absolute value check: we use abs() from cmath? 

        #include <cmath> -> but abs for long long? Actually, we should use std::abs? 

        Alternatively, we can use:

            if (llabs(A[i][j]) != llabs(A[j][i]))

        But in C++ we can use:

            #include <cstdlib>
            #include <cmath> 

        But note: for long long, we can use abs from cstdlib? Actually, in C++11 and above, we can use std::abs for long long.

        We are using long long. So:

            #include <cmath> might not be necessary? We can use:

            if (abs(A[i][j]) != abs(A[j][i]))

        But wait: abs for long long? The standard abs in <cstdlib> for integers? Actually, we are using the global namespace? 

        Alternatively, we can use:

            if (A[i][j] == A[j][i] || A[i][j] == -A[j][i]) 

        But note: the condition is |a| = |b|, which is equivalent to a = b or a = -b? Actually, yes.

        So we can also write:

            if (A[i][j] != A[j][i] && A[i][j] != -A[j][i]) 
                then not absolutely symmetric.

        But note: the absolute value condition: |a| = |b| is equivalent to a = b or a = -b.

        So we can do:

            for (int i=0; i<n; i++) {
                for (int j=i+1; j<n; j++) {
                    if (A[i][j] != A[j][i] && A[i][j] != -A[j][i]) {
                        abs_sym = false;
                        break;
                    }
                }
                if (!abs_sym) break;
            }

        This avoids the absolute value function? And might be faster? 

        But note: what if A[j][i] is zero? Then A[i][j] must be zero? 
            Condition: if A[j][i] = 0, then we require A[i][j] = 0 or A[i][j] = -0 -> 0. So only 0.

        So the condition: if A[j][i] is 0, then we require A[i][j] to be 0.

        Alternatively, we can check: 
            if (A[i][j] != A[j][i] && A[i][j] != -A[j][i]) 

        This is equivalent to: 
            if (A[i][j] != A[j][i] && A[i][j] + A[j][i] != 0) 

        But note: if A[j][i] is negative? 

        Actually, we can do:

            if (A[i][j] != A[j][i] && A[i][j] != -A[j][i]) 

        This condition is equivalent to the absolute value condition? 

        Example: 
            a = 3, b = 3 -> then 3==3 -> skip (abs_sym remains true).
            a = 3, b = -3 -> then 3 != -3 -> true? but then 3 == -(-3) -> 3==3 -> false? 
            Actually, condition: 
                if (3 != -3 && 3 != -(-3)) -> 3 != -3 is true, and 3 != 3 is false -> so the whole condition is false -> we skip.

        Actually, we want to set abs_sym = false only when both conditions fail.

        But note: if either condition holds, then the absolute values are equal.

        Therefore, we can do:

            for (int i=0; i<n; i++) {
                for (int j=i+1; j<n; j++) {
                    if (A[i][j] != A[j][i] && A[i][j] != -A[j][i]) {
                        abs_sym = false;
                        break;
                    }
                }
                if (!abs_sym) break;
            }

        But note: what if A[j][i] is a large negative? 

        Actually, we can also do:

            if (abs(A[i][j]) != abs(A[j][i])) 

        This is straightforward.

        However, the problem: abs for long long? 

        In C++, we can use:

            #include <cstdlib>
            #include <cmath> 

        But in C++ for long long, we can use:

            llabs? or in C++11, std::abs works for long long? 

        Let me check: 

            long long x = -1000000000000LL;
            long long y = abs(x);   // This is valid in C++? 

        Actually, in C++ we have:

            long long abs(long long x) { return x < 0 ? -x : x; }

        But we have to be cautious: the standard headers might define it.

        Alternatively, we can use:

            #include <cctype> is not needed.

        We'll do:

            #include <cmath>   // might not be necessary for integers? 
            #include <cstdlib> // for abs? 

        Actually, we can just use:

            if (A[i][j] < 0) then use -A[i][j] else A[i][j]? 

        But simpler: write our own absolute value function? 

        Actually, the standard function abs for long long is available in <cstdlib>? 

        We can try without including anything extra? 

        In practice, in C++ with g++, <iostream> includes many things.

        But to be safe, we can write:

            long long my_abs(long long x) {
                return x < 0 ? -x : x;
            }

        Then use my_abs.

        However, let me check the sample: 
            my_abs(-3) -> 3, my_abs(3) -> 3.

        So:

            for (int i=0; i<n; i++) {
                for (int j=i+1; j<n; j++) {
                    if (my_abs(A[i][j]) != my_abs(A[j][i])) {
                        abs_sym = false;
                        break;
                    }
                }
                if (!abs_sym) break;
            }

   Alternatively, we can rely on the standard abs? 

        Since we are using long long, and the numbers are within 10^9, we can also cast to long and then abs? But that might lose precision? 

        Actually, we are storing in long long. We can use:

            if (llabs(A[i][j]) != llabs(A[j][i]))

        But note: llabs is in C++11? 

        We can use:

            #include <cstdlib>
            using std::llabs;

        But to avoid, we write a simple function.

        Or we can use the ternary operator inline:

            if ( (A[i][j] < 0 ? -A[i][j] : A[i][j]) != (A[j][i] < 0 ? -A[j][i] : A[j][i]) )

        This is safe.

        But for clarity, we'll write:

            long long abs1 = A[i][j] < 0 ? -A[i][j] : A[i][j];
            long long abs2 = A[j][i] < 0 ? -A[j][i] : A[j][i];
            if (abs1 != abs2) ...

        So:

            for (int i=0; i<n; i++) {
                for (int j=i+1; j<n; j++) {
                    long long abs1 = A[i][j];
                    if (abs1 < 0) abs1 = -abs1;
                    long long abs2 = A[j][i];
                    if (abs2 < 0) abs2 = -abs2;
                    if (abs1 != abs2) {
                        abs_sym = false;
                        break;
                    }
                }
                if (!abs_sym) break;
            }

   This is safe and portable.

   Final code:

        #include <iostream>
        #include <vector>
        using namespace std;

        int main() {
            int n;
            cin >> n;
            vector<vector<long long>> A(n, vector<long long>(n));
            for (int i=0; i<n; i++) {
                for (int j=0; j<n; j++) {
                    cin >> A[i][j];
                }
            }

            // Check the even condition: same parity for every off-diagonal pair (i, j) with i<j.
            for (int i=0; i<n; i++) {
                for (int j=i+1; j<n; j++) {
                    if ( (A[i][j] & 1) != (A[j][i] & 1) ) {
                        cout << -1 << endl;
                        return 0;
                    }
                }
            }

            // Check absolute symmetry: for every i<j: |A[i][j]| == |A[j][i]|?
            bool abs_sym = true;
            for (int i=0; i<n; i++) {
                for (int j=i+1; j<n; j++) {
                    long long a = A[i][j];
                    long long b = A[j][i];
                    if (a < 0) a = -a;
                    if (b < 0) b = -b;
                    if (a != b) {
                        abs_sym = false;
                        break;
                    }
                }
                if (!abs_sym) break;
            }

            if (abs_sym) {
                cout << 1 << endl;
                for (int i=0; i<n; i++) {
                    for (int j=0; j<n; j++) {
                        cout << A[i][j];
                        if (j < n-1) cout << " ";
                    }
                    cout << endl;
                }
            } else {
                cout << 2 << endl;
                // Matrix1: diagonals 0, off-diagonals: (A[i][j]-A[j][i])/2
                for (int i=0; i<n; i++) {
                    for (int j=0; j<n; j++) {
                        if (i == j) {
                            cout << 0;
                        } else {
                            long long diff = A[i][j] - A[j][i];
                            // diff is even -> integer division
                            cout << diff/2;
                        }
                        if (j < n-1) cout << " ";
                    }
                    cout << endl;
                }
                // Matrix2: diagonals: A[i][i], off-diagonals: (A[i][j]+A[j][i])/2
                for (int i=0; i<n; i++) {
                    for (int j=0; j<n; j++) {
                        if (i == j) {
                            cout << A[i][i];
                        } else {
                            long long sum_val = A[i][j] + A[j][i];
                            cout << sum_val/2;
                        }
                        if (j < n-1) cout << " ";
                    }
                    cout << endl;
                }
            }

            return 0;
        }

   Let me test with n=1: 
        Input: 
            1
            100
        Output: 
            1
            100   -> correct.

   Test with sample 3: 
        Input: 
            2
            1 3
            5 7

        Matrix1: 
            Row0: 0, (3-5)/2 = -1
            Row1: (5-3)/2=1, 0
            So: 
                0 -1
                1 0

        Matrix2:
            Row0: 1, (3+5)/2=4
            Row1: (5+3)/2=4, 7
            So:
                1 4
                4 7

        Then the sum: 
            [0+1, -1+4] = [1,3]
            [1+4, 0+7] = [5,7] -> correct.

   We output:

        2
        0 -1
        1 0
        1 4
        4 7

   But the sample output was:

        2
        1 -1
        1 -1
        0 4
        4 8

   This is different, but both are valid.

   Therefore, we are done.

   Note: The problem constraints: n<=50, so the above is efficient.

   We output the code accordingly.