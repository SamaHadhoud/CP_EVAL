### Approach
The problem requires finding the maximum damage achievable by a combination spell, which is the bitwise XOR of spells chosen from each spellcaster's available spells (0 to \(a_i\) for the \(i\)-th spellcaster). The solution involves two key insights:

1. **Maximum XOR Value**: The maximum possible XOR of numbers chosen from the intervals \([0, a_i]\) for each spellcaster is the bitwise OR of all \(a_i\) values. This is because:
   - The XOR operation can only set a bit in the result if at least one number in the corresponding sets has that bit set.
   - The bitwise OR of all \(a_i\) values represents the highest value where each bit is set if it is present in any \(a_i\), ensuring it is achievable by selecting appropriate numbers from each set.

2. **Constructing the Assignment**: To achieve the maximum XOR value (the bitwise OR of all \(a_i\)), we need to assign spells to each spellcaster such that:
   - For each bit set in the result, an odd number of spellcasters have that bit set in their chosen spell.
   - Each chosen spell \(x_i\) is within the range \([0, a_i]\).

The approach involves:
1. **Computing the Maximum Damage (T)**: Calculate \(T\) as the bitwise OR of all \(a_i\) values.
2. **Building the Assignment (x_i)**:
   - For each bit position from 0 to 60 (since \(a_i\) can be up to \(10^{18}\)):
     - If the bit is set in \(T\), collect all spellcasters (indices) that can set this bit (i.e., \(a_i\) has this bit set).
     - Ensure the number of selected spellcasters for this bit is odd. If the initial list of indices has even length, remove one index (e.g., the last one) to make it odd.
     - Set this bit in the chosen spells of the selected spellcasters.

### Solution Code
```python
import sys

def main():
    data = sys.stdin.read().split()
    c = int(data[0])
    index = 1
    out_lines = []
    for _ in range(c):
        n = int(data[index]); index += 1
        a = list(map(int, data[index:index+n]))
        index += n
        
        T = 0
        for num in a:
            T |= num
            
        x = [0] * n
        for j in range(61):
            bit = 1 << j
            if T & bit:
                L = []
                for i in range(n):
                    if a[i] & bit:
                        L.append(i)
                if len(L) % 2 == 0:
                    if L:
                        L.pop()
                for i in L:
                    x[i] |= bit
                    
        out_lines.append(str(T))
        out_lines.append(" ".join(map(str, x)))
    
    print("\n".join(out_lines))

if __name__ == "__main__":
    main()
```

### Explanation
1. **Reading Input**: The input is read in one go for efficiency, especially given the constraints.
2. **Processing Each Test Case**:
   - **Compute T (Maximum Damage)**: The bitwise OR of all \(a_i\) values gives the highest achievable XOR result.
   - **Construct Assignment**:
     - For each bit position (0 to 60), check if the bit is set in \(T\).
     - For such bits, collect indices of spellcasters whose \(a_i\) has this bit set.
     - Ensure the number of selected spellcasters is odd (to set the bit in the XOR result). If even, remove one spellcaster (e.g., the last in the list).
     - Set the bit in the chosen spells of the selected spellcasters.
3. **Output Results**: For each test case, output \(T\) (the maximum damage) and the constructed assignment \(x_i\).

This approach efficiently computes the maximum damage by leveraging bit manipulation properties and constructs a valid assignment by ensuring each bit in the result is set by an odd number of spellcasters, while respecting each spellcaster's spell constraints. The solution handles large input sizes within feasible time complexity due to bit-level operations and linear passes over the input.