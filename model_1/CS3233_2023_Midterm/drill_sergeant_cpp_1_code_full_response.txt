To solve this problem, we need to efficiently manage a dynamic line of cat recruits where cats are inserted or removed in sorted order (by their heights). After each operation, we need to compute the sum of discontentment values of all cats in the line. The discontentment of each cat depends on its adjacent cats in the line and predefined dislike relationships.

### Approach
1. **Data Structures**:
   - **Balanced BST (set)**: To maintain the current line of cats in sorted order, allowing efficient insertion, deletion, and neighbor lookups in logarithmic time.
   - **Hash Set (unordered_set)**: To store dislike pairs for constant-time checks. Each dislike pair \((x, y)\) (with \(x < y\)) is stored as a unique key using bit manipulation to avoid overflow.

2. **Operations**:
   - **Insertion**:
     - Find the immediate predecessor and successor of the new cat in the current set.
     - Subtract the current discontentment values of these neighbors.
     - Insert the new cat.
     - Recompute and add the discontentment values of the new cat and its neighbors.
   - **Removal**:
     - Find the immediate predecessor and successor of the cat to be removed.
     - Subtract the current discontentment values of the cat and its neighbors.
     - Remove the cat.
     - Recompute and add the discontentment values of the neighbors (now adjacent to each other).

3. **Discontentment Calculation**:
   - For each cat, determine its neighbors in the line.
   - Based on the dislike relationships with these neighbors, compute its discontentment value (3233, 323, 32, or 3) as per the problem's rules.

### Solution Code
```cpp
#include <iostream>
#include <set>
#include <unordered_set>
#include <vector>
#include <algorithm>
using namespace std;

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);

    long long n;
    int m;
    cin >> n >> m;

    unordered_set<unsigned long long> dislikeSet;
    for (int i = 0; i < m; i++) {
        long long x, y;
        cin >> x >> y;
        if (x > y) swap(x, y);
        unsigned long long key = (static_cast<unsigned long long>(x) << 32) | static_cast<unsigned long long>(y);
        dislikeSet.insert(key);
    }

    auto has_dislike = [&](long long a, long long b) -> bool {
        if (a > b) swap(a, b);
        unsigned long long key = (static_cast<unsigned long long>(a) << 32) | static_cast<unsigned long long>(b);
        return dislikeSet.find(key) != dislikeSet.end();
    };

    set<long long> line;
    long long total = 0;

    auto get_discontentment = [&](long long cat) -> long long {
        auto it = line.find(cat);
        long long prev = -1, next = -1;
        if (it != line.begin()) {
            auto prev_it = it;
            prev_it--;
            prev = *prev_it;
        }
        auto next_it = it;
        next_it++;
        if (next_it != line.end()) {
            next = *next_it;
        }

        if (prev != -1 && next != -1) {
            bool d_prev = has_dislike(cat, prev);
            bool d_next = has_dislike(cat, next);
            if (d_prev && d_next) return 3233;
            else if (d_prev) return 323;
            else if (d_next) return 32;
            else return 3;
        } else if (prev != -1) {
            if (has_dislike(cat, prev)) return 323;
            else return 3;
        } else if (next != -1) {
            if (has_dislike(cat, next)) return 32;
            else return 3;
        } else {
            return 3;
        }
    };

    int q;
    cin >> q;
    vector<long long> results;

    for (int i = 0; i < q; i++) {
        int d;
        long long z;
        cin >> d >> z;

        if (d == 1) {
            auto it = line.lower_bound(z);
            long long prev = -1, next = -1;
            if (it != line.begin()) {
                auto prev_it = it;
                prev_it--;
                prev = *prev_it;
            }
            if (it != line.end()) {
                next = *it;
            }

            if (prev != -1) {
                total -= get_discontentment(prev);
            }
            if (next != -1) {
                total -= get_discontentment(next);
            }

            line.insert(z);
            if (prev != -1) {
                total += get_discontentment(prev);
            }
            if (next != -1) {
                total += get_discontentment(next);
            }
            total += get_discontentment(z);
        } else {
            auto it = line.find(z);
            long long prev = -1, next = -1;
            if (it != line.begin()) {
                auto prev_it = it;
                prev_it--;
                prev = *prev_it;
            }
            auto next_it = it;
            next_it++;
            if (next_it != line.end()) {
                next = *next_it;
            }

            total -= get_discontentment(z);
            if (prev != -1) {
                total -= get_discontentment(prev);
            }
            if (next != -1) {
                total -= get_discontentment(next);
            }

            line.erase(it);

            if (prev != -1) {
                total += get_discontentment(prev);
            }
            if (next != -1) {
                total += get_discontentment(next);
            }
        }
        results.push_back(total);
    }

    for (long long res : results) {
        cout << res << '\n';
    }

    return 0;
}
```

### Explanation
1. **Initialization**: The dislike pairs are stored in a hash set using bit manipulation to form unique keys, ensuring constant-time checks. The line of cats is maintained as a sorted set.
2. **Discontentment Calculation**: For each cat, the function checks its neighbors in the line and uses the dislike set to determine its discontentment value based on predefined rules.
3. **Insertion**: The predecessors and successors of the new cat are identified. Their current discontentment values are subtracted from the total. After insertion, the new discontentment values of the affected cats (including the new cat) are added back.
4. **Removal**: The predecessors and successors of the cat to be removed are identified. The discontentment values of the cat and its neighbors are subtracted. After removal, the neighbors' new discontentment values (now adjacent to each other) are added back.
5. **Efficiency**: Each operation efficiently updates only the affected cats, leveraging logarithmic-time BST operations and constant-time hash lookups, making the solution scalable for large input sizes. The total time complexity is \(O(Q \log K)\), where \(K\) is the maximum number of cats in the line at any time.