To solve this problem, we need to maximize the wealth of the poorest cat in the Cat Kingdom after redistributing wealth such that each cat has at least their specified minimum wealth. The solution involves efficiently determining the maximum possible minimum wealth \( M \) that can be achieved given the constraints.

### Approach
1. **Problem Analysis**: The goal is to ensure every cat has at least their minimum required wealth \( l_i \) while maximizing the wealth of the poorest cat. Wealth can be transferred from cats with wealth strictly greater than their \( l_i \) to other cats, one unit at a time. The total wealth remains constant during redistribution.

2. **Key Insight**: The solution hinges on finding the largest \( M \) such that the sum of \( \max(l_i, M) \) for all cats does not exceed the total wealth \( T \). The function \( S(M) = \sum \max(l_i, M) \) is piecewise linear and non-decreasing, allowing us to evaluate it efficiently over segments defined by distinct values in \( l_i \).

3. **Algorithm Selection**:
   - **Preprocessing**: Compute total wealth \( T \) and sum of minimum wealths \( \text{total}_l \). Sort the list of minimum wealths \( l_i \) and group distinct values with their frequencies.
   - **Segment Processing**: Iterate over distinct values of \( l_i \) in increasing order. For each value \( d \):
     - **Candidate 1 (M = d)**: Check if \( S(d) \leq T \). If feasible, update the best candidate.
     - **Update Cumulative Data**: Include the current distinct value in cumulative frequency and sum.
     - **Candidate 2 (M > d)**: Compute the maximum \( M \) in the segment \( (d, \text{next}_d) \) using the formula \( M = \left\lfloor \frac{T - \text{total}_l + \text{cum\_sum}}{\text{cum\_freq}} \right\rfloor \), bounded by the next distinct value. If feasible, update the best candidate.

### Solution Code
```python
import sys

def main():
    data = sys.stdin.read().split()
    if not data:
        return
    t = int(data[0])
    index = 1
    results = []
    for _ in range(t):
        n = int(data[index])
        index += 1
        w = list(map(int, data[index:index+n]))
        index += n
        l_list = list(map(int, data[index:index+n]))
        index += n
        
        total_wealth = sum(w)
        total_l = sum(l_list)
        l_list.sort()
        distinct = []
        freqs = []
        i = 0
        n_val = len(l_list)
        while i < n_val:
            j = i
            while j < n_val and l_list[j] == l_list[i]:
                j += 1
            distinct.append(l_list[i])
            freqs.append(j - i)
            i = j
        
        cum_freq = 0
        cum_sum = 0
        best = 0
        num_distinct = len(distinct)
        
        for j in range(num_distinct):
            d = distinct[j]
            S_d = total_l + d * cum_freq - cum_sum
            if S_d <= total_wealth:
                if d > best:
                    best = d
            
            count_here = freqs[j]
            cum_freq += count_here
            cum_sum += d * count_here
            
            num = total_wealth - total_l + cum_sum
            candidate_seg = num // cum_freq
            
            if j < num_distinct - 1:
                next_d = distinct[j+1]
                candidate_val = candidate_seg
                if candidate_val > next_d - 1:
                    candidate_val = next_d - 1
            else:
                candidate_val = candidate_seg
                
            if candidate_val > d:
                if candidate_val > best:
                    best = candidate_val
                    
        results.append(str(best))
    
    print("\n".join(results))

if __name__ == '__main__':
    main()
```

### Explanation
1. **Reading Input**: The input is read in bulk for efficiency, especially given the constraints.
2. **Processing Each Test Case**:
   - **Total Wealth Calculation**: The sum of all cats' wealth \( T \) and the sum of their minimum wealth requirements \( \text{total}_l \) are computed.
   - **Sorting and Grouping**: The list \( l \) (minimum wealths) is sorted, and distinct values along with their frequencies are extracted.
3. **Segment Evaluation**:
   - For each distinct value \( d \), the algorithm checks if setting \( M = d \) is feasible (i.e., \( S(d) \leq T \)).
   - The cumulative frequency and sum of \( l_i \) values up to \( d \) are updated.
   - The maximum feasible \( M \) in the segment \( (d, \text{next}_d) \) is computed using integer division, capped by the next distinct value.
4. **Result Compilation**: The maximum feasible \( M \) across all segments is tracked and stored as the result for each test case.
5. **Output**: Results for all test cases are printed at the end.

This approach efficiently narrows down the search for the optimal \( M \) by leveraging sorted distinct values and their cumulative properties, ensuring optimal performance even for large inputs.