To solve this problem, we need to determine the final score of a game played on a row of cells where two players take turns moving a token. The first player aims to maximize the score, while the second player aims to minimize it. The solution involves dynamic programming with optimizations to handle large inputs efficiently.

### Approach
1. **Problem Analysis**: The game involves moving a token from a starting cell `s` to subsequent cells by choosing multiples of the current cell's value `p_i`. The score is incremented by the value `a_i` of each visited cell. The goal is to compute the optimal final score for each starting position from 1 to `n`, assuming both players play optimally.

2. **Dynamic Programming (DP) Setup**: We use two DP arrays:
   - `dp0[i]` represents the optimal score when starting at cell `i` and it's the maximizer's turn.
   - `dp1[i]` represents the optimal score when starting at cell `i` and it's the minimizer's turn.

3. **Transition Handling**:
   - **Small Steps (p_i ≤ S)**: For small step sizes, we use precomputed residue arrays to efficiently track the best values for transitions. For each modulus `d` (1 to S), we maintain arrays storing the maximum `dp1[j]` and minimum `dp0[j]` values for residues `0` to `d-1`.
   - **Large Steps (p_i > S)**: For larger step sizes, we directly iterate over valid multiples of `p_i` to compute the best values for transitions, leveraging the fact that the number of multiples is limited (O(n / p_i)).

4. **Processing Order**: Cells are processed from right to left (n down to 1) to ensure dependencies (future moves) are resolved before current cells.

5. **Complexity Optimization**: Using a threshold `S = 10` balances between precomputation (residue arrays) and direct iteration (large steps), ensuring the solution handles the constraints efficiently. The total complexity is O(n * S + n log n) per test case, which is feasible given the problem constraints.

### Solution Code
```python
import sys

INF = 10**18
NEG_INF = -10**18
S = 10

def main():
    data = sys.stdin.read().split()
    t = int(data[0])
    index = 1
    out_lines = []
    for _ in range(t):
        n = int(data[index])
        index += 1
        p = list(map(int, data[index:index + n]))
        index += n
        a_list = list(map(int, data[index:index + n]))
        index += n

        max1_list = [None]
        min0_list = [None]
        for d in range(1, S + 1):
            max1_list.append([NEG_INF] * d)
            min0_list.append([INF] * d)
        
        dp0 = [0] * (n + 1)
        dp1 = [0] * (n + 1)
        
        for i in range(n, 0, -1):
            a_i = a_list[i - 1]
            d_val = p[i - 1]
            candidate0 = None
            candidate1 = None
            
            if d_val <= S:
                r = i % d_val
                if max1_list[d_val][r] > NEG_INF:
                    candidate0 = max1_list[d_val][r]
                    candidate1 = min0_list[d_val][r]
            else:
                j = i + d_val
                c0 = NEG_INF
                c1 = INF
                found = False
                while j <= n:
                    found = True
                    if dp1[j] > c0:
                        c0 = dp1[j]
                    if dp0[j] < c1:
                        c1 = dp0[j]
                    j += d_val
                if found:
                    candidate0 = c0
                    candidate1 = c1
            
            if candidate0 is not None:
                dp0[i] = max(a_i, a_i + candidate0)
                dp1[i] = min(a_i, a_i + candidate1)
            else:
                dp0[i] = a_i
                dp1[i] = a_i
            
            for d in range(1, S + 1):
                r = i % d
                if dp1[i] > max1_list[d][r]:
                    max1_list[d][r] = dp1[i]
                if dp0[i] < min0_list[d][r]:
                    min0_list[d][r] = dp0[i]
        
        res_arr = [str(dp0[i]) for i in range(1, n + 1)]
        out_lines.append(" ".join(res_arr))
    
    sys.stdout.write("\n".join(out_lines))

if __name__ == "__main__":
    main()
```

### Explanation
1. **Initialization**: The input is read in bulk for efficiency. For each test case, the number of cells `n`, the permutation `p`, and the values `a` are read.
2. **Residue Arrays**: For small step sizes (≤ 10), we initialize arrays to store the best values (`max1_list` for `dp1` and `min0_list` for `dp0`) for each residue class modulo `d` (1 to 10).
3. **Dynamic Programming Processing**: Cells are processed from right to left. For each cell `i`:
   - **Small Steps**: If the step size `p_i` is ≤ 10, the best values from the residue arrays are used to determine the next moves.
   - **Large Steps**: For step sizes > 10, we directly iterate over valid multiples of `p_i` to compute the best values.
   - **DP Update**: Based on the best values found, `dp0[i]` (maximizer's turn) and `dp1[i]` (minimizer's turn) are updated.
   - **Residue Arrays Update**: The residue arrays are updated with the current cell's values for future use.
4. **Output**: After processing all cells, the results for each starting position (from 1 to `n`) are collected and printed.

This approach efficiently handles the constraints by leveraging dynamic programming and residue-based optimizations, ensuring optimal play from both players is computed for each starting position.