To solve this problem, we need to determine the maximum damage that can be dealt by a combination spell, which is the bitwise XOR of spells chosen from each spellcaster's available spells (0 to \(a_i\) for the \(i\)-th spellcaster). The solution involves two main steps: calculating the maximum possible XOR value and constructing an assignment of spells to each spellcaster to achieve this value.

### Approach
1. **Calculate Maximum Damage (T)**: The maximum possible XOR value of numbers chosen from the intervals \([0, a_i]\) for each spellcaster is the bitwise OR of all \(a_i\) values. This is because the XOR operation can only set a bit in the result if at least one number in the corresponding sets has that bit set. The bitwise OR of all \(a_i\) values represents the highest value where each bit is set if it is present in any \(a_i\), ensuring it is achievable by selecting appropriate numbers from each set.

2. **Construct the Assignment (x_i)**: For each bit position from 0 to 60 (since \(a_i\) can be up to \(10^{18}\)), if the bit is set in \(T\), we collect all spellcasters (indices) that can set this bit (i.e., \(a_i\) has this bit set). To ensure the XOR result has this bit set, the number of selected spellcasters for this bit must be odd. If the initial list of indices has an even length, we remove one index (e.g., the last one) to make it odd. We then set this bit in the chosen spells of the selected spellcasters.

### Solution Code
```python
import sys

def main():
    data = sys.stdin.read().split()
    c = int(data[0])
    index = 1
    out_lines = []
    for _ in range(c):
        n = int(data[index]); index += 1
        a = list(map(int, data[index:index+n]))
        index += n
        
        T = 0
        for num in a:
            T |= num
            
        x = [0] * n
        for j in range(61):
            bit = 1 << j
            if T & bit:
                L = []
                for i in range(n):
                    if a[i] & bit:
                        L.append(i)
                if len(L) % 2 == 0:
                    if L:
                        L.pop()
                for idx in L:
                    x[idx] |= bit
                    
        out_lines.append(str(T))
        out_lines.append(" ".join(map(str, x)))
    
    print("\n".join(out_lines))

if __name__ == "__main__":
    main()
```

### Explanation
1. **Reading Input**: The input is read all at once for efficiency, especially given the constraints. The first value is the number of test cases \(C\).
2. **Processing Each Test Case**:
   - **Compute T (Maximum Damage)**: The bitwise OR of all \(a_i\) values gives the highest achievable XOR result.
   - **Construct Assignment**:
     - For each bit position (0 to 60), check if the bit is set in \(T\).
     - Collect indices of spellcasters whose \(a_i\) has this bit set.
     - Ensure the number of selected spellcasters is odd by removing one index if necessary (e.g., the last one in the list).
     - Set the bit in the chosen spells of the selected spellcasters.
3. **Output Results**: For each test case, output \(T\) (the maximum damage) and the constructed assignment \(x_i\).

This approach efficiently computes the maximum damage by leveraging bit manipulation properties and constructs a valid assignment by ensuring each bit in the result is set by an odd number of spellcasters, while respecting each spellcaster's spell constraints. The solution handles large input sizes within feasible time complexity due to bit-level operations and linear passes over the input.