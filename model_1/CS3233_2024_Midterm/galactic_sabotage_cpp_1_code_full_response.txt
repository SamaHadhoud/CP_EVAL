To solve this problem, we need to determine the maximum number of contiguous segments (boxes) into which Team Galactic can split Pichuu's Pokémon such that Pichuu can still sort the entire sequence using the AutoSort function on each box. The key insight is recognizing that the problem reduces to counting the number of indices \(i\) (from 1 to \(N\)) where the prefix maximum up to \(i\) equals \(i\). This condition ensures that the segment from the start to \(i\) contains all integers from 1 to \(i\), allowing it to be sorted independently.

### Approach
1. **Initial Setup**:
   - Read the input values for the number of Pokémon \(N\) and the number of swaps \(M\).
   - Initialize the array \(A\) representing the desired positions of the Pokémon.
   - Compute the prefix maximum array \(P\) where \(P[i]\) is the maximum value in the subarray \(A[1..i]\).
   - Determine the initial count of indices \(i\) where \(P[i] = i\), which gives the initial number of valid splits.

2. **Handling Swaps**:
   - For each swap operation between positions \(u\) and \(v\):
     - Update the array \(A\) by swapping the elements at positions \(u\) and \(v\).
     - Recompute the prefix maxima starting from the minimum of the swapped positions to the end of the array. This is because swapping elements can affect the prefix maxima from the point of swap onwards.
     - During recomputation, if the current prefix maximum becomes \(N\) (the largest value) at position \(i\) (where \(i < N\)), we can optimize by breaking early. This is because all subsequent prefix maxima will be \(N\), and only the last position \(N\) will satisfy \(P[N] = N\).
     - Adjust the count of valid splits by checking if the recomputed prefix maxima at each position \(i\) equals \(i\).

### Solution Code
```cpp
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);

    int n, m;
    cin >> n >> m;

    vector<int> A(n+1);
    for (int i = 1; i <= n; i++) {
        cin >> A[i];
    }

    vector<int> P(n+1, 0);
    vector<int> break_cond(n+1, 0);
    int total = 0;

    P[0] = 0;
    for (int i = 1; i <= n; i++) {
        P[i] = max(P[i-1], A[i]);
        if (P[i] == i) {
            break_cond[i] = 1;
            total++;
        } else {
            break_cond[i] = 0;
        }
    }

    vector<int> output;
    output.push_back(total);

    for (int idx = 0; idx < m; idx++) {
        int u, v;
        cin >> u >> v;

        swap(A[u], A[v]);

        int start = min(u, v);
        int current_max = (start > 1) ? P[start-1] : 0;
        bool encountered_n = false;

        for (int i = start; i <= n; i++) {
            current_max = max(current_max, A[i]);
            P[i] = current_max;
            
            if (!encountered_n && current_max == n && i < n) {
                encountered_n = true;
                int new_cond = (current_max == i) ? 1 : 0;
                if (new_cond != break_cond[i]) {
                    if (break_cond[i]) {
                        total--;
                    } else {
                        total++;
                    }
                    break_cond[i] = new_cond;
                }
                for (int j = i+1; j < n; j++) {
                    if (break_cond[j] == 1) {
                        total--;
                        break_cond[j] = 0;
                    }
                }
                if (break_cond[n] != 1) {
                    total++;
                    break_cond[n] = 1;
                }
                for (int j = i+1; j <= n; j++) {
                    P[j] = n;
                }
                break;
            } else {
                int new_cond = (current_max == i) ? 1 : 0;
                if (new_cond != break_cond[i]) {
                    if (break_cond[i]) {
                        total--;
                    } else {
                        total++;
                    }
                    break_cond[i] = new_cond;
                }
            }
        }

        if (!encountered_n) {
            if (break_cond[n] != 1) {
                total++;
                break_cond[n] = 1;
            }
        }

        output.push_back(total);
    }

    for (int val : output) {
        cout << val << '\n';
    }

    return 0;
}
```

### Explanation
1. **Initial Setup**:
   - The array \(A\) is read, and the prefix maximum array \(P\) is computed. For each position \(i\), if \(P[i]\) equals \(i\), it signifies a valid split point, and the count of such points is stored in `total`.

2. **Handling Swaps**:
   - For each swap, the elements at positions \(u\) and \(v\) in \(A\) are swapped.
   - The prefix maxima are recomputed starting from the minimum of the swapped positions. If during recomputation the current prefix maximum becomes \(N\) (indicating the largest value) at position \(i\) (where \(i < N\)), the loop breaks early. This is because subsequent prefix maxima will remain \(N\), and only the last position \(N\) will satisfy \(P[N] = N\).
   - The count of valid splits is adjusted by checking each position during recomputation. Positions from \(i+1\) to \(N-1\) are set to invalid splits (since their prefix maxima is \(N\), which does not equal their indices), and position \(N\) is ensured to be a valid split.

3. **Output**:
   - The initial count of valid splits and the count after each swap are stored in the output vector and printed at the end.

This approach efficiently handles each swap by focusing on the affected segment of the array, leveraging early termination when possible, and maintaining the count of valid splits dynamically. The complexity is \(O(N)\) per swap in the worst case, which is manageable given the constraints.