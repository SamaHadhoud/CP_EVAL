To solve this problem, we need to find the top `l` largest happiness ratings (sums) from all possible combinations of selecting exactly `k` objects out of `n` objects, each with a given happiness rating. Given the constraints where `n` and `l` can be as large as 1,000,000, a brute-force approach is infeasible. Instead, we use a priority queue (max-heap) to efficiently generate the top sums without exploring all combinations.

### Approach
1. **Sorting and Initial Setup**: 
   - Sort the happiness ratings in descending order to prioritize higher values.
   - Compute the initial maximum sum by selecting the top `k` elements.

2. **Priority Queue (Max-Heap) Initialization**:
   - For each element in the initial top `k` elements, generate a state where that element is swapped with the first unselected element (at index `k`). Push these states into the max-heap (simulated using a min-heap with negative values).

3. **Processing States**:
   - Extract the largest sum from the heap. For each extracted state:
     - **Option 1**: Replace the last added unselected element with the next unselected element (if available) to generate a new state with the same depth.
     - **Option 2**: Replace the next element in the initial selection (if available) with the next unselected element (if available) to generate a new state with an increased depth.
   - Use a set to track visited states (identified by indices and depth) to avoid duplicates.

4. **Output Handling**:
   - Output the extracted sums. If fewer than `l` sums are generated, output `-1` for the remaining.

### Solution Code
```python
import heapq
import sys

def main():
    data = sys.stdin.read().split()
    if not data:
        return
    
    n = int(data[0])
    k = int(data[1])
    l_val = int(data[2])
    a = list(map(int, data[3:3+n]))
    
    a.sort(reverse=True)
    base = sum(a[:k])
    res = [base]
    
    if k < n:
        heap = []
        seen = set()
        for i in range(k-1, -1, -1):
            new_sum = base - a[i] + a[k]
            state = (i, k, 1)
            heapq.heappush(heap, (-new_sum, i, k, 1))
        
        while len(res) < l_val and heap:
            neg_val, i, j, depth = heapq.heappop(heap)
            if (i, j, depth) in seen:
                continue
            seen.add((i, j, depth))
            current_sum = -neg_val
            res.append(current_sum)
            if len(res) == l_val:
                break
                
            if j + 1 < n:
                new_sum1 = current_sum - a[j] + a[j+1]
                new_state1 = (i, j+1, depth)
                heapq.heappush(heap, (-new_sum1, i, j+1, depth))
                
            if i - 1 >= 0 and j + 1 < n:
                new_sum2 = current_sum - a[i-1] + a[j+1]
                new_state2 = (i-1, j+1, depth+1)
                heapq.heappush(heap, (-new_sum2, i-1, j+1, depth+1))
                
    for i in range(l_val):
        if i < len(res):
            print(res[i])
        else:
            print(-1)

if __name__ == '__main__':
    main()
```

### Explanation
1. **Input Parsing and Initialization**:
   - The input is read and parsed into `n` (number of objects), `k` (number of objects to select), `l_val` (number of top sums to find), and the list of happiness ratings `a`.
   - The list `a` is sorted in descending order to prioritize higher values.

2. **Base Sum Calculation**:
   - The initial maximum sum (`base`) is computed as the sum of the first `k` elements in the sorted list.

3. **Heap Initialization**:
   - For each element in the initial top `k` elements, a state is created where this element is swapped with the first unselected element (at index `k`). Each state (with its sum, indices, and depth) is pushed into a min-heap (simulated as a max-heap using negative values).

4. **State Processing**:
   - The largest sum is repeatedly extracted from the heap. For each state:
     - **Option 1**: The last added unselected element is replaced with the next unselected element (if available), generating a new state with the same depth.
     - **Option 2**: The next element in the initial selection is replaced with the next unselected element (if available), generating a new state with an increased depth.
   - A set tracks visited states to avoid reprocessing the same state.

5. **Output**:
   - The top `l_val` sums are printed. If fewer than `l_val` sums are generated, `-1` is printed for the remaining values.

This approach efficiently generates the top sums by leveraging a priority queue and avoids the combinatorial explosion by systematically exploring only the most promising states. The complexity is dominated by sorting (O(n log n)) and heap operations (O(l_val log l_val)), making it suitable for large inputs.