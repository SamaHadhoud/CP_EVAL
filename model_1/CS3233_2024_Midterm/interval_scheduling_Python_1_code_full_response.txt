To solve this problem, we need to maximize the length of the shortest time interval across all waves in a restaurant's staggered seating plan while adhering to specific constraints. The constraints are that each amended interval must include the original interval, the opening and closing times of the restaurant remain unchanged, and the intervals must be non-overlapping.

### Approach
1. **Problem Analysis**: The problem requires adjusting each time interval such that the shortest interval is as long as possible. The intervals must be extended (not shortened) to include their original intervals, and the start of the first interval and end of the last interval must remain unchanged. The solution involves finding the largest possible minimum interval length \( L \) such that all constraints are satisfied.

2. **Binary Search**: We use binary search to determine the maximum feasible \( L \). The search space for \( L \) ranges from 0 to the total duration between the opening and closing times of the restaurant.

3. **Feasibility Check**: For each candidate \( L \) during the binary search, we check if it's possible to adjust the intervals such that:
   - Each interval has a length of at least \( L \).
   - The start of the first interval and end of the last interval remain unchanged.
   - Each amended interval includes its original interval.
   - The intervals are non-overlapping.

4. **Backward Propagation**: The feasibility check is performed by processing intervals from last to first. For each interval, we set its start to the minimum of its original start or the next interval's start minus \( L \). The end is set to the maximum of its original end or its start plus \( L \). This ensures the interval meets the length requirement and includes the original interval. The end of each interval must not exceed the start of the next interval to maintain non-overlapping property.

5. **Reconstruction**: Once the maximum feasible \( L \) is found, we reconstruct the schedule using the same backward propagation method to determine the start and end times of each interval.

### Solution Code
```python
def main():
    import sys
    data = sys.stdin.read().splitlines()
    n = int(data[0].strip())
    intervals = []
    for i in range(1, n + 1):
        line = data[i].strip()
        parts = line.split(' - ')
        start_str = parts[0].strip()
        end_str = parts[1].strip()
        intervals.append((start_str, end_str))
    
    def to_minutes(time_str):
        h, m = time_str.split(':')
        return int(h) * 60 + int(m)
    
    def to_time(minutes):
        h = minutes // 60
        m = minutes % 60
        return f"{h:02d}:{m:02d}"
    
    starts = []
    ends = []
    for start, end in intervals:
        starts.append(to_minutes(start))
        ends.append(to_minutes(end))
    
    first_start = starts[0]
    last_end = ends[-1]
    
    def feasible(L):
        S = [0] * n
        E = [0] * n
        S[-1] = min(starts[-1], last_end - L)
        E[-1] = max(ends[-1], S[-1] + L)
        if E[-1] != last_end:
            return False
        
        for i in range(n-2, -1, -1):
            S[i] = min(starts[i], S[i+1] - L)
            E[i] = max(ends[i], S[i] + L)
            if E[i] > S[i+1]:
                return False
        
        if S[0] != first_start:
            return False
        
        return True
    
    low = 0
    high = last_end - first_start
    ans_L = 0
    while low <= high:
        mid = (low + high) // 2
        if feasible(mid):
            ans_L = mid
            low = mid + 1
        else:
            high = mid - 1
    
    S_opt = [0] * n
    E_opt = [0] * n
    S_opt[-1] = min(starts[-1], last_end - ans_L)
    E_opt[-1] = max(ends[-1], S_opt[-1] + ans_L)
    for i in range(n-2, -1, -1):
        S_opt[i] = min(starts[i], S_opt[i+1] - ans_L)
        E_opt[i] = max(ends[i], S_opt[i] + ans_L)
    
    output_lines = []
    for i in range(n):
        start_time = to_time(S_opt[i])
        end_time = to_time(E_opt[i])
        output_lines.append(f"{start_time} - {end_time}")
    
    for line in output_lines:
        print(line)

if __name__ == '__main__':
    main()
```

### Explanation
1. **Input Parsing**: The input is read and parsed into start and end times for each interval, converted into minutes for easier manipulation.
2. **Binary Search Setup**: The binary search is initialized with `low` set to 0 and `high` set to the total duration between the restaurant's opening and closing times.
3. **Feasibility Check**: For each midpoint \( L \) in the binary search, the function checks if it's possible to adjust the intervals such that:
   - The last interval's end remains fixed, and its start is adjusted to ensure a minimum length \( L \).
   - Each preceding interval's start is set to the minimum of its original start or the next interval's start minus \( L \), and its end is set to the maximum of its original end or its start plus \( L \).
   - The end of each interval does not exceed the start of the next interval.
   - The start of the first interval matches the original opening time.
4. **Reconstruction**: Once the maximum feasible \( L \) is found, the schedule is reconstructed using the same backward propagation method to determine the optimal start and end times for each interval.
5. **Output**: The adjusted intervals are converted back to "HH:MM" format and printed.

This approach efficiently maximizes the shortest interval length while adhering to all constraints, ensuring optimal and correct scheduling for the restaurant's staggered seating plan.