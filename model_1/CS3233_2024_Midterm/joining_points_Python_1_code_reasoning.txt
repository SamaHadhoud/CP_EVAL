 We are going to follow the editorial guidelines exactly.

 Steps:
 1. Read the input and store the points. Also, compute min_x, max_x, min_y, max_y.
 2. Compute s1 = max_x - min_x, s2 = max_y - min_y, and s0 = max(s1, s2).
 3. Generate 8 candidate squares as described.

 However, note: the editorial says 8 candidates, but actually we have:
   - 4 candidates for the four corners with side s0 (so that the square covers the bounding box with side s0).
   - Then 2 candidates for when s1 >= s2: 
        (min_x, max_x, min_y, min_y + s1)   -> bottom and top are at min_y and min_y+s1? But wait: the side must be s1, and we have fixed left=min_x, right=max_x. Then the height must be s1. So the square can be either [min_x, max_x] in x and [min_y, min_y+s1] in y OR [min_x, max_x] in x and [max_y-s1, max_y] in y.
   - Similarly, 2 candidates for when s2 >= s1: 
        (min_x, min_x+s2, min_y, max_y) and (max_x-s2, max_x, min_y, max_y)

 But note: the condition "s1>=s2" and "s2>=s1" are both true when s1==s2, so then we get 4 extra candidates? Actually, we generate 4 extra in that case. But total candidates: 4 (from the first set) + 4 (from the two conditionals) = 8.

 However, in the first set we already have:
   candidate1: (min_x, min_x+s0, min_y, min_y+s0) -> if s0 = s1 (because s1>=s2) then s0=s1, and then we have min_x to min_x+s1, which is not the same as min_x to max_x (unless max_x = min_x+s1, which is true). Similarly, in candidate1 the y-range is min_y to min_y+s0, which is min_y to min_y+s1, which might be different from min_y to max_y if s1>s2.

 Actually, the first set of 4 candidates are squares that have side length s0, and they are positioned so that they cover the entire bounding box. But note: in candidate1, the square goes from min_x to min_x+s0 and min_y to min_y+s0. This square must cover the entire bounding box? It does because s0>=s1 and s0>=s2.

 However, the points must lie on the border. So we have to check that.

 4. For each candidate, we check every point: 
        if the point's x is either x1 or x2, or the point's y is either y1 or y2 -> then it's on the border.

 5. If we find a candidate that satisfies all points, output it and return.
 6. If none works, output "Impossible".

 But note: the problem allows degenerate squares (zero area). That case is covered because if all points are the same, then min_x = max_x and min_y = max_y, so s0=0. Then candidate1: (min_x, min_x, min_y, min_y). Then each point (x,y) must satisfy: x==min_x or x==min_x? and same for y. Since min_x==max_x and min_y==max_y, then each point must have x=min_x and y=min_y? Actually, if the point is (min_x, min_y), then it satisfies because x==min_x and also y==min_y. So it's valid.

 However, what if we have two points: (0,0) and (1,1). Then:
   min_x=0, max_x=1, min_y=0, max_y=1 -> s1=1, s2=1, s0=1.
   candidate1: (0,1,0,1) -> then the square has borders: x=0, x=1, y=0, y=1. The points: (0,0) -> on border (x=0 and y=0). (1,1) -> on border (x=1 and y=1). So valid.

 But what about a point that is not at a corner? For example, (0,1) in a square from (0,0) to (1,1): the point (0,1) is on the left border (x=0) and the top border (y=1). So it's valid.

 However, consider a point that is strictly inside the square but not on the border? Then we skip that candidate.

 But note: the problem says "All of the points must lie on the border".

 Implementation note: We generate 8 candidates, but if s0==0 (all points same) then we only need one candidate? Actually, the first candidate will work. Also, when s1==s2, we generate 8 candidates? But that's acceptable since 8 is constant.

 However, we can avoid duplicates? But the problem says "any" so we can output the first one we find.

 But note: the constraints for output: 
        -10^9 <= X1 <= X2 <= 10^9 and -10^9 <= Y1 <= Y2 <= 10^9.

 Our candidates:
        For candidate1: (min_x, min_x+s0, min_y, min_y+s0) -> since s0>=0, then min_x <= min_x+s0 and min_y<=min_y+s0, so it satisfies.

        Similarly for the others.

 However, note: in candidate2: (min_x, min_x+s0, max_y-s0, max_y). Since s0>=max_y-min_y? Actually, s0 = max(s1, s2) and s2 = max_y-min_y, so s0>=s2, so max_y-s0 <= max_y - s2 = min_y? and then we have min_x to min_x+s0 and min_y to max_y? Actually, no: we have max_y-s0 to max_y. Since s0>=s2, then max_y-s0 <= min_y? because s0>=s2 => s0>=max_y-min_y => max_y-s0 <= min_y. So the y-range is [max_y-s0, max_y] and since max_y-s0 <= min_y, then the entire bounding box in y is contained? But the point might have y=min_y, and then we require that the point is on the border. However, the border of the square in y is only at y=max_y-s0 and y=max_y. So the point at min_y must be on the border? 

 But note: min_y is at least max_y-s0? Actually, we have min_y <= max_y-s0? because max_y-s0 <= min_y? So min_y must be >= max_y-s0? and we know min_y <= max_y. But also we know that min_y >= max_y - s2 (by definition s2 = max_y-min_y) and s0>=s2, so max_y-s0 <= max_y-s2 = min_y. Therefore, min_y = max_y-s0? Not necessarily: if s0 > s2, then max_y-s0 < min_y. Then the point (x, min_y) would have y = min_y, which is below the square's bottom border (which is max_y-s0) and above the top border (max_y) ? So it might not be in the square at all.

 Correction: Actually, the square must cover all the points? The problem says: "connect all the points" and "the resulting shape is a square", meaning the square must enclose the points? But note: the points must lie on the border. The border is the four sides. So the square must be large enough to include the points.

 However, in candidate2: 
   The square is from x in [min_x, min_x+s0] and y in [max_y-s0, max_y].
   For a point (x, min_y): 
        We know min_y <= max_y (obviously) and since s0>=s2 = max_y - min_y, then min_y = max_y - s2 >= max_y - s0? Actually, we have:
            min_y = max_y - s2, and s0>=s2 -> max_y-s0 <= min_y.
        Therefore, the y-coordinate of the point (min_y) is at least max_y-s0. So the point is in the square? But the square's bottom border is at y = max_y-s0. So the point must be at y = max_y-s0? Or above? 

        Actually, the point at min_y must lie on the border. The borders of the square are:
            left: x = min_x
            right: x = min_x+s0
            bottom: y = max_y-s0
            top: y = max_y

        So the point (x, min_y) must have either x at min_x or min_x+s0, or y at max_y-s0 or max_y. But note: if min_y > max_y-s0 (which happens when s0>s2) then the point (x, min_y) is strictly above the bottom border? Then it must be on the top border? But the top border is max_y, and min_y < max_y (unless s2=0) so if s0>s2, then min_y is strictly between max_y-s0 and max_y? Then the point is not on the border? 

 Therefore, candidate2 might not be valid if there is a point with y=min_y and s0>s2? Similarly, candidate1 might not be valid if there is a point with y=max_y and s0>s2? Because in candidate1 the top border is at min_y+s0, which is min_y+s0 = min_y + s0. Since s0>s2, then min_y+s0 > min_y+s2 = max_y? Then the point at max_y is below the top border? Actually, no: the top border of candidate1 is at min_y+s0, and we have min_y+s0 >= min_y+s2 = max_y, so the point at max_y is at the top border? Only if min_y+s0 = max_y? But if s0>s2, then min_y+s0 > max_y. Then the point at max_y is not at the top border? It is below? Then it must lie on the left or right border? 

 But the point at (x, max_y) must have x either min_x or min_x+s0? That might not be the case.

 Therefore, the first four candidates are only valid if the entire bounding box is contained and the points on the extremes of the bounding box lie on the borders of the square. But the square we build has borders that are aligned with the extremes? Not necessarily: candidate1 has left border at min_x and bottom at min_y, but the top border is at min_y+s0 which is above max_y (if s0>s2) and the right border is at min_x+s0 which is to the right of max_x (if s0>s1). 

 However, the problem does not require that the square is exactly the bounding box. The square can be larger. But the condition is: each point must be on at least one border. 

 So in candidate1: 
   The borders are:
        x = min_x
        x = min_x+s0
        y = min_y
        y = min_y+s0

   For a point (x, y):
        if x==min_x -> valid
        if x==min_x+s0 -> valid
        if y==min_y -> valid
        if y==min_y+s0 -> valid

   The point (max_x, max_y) must be in the square? Actually, we know min_x<=max_x<=min_x+s0 (because s0>=s1) and min_y<=max_y<=min_y+s0 (because s0>=s2). But the point (max_x, max_y) is inside the square. But if it is not on the border? Then we require that max_x is either min_x or min_x+s0? Or max_y is either min_y or min_y+s0? 

   But note: max_x might not be min_x and might not be min_x+s0? Similarly, max_y might not be min_y and might not be min_y+s0? Then the candidate fails.

 Therefore, the first four candidates are only valid if the extreme points (min_x, min_y), (min_x, max_y), (max_x, min_y), (max_x, max_y) are the only ones? But we have many points. We must check every point.

 Example: Sample Input #1: 
        Points: (7,6), (2,4), (4,0)

        min_x = 2, max_x=7 -> s1=5
        min_y=0, max_y=6 -> s2=6 -> s0=6.

        Candidate1: (2, 2+6=8, 0, 0+6=6) -> square from (2,0) to (8,6)

        Check:
          (7,6): x=7 -> not 2 or 8? y=6 -> on the top border? yes (y=6) -> valid.
          (2,4): x=2 -> left border -> valid.
          (4,0): y=0 -> bottom border -> valid.

        So candidate1 works.

        But what about candidate5? Since s1=5 and s2=6, s2>=s1 -> we generate two candidates for that:
            candidate7: (min_x, min_x+s2, min_y, max_y) = (2, 2+6=8, 0, 6) -> same as candidate1? 
            candidate8: (max_x-s2, max_x, min_y, max_y) = (7-6=1, 7, 0, 6) -> square from (1,0) to (7,6)

            Check (7,6): x=7 -> right border -> valid.
            (2,4): x=2 -> not 1 or 7? y=4 -> not 0 or 6? -> invalid.

        So candidate8 fails.

        Candidate1 is the one we output.

 Another sample: Input #2: 
        4 points: (2,6), (8,8), (10,2), (3,3)

        min_x=2, max_x=10 -> s1=8
        min_y=2, max_y=8 -> s2=6 -> s0=8.

        Candidate1: (2,10,2,10) -> because 2+8=10? Actually, the square is (2,10) in x and (2,10) in y? But wait: the square should be (2,10) in x and (2,2+8)= (2,10) in y? So from (2,2) to (10,10).

        Check the points:
          (2,6): x=2 -> valid.
          (8,8): (8,8) -> is 8 in [2,10] for both. But is it on the border? 
                x=8 -> not 2 or 10? 
                y=8 -> not 2 or 10? -> invalid.

        Candidate2: (2, 10, 8-8=0, 8) -> square (2,10) in x and (0,8) in y.
          (2,6): x=2 -> valid.
          (8,8): y=8 -> valid.
          (10,2): x=10 -> valid.
          (3,3): x=3 (not 2 or 10), y=3 (not 0 or 8) -> invalid.

        Candidate3: (10-8=2,10,2,10) -> same as candidate1? (2,10,2,10) -> same as candidate1.

        Candidate4: (10-8=2,10,8-8=0,8) -> same as candidate2? (2,10,0,8) -> same as candidate2.

        Candidate5: since s1>=s2, we generate:
            candidate5: (2,10,2,2+8=10) -> same as candidate1.
            candidate6: (2,10,8-8=0,8) -> same as candidate2.

        Candidate7: since s2>=s1 is false? (s2=6, s1=8 -> s2<s1) -> no candidate7 and candidate8? Actually, we generate candidate7 and candidate8 only when s2>=s1? Here s2=6 < s1=8, so we skip.

        Then all candidates fail -> output "Impossible".

 Therefore, we have to generate the 8 candidates as described.

 However, note: in the first set we generated candidate1: (min_x, min_x+s0, min_y, min_y+s0) and candidate2: (min_x, min_x+s0, max_y-s0, max_y). But when s0>s2, the bottom border of candidate2 is max_y-s0 which is less than min_y? Then the square extends below min_y? But the problem does not forbid that? The points must lie on the border. The point at min_y must then be at the top border? Actually, the top border is at max_y, and the point at min_y is below the bottom border? Then the point is not even in the square? 

 Correction: The square must cover the point? Actually, the problem says "connect all the points" and the square must have the points on the border. So the square must include the point. Therefore, the square must cover the entire set? 

 But note: the square defined by (x1,x2,y1,y2) is the rectangle from (x1,y1) to (x2,y2). The borders are the four sides. The point must lie on one of the four sides.

 However, the point at (x, min_y) must be at y>=y1 and y<=y2? and similarly for x. But if the square is from (min_x, max_y-s0) to (min_x+s0, max_y), then the y1 = max_y-s0 and y2 = max_y. The point at min_y must be at least y1? But we have min_y >= max_y - s0? (because s0>=max_y-min_y => min_y>=max_y-s0). So the point is in the square? And if it is at y = y1? then it is on the bottom border? But if min_y > max_y-s0, then the point is at y = min_y which is above y1? Then it is not on the border? 

 How can it be on the border? The border sides are at y = max_y-s0 (bottom) and y = max_y (top). So the point must be at one of these two y values? 

 Therefore, if the point has y = min_y, then we require that min_y == max_y-s0? Or min_y == max_y? 

 But note: we have s0 = max(s1, s2) and s2 = max_y - min_y. So if s0>s2, then min_y > max_y-s0? Then the point at min_y is not at the bottom border (which is max_y-s0) and not at the top border (max_y) because min_y < max_y. Then the point is strictly inside the square? Then it is not on the border? 

 Therefore, candidate2 is only valid if for every point (x, min_y) we have either x==min_x or x==min_x+s0? 

 Example: 
        Points: (0,0), (0,1), (1,0) -> and we add (2,2) to make it non-trivial? 
        Actually, let's take: 
          (0,0), (0,1), (1,0), (2,2)

        min_x=0, max_x=2 -> s1=2
        min_y=0, max_y=2 -> s2=2 -> s0=2.

        candidate1: (0,2,0,2) -> square from (0,0) to (2,2)
          (0,0): on border (x=0 and y=0)
          (0,1): x=0 -> valid
          (1,0): y=0 -> valid
          (2,2): on border (x=2 and y=2) -> valid.

        candidate2: (0,2, max_y-2=0, max_y=2) -> same as candidate1.

        Now, if we have a point (0,0), (0,1), (1,0), (3,3) -> then min_x=0, max_x=3, min_y=0, max_y=3 -> s1=3, s2=3, s0=3.
        candidate1: (0,3,0,3) -> 
          (0,0): valid
          (0,1): x=0 -> valid
          (1,0): y=0 -> valid
          (3,3): valid.

        Now, if we have a point that is inside? 
        Points: (0,0), (0,2), (2,0), (1,1) -> 
        min_x=0, max_x=2, min_y=0, max_y=2 -> s0=2.
        candidate1: (0,2,0,2) -> 
          (0,0): valid
          (0,2): valid
          (2,0): valid
          (1,1): not on border -> invalid.

        Therefore, we must check every point.

        How about candidate5? Since s1>=s2 (both 2), we generate:
          candidate5: (0,2,0,0+2=2) -> same as candidate1.
          candidate6: (0,2,2-2=0,2) -> same as candidate1.

        Then no candidate works? But wait: what if we use a square that is larger? 
        The problem allows any square. But our candidates are built from the extremes. 

        However, note: the square must have side s0 = max(s1,s2)=2. But if we use a square that is shifted? For example, (0,2,0,2) is the only square of side 2 that covers the bounding box? 

        Actually, we have candidate3: (max_x-s0, max_x, min_y, min_y+s0) = (2-2=0,2,0,2) -> same.

        candidate4: (2-2=0,2, max_y-2=0,2) -> same.

        How about a square that is not aligned with min_x and min_y? 
        We have candidate: (min_x, min_x+s0, ...) and also candidate with bottom at max_y-s0? 

        But we generated candidate2: (0,2, max_y-2=0, 2) -> same.

        What if we try a square that is from (-1,?) ... but the problem says we can output any square that satisfies the constraints? And we generated 8 candidates? 

        But our candidates are fixed to the extremes: we use min_x, max_x, min_y, max_y. 

        However, the problem does not require the square to be minimal? We can extend beyond? 

        But note: we generated candidate1: (min_x, min_x+s0, min_y, min_y+s0) which extends to min_x+s0 (which is 0+2=2) and min_y+s0=2. But we also generated candidate2: (min_x, min_x+s0, max_y-s0, max_y) -> which for this example: (0,2, 2-2=0, 2) -> same.

        What if we use a square that is from (-1, -1) to (1,1)? 
          Then side length=2? 
          But then the point (2,0) is not in the square? 

        Actually, the square must cover all points? The problem says "connect all the points" meaning the square must pass through all points? And the points must lie on the border? So the square must be large enough to include the points? The minimal square must cover the bounding box? 

        Therefore, the left border must be <= min_x, the right border must be >= max_x, the bottom border must be <= min_y, the top border must be >= max_y? 

        Then our candidates are the only possibilities? 

        But in the example with points (0,0), (0,2), (2,0), (1,1): 
          We require a square that covers [0,2] in x and [0,2] in y. The side must be at least 2. And the square must have side length s. Then s>=2. 

        But if we take a square of side 3? Then we can have for example: 
          candidate1: (0,3,0,3) -> then (1,1) is inside? not on border -> invalid.
          candidate2: (0,3, 2-3 = -1, 2) -> then the borders are x=0, x=3, y=-1, y=2.
          Check:
            (0,0): x=0 -> valid.
            (0,2): x=0 -> valid.
            (2,0): y=-1? no, y=0? no -> then check: must be on border: x=0? no, x=3? no, y=-1? no, y=2? no -> invalid.

        How about a square that is from (-1, -1) to (3,3)? 
          Then the borders: x=-1, x=3, y=-1, y=3.
          The point (0,0): not on border? 
          Actually, no: because (0,0) is inside? Then we require that the point must be on one of the borders? 

        How about a square that is from (0,0) to (2,2) but we already tried? 

        How about a square that is from (0,1) to (2,3)? 
          Then the points: 
            (0,0): not in the square? 
          So the square must cover the entire bounding box? 

        Therefore, the square must have:
            x1 <= min_x, x2>=max_x, y1<=min_y, y2>=max_y, and x2-x1 = y2-y1 = s, and s>=max(s1,s2).

        Then the candidates we generated (using the extremes and the minimal s = s0) are the only ones? 

        But we can extend the square arbitrarily? However, if we extend the square, then the borders move away from the points? Then the points that are not at the extreme (min_x, max_x, min_y, max_y) might lie strictly inside? 

        Therefore, the only squares that can possibly work are the ones that have at least one border aligned with an extreme coordinate? 

        That is the key: 
          The square must have:
            either the left border at min_x, or the right border at max_x, or the bottom border at min_y, or the top border at max_y? 

        But actually, we have 4 possibilities for each border? However, the problem is symmetric. 

        The editorial generates 8 candidates that cover the possibilities:

          Candidate1: left=min_x, bottom=min_y, side=s0 -> then top=min_y+s0, right=min_x+s0.
          Candidate2: left=min_x, top=max_y, side=s0 -> then bottom = max_y-s0, right=min_x+s0.
          Candidate3: right=max_x, bottom=min_y, side=s0 -> then left = max_x-s0, top=min_y+s0.
          Candidate4: right=max_x, top=max_y, side=s0 -> then left = max_x-s0, bottom=max_y-s0.

          Candidate5: left=min_x, right=max_x, and then side = s1, so we can set bottom=min_y, top=min_y+s1? OR bottom = max_y-s1, top=max_y. -> two candidates.
          Candidate7: bottom=min_y, top=max_y, side = s2, so we set left=min_x, right=min_x+s2? OR left = max_x-s2, right=max_x. -> two candidates.

        Why these 8? Because we consider:

          - The square is defined by two opposite corners? Actually, the output is two opposite corners? But the problem says: output (X1, X2, Y1, Y2) meaning the square is from (X1,Y1) to (X2,Y2). But note: the square must be axis-aligned, so the corners are (X1,Y1) and (X2,Y2) and the other two corners are (X1,Y2) and (X2,Y1). 

        And the constraints: X1<=X2 and Y1<=Y2.

        Therefore, we generate:

          Candidate1: (min_x, min_x+s0, min_y, min_y+s0) -> opposite corners: (min_x, min_y) and (min_x+s0, min_y+s0)
          Candidate2: (min_x, min_x+s0, max_y-s0, max_y) -> opposite corners: (min_x, max_y-s0) and (min_x+s0, max_y)
          Candidate3: (max_x-s0, max_x, min_y, min_y+s0) -> opposite corners: (max_x-s0, min_y) and (max_x, min_y+s0)
          Candidate4: (max_x-s0, max_x, max_y-s0, max_y) -> opposite corners: (max_x-s0, max_y-s0) and (max_x, max_y)

          Candidate5: (min_x, max_x, min_y, min_y+s1) -> but note: s1 = max_x-min_x, so min_y+s1 = min_y + (max_x-min_x). The side length must be max_x-min_x? But the y-side is min_y+s1 - min_y = s1, and the x-side is max_x-min_x = s1, so it is a square? 
          Candidate6: (min_x, max_x, max_y-s1, max_y) -> then the side is s1? 
          Candidate7: (min_x, min_x+s2, min_y, max_y) -> side = s2? 
          Candidate8: (max_x-s2, max_x, min_y, max_y) -> side = s2.

        But note: in candidate5, we have the side length s1, but the y-range is from min_y to min_y+s1. But the points have y in [min_y, max_y] and we know s1>=s2? (because we only generate candidate5 when s1>=s2). Then the entire set of points in y is covered? Not necessarily: the y-range of the square is [min_y, min_y+s1] and we know min_y+s1 >= min_y+s2 = min_y + (max_y-min_y) = max_y? Because s1>=s2. So the entire set of points in y is covered? 

        Similarly for candidate6: the y-range is [max_y-s1, max_y]. Since s1>=s2, then max_y-s1 <= max_y-s2 = min_y? So the entire set of points in y is covered? 

        Similarly for candidate7 and candidate8: the x-range covers [min_x, min_x+s2] and [max_x-s2, max_x] respectively? and s2>=s1, so the entire set of points in x is covered? 

        Therefore, the square covers the entire set of points? 

        But the condition for a point to be on the border: 
          For candidate5: the borders are x=min_x, x=max_x, y=min_y, y=min_y+s1.
          The point (x, min_y) is on the bottom border? 
          The point (x, min_y+s1) is on the top border?
          The point (min_x, y) is on the left border?
          The point (max_x, y) is on the right border?

          For a point that is not on the bottom or top border, and not on the left or right border? Then it must be that it has x not min_x and not max_x, and y not min_y and not min_y+s1? Then invalid.

        Therefore, we must check every point.

        Why are these 8 candidates sufficient? 
          Because the square must have at least one border aligned with an extreme (min_x, max_x, min_y, or max_y). Otherwise, we could shift the square arbitrarily? But the points at the extremes must be on the border? 

          Consider the point at min_x: it must be on the left border? Or on the top/bottom border? But if it is on the top/bottom border, then the top/bottom border must be at min_x? That is not possible because the top/bottom borders are horizontal. So the point at min_x must be on the left border? Actually, no: the point at min_x might be on the right border of a square that extends to the left? But then the right border is at min_x? Then the square has left border at min_x - s (for some s) and right border at min_x. Similarly, the point at min_x might be on the top or bottom border? Then the border is a horizontal line that passes through min_x? That doesn't make sense because min_x is an x-coordinate. 

          Actually, the point (min_x, y) must lie on one of the borders. The borders are vertical and horizontal. The vertical borders are at x = a and x = a+s. The horizontal borders are at y = b and y = b+s. 

          For the point (min_x, y): 
              it could be on a vertical border: either x = a or x = a+s. 
              if it is on x = a, then a = min_x? 
              if it is on x = a+s, then a+s = min_x -> then the entire square is to the left of min_x? But then the point at max_x would be to the right of min_x and the square would not cover it? 

          Therefore, the only possibility is that the left border is at min_x? Or the right border is at min_x? But if the right border is at min_x, then the left border is at min_x-s, and then the entire set of points must have x<=min_x? But we have min_x being the minimum x, so the set of points have x>=min_x? Then the point at min_x is at the right border? That forces that the entire square is from min_x-s to min_x? Then the point at max_x must be <= min_x? which implies max_x<=min_x -> then all points are min_x? 

          Therefore, in non-degenerate cases (with at least two distinct x) we must have the left border at min_x? 

          Similarly, the right border must be at max_x? 

          Similarly, the bottom border must be at min_y? and the top border at max_y? 

          Actually, not necessarily: consider a square that has the left border at min_x and the top border at max_y? Then the other two borders are at min_x+s and max_y-s? 

          But we generated candidates that cover all combinations: 
            candidate1: left=min_x, bottom=min_y -> then top=min_y+s0, right=min_x+s0.
            candidate2: left=min_x, top=max_y -> then bottom=max_y-s0, right=min_x+s0.
            candidate3: right=max_x, bottom=min_y -> then left=max_x-s0, top=min_y+s0.
            candidate4: right=max_x, top=max_y -> then left=max_x-s0, bottom=max_y-s0.

          And then we also consider when we fix two opposite borders? 
            candidate5: left=min_x, right=max_x -> then we set bottom and top arbitrarily? But we set them to either [min_y, min_y+s1] or [max_y-s1, max_y] (with s1 = max_x-min_x) so that the side length is s1.
            candidate7: bottom=min_y, top=max_y -> then we set left and right to either [min_x, min_x+s2] or [max_x-s2, max_x] (with s2 = max_y-min_y).

          Why these? Because if we fix two opposite borders (left and right) then the side length in x is fixed (s1). Then the square must have side s1, and the y-range must be of length s1. Then we have two choices: either the bottom border is at min_y (then top is min_y+s1) or the top border is at max_y (then bottom is max_y-s1). Similarly for the other.

        Therefore, the 8 candidates are:

          candidate1: (min_x, min_x+s0, min_y, min_y+s0)
          candidate2: (min_x, min_x+s0, max_y-s0, max_y)
          candidate3: (max_x-s0, max_x, min_y, min_y+s0)
          candidate4: (max_x-s0, max_x, max_y-s0, max_y)

          candidate5: (min_x, max_x, min_y, min_y+s1)   [if s1>=s2]
          candidate6: (min_x, max_x, max_y-s1, max_y)   [if s1>=s2]

          candidate7: (min_x, min_x+s2, min_y, max_y)   [if s2>=s1]
          candidate8: (max_x-s2, max_x, min_y, max_y)   [if s2>=s1]

        And then we check each candidate.

        Note: candidate5 and candidate7 are generated conditionally.

        But note: when s1==s2, we generate candidate5, candidate6, candidate7, candidate8? That's 4 extra? Then total 8.

        We check each candidate by iterating over all points? Then worst-case 8 * 10^5 = 800000, which is acceptable.

        However, we must be cautious: the problem constraints say 10^5 points, and 8 candidates -> 800000 checks, which is acceptable in Python? 

        But note: worst-case 10^5 points and 8 candidates -> 800000 comparisons, which is acceptable in Pyton (1e6 operations per second? 800000 is 0.8e6, so 0.8 seconds? But we have other operations too? The min and max and building the list: O(n). 

        Let's code accordingly.

        Edge: if n==0? The problem states n>=1.

        Let's run the sample inputs.

        Sample Input #1: 
            n=3, points: [(7,6), (2,4), (4,0)]
            min_x=2, max_x=7 -> s1=5
            min_y=0, max_y=6 -> s2=6 -> s0=6.

            Candidates 1-4: 
                cand1: (2,8,0,6) -> we know this works.
                cand2: (2,8,6-6=0,6) -> same as cand1? 
                cand3: (7-6=1,7,0,6) -> then (2,4): x=2 not 1 or 7, y=4 not 0 or 6 -> fails.
                cand4: (1,7,0,6) -> same as cand3? fails.

            Then condition: s2>=s1 (6>=5) -> generate candidate7 and candidate8:
                candidate7: (min_x, min_x+s2, min_y, max_y) = (2, 2+6=8, 0,6) -> same as cand1.
                candidate8: (max_x-s2, max_x, min_y, max_y) = (7-6=1,7,0,6) -> same as cand3.

            Then we find cand1 (or cand2 or cand7) and output one of them.

        How about we break at the first valid candidate? Then we output cand1: (2,8,0,6).

        Sample Input #2: 
            n=4, points: (2,6), (8,8), (10,2), (3,3)
            min_x=2, max_x=10 -> s1=8
            min_y=2, max_y=8 -> s2=6 -> s0=8.

            Candidates 1-4:
                cand1: (2,10,2,10) -> then (3,3): not on border -> fails.
                cand2: (2,10,8-8=0,8) -> (10,2): x=10 -> valid; (8,8): y=8 -> valid; (2,6): x=2 -> valid; (3,3): x=3? not 2 or 10; y=3? not 0 or 8 -> fails.
                cand3: (10-8=2,10,2,10) -> same as cand1 -> fails.
                cand4: (10-8=2,10,8-8=0,8) -> same as cand2 -> fails.

            Then condition: s1>=s2 -> true, so generate candidate5 and candidate6:
                candidate5: (2,10,2,2+8=10) -> same as cand1 -> fails.
                candidate6: (2,10,8-8=0,8) -> same as cand2 -> fails.

            Then condition: s2>=s1? false -> skip candidate7 and candidate8.

            Then output "Impossible".

        Therefore, the code is as below.

        One more corner: all points the same? 
            n=1: point (x,y)
            min_x=x, max_x=x, min_y=y, max_y=y -> s1=0, s2=0, s0=0.
            Candidates:
                cand1: (x, x, y, y) -> the point (x,y): x==x -> valid -> output.

        n=2: points (0,0) and (1,1)
            min_x=0, max_x=1, min_y=0, max_y=1 -> s1=1, s2=1, s0=1.
            cand1: (0,1,0,1) -> 
                (0,0): x=0 -> valid
                (1,1): x=1 -> valid -> output.

        But what if the two points are (0,0) and (0,1)? 
            min_x=0, max_x=0, min_y=0, max_y=1 -> s1=0, s2=1, s0=1.
            Candidates 1-4:
                cand1: (0,1,0,1) -> 
                    (0,0): x=0 -> valid? 
                    (0,1): x=0 -> valid -> output.

        But what if the two points are (0,0) and (1,0)? 
            min_x=0, max_x=1, min_y=0, max_y=0 -> s1=1, s2=0, s0=1.
            Then we generate candidate1: (0,1,0,1) -> 
                (0,0): x=0 -> valid
                (1,0): x=1 -> valid -> output.

        How about two points: (0,0) and (2,0)? 
            min_x=0, max_x=2, min_y=0, max_y=0 -> s1=2, s2=0, s0=2.
            Candidates 1-4:
                cand1: (0,2,0,2) -> 
                    (0,0): x=0 -> valid
                    (2,0): x=2 -> valid -> output.

        How about two points: (0,0) and (0,2)? 
            min_x=0, max_x=0, min_y=0, max_y=2 -> s1=0, s2=2, s0=2.
            cand1: (0,2,0,2) -> 
                (0,0): valid
                (0,2): valid -> output.

        How about two points: (0,0) and (1,2)? 
            min_x=0, max_x=1, min_y=0, max_y=2 -> s1=1, s2=2, s0=2.
            Candidates 1-4:
                cand1: (0,2,0,2) -> 
                    (0,0): valid
                    (1,2): x=1? not 0 or 2? y=2 -> valid -> output.

        Therefore, we output (0,2,0,2).

        But note: the square from (0,0) to (2,2) has side 2. The point (1,2) is on the top border? The top border is y=2? yes.

        How about a point (1,1) in a square (0,0) to (2,2)? It is not on the border? Then if we have three points: (0,0), (1,2), (1,1) -> 
            min_x=0, max_x=1, min_y=0, max_y=2 -> s0=2.
            cand1: (0,2,0,2) -> 
                (0,0): valid
                (1,2): valid
                (1,1): not on border -> invalid.

            Then try the others? 
            cand2: (0,2,2-2=0,2) -> same as cand1 -> invalid.
            cand3: (1-2=-1,1,0,2) -> 
                (0,0): x=0? not -1 or 1? y=0 -> valid? (because bottom border y=0) -> valid? 
                (1,2): x=1 -> valid? 
                (1,1): x=1 -> valid? -> because x=1 is the right border? -> valid.

            Then output (-1,1,0,2).

            How does the square look? 
                It goes from (-1,0) to (1,2). The borders:
                    left: x=-1
                    right: x=1
                    bottom: y=0
                    top: y=2
                The point (0,0): at (0,0) -> on the bottom border (y=0) and also on the left border? no, because x=-1 is the left border? Actually, no: the left border is x=-1, so x=0 is not left or right? But we have bottom border y=0: so (0,0) is on the bottom border -> valid.
                (1,2): at (1,2): on the right border (x=1) and top border (y=2) -> valid.
                (1,1): at (1,1): on the right border (x=1) -> valid.

            Therefore, it is valid.

        But wait: why did we generate candidate3? 
            candidate3: (max_x-s0, max_x, min_y, min_y+s0) = (1-2, 1, 0, 0+2) = (-1,1,0,2).

        This candidate is generated even when s0 = max(s1,s2)=2, and s1=1, s2=2.

        Therefore, we have to generate all 8 candidates? 

        However, note: the candidate3 in this case: 
            The square must cover the entire bounding box? 
                x: from 0 to 1 -> our square is from -1 to 1: covers [0,1]? yes.
                y: from 0 to 2 -> our square is from 0 to 2: covers? yes.

        But the square has side 2? (x: from -1 to 1 -> width=2; y: from 0 to 2 -> height=2) -> square.

        Therefore, the solution is correct.

        We'll code accordingly.

        One more: 
          Points: (0,0), (0,1), (1,0), (1,1) -> unit square at corners.
          min_x=0, max_x=1, min_y=0, max_y=1 -> s0=1.
          candidate1: (0,1,0,1) -> 
                (0,0): valid
                (0,1): valid
                (1,0): valid
                (1,1): valid -> output.

        How about a diamond? But the problem says axis-aligned.

        We are done.

        Let's code accordingly.

        Important: we must output the candidate as four integers: x1, x2, y1, y2 with x1<=x2 and y1<=y2.

        Our candidates are generated such that:
            cand1: (min_x, min_x+s0, min_y, min_y+s0) -> min_x<=min_x+s0? because s0>=0, and min_y<=min_y+s0? -> valid.
            similarly for the others: 
                cand2: (min_x, min_x+s0, max_y-s0, max_y) -> but max_y-s0 <= max_y? because s0>=0 -> valid.
                cand3: (max_x-s0, max_x, min_y, min_y+s0) -> max_x-s0<=max_x? and min_y<=min_y+s0 -> valid.
                cand4: (max_x-s0, max_x, max_y-s0, max_y) -> valid.

            cand5: (min_x, max_x, min_y, min_y+s1) -> min_x<=max_x? and min_y<=min_y+s1? (since s1>=0) -> valid.
            cand6: (min_x, max_x, max_y-s1, max_y) -> min_x<=max_x? and max_y-s1<=max_y? -> valid.

            cand7: (min_x, min_x+s2, min_y, max_y) -> min_x<=min_x+s2? and min_y<=max_y? -> valid.
            cand8: (max_x-s2, max_x, min_y, max_y) -> max_x-s2<=max_x? and min_y<=max_y? -> valid.

        Therefore, the constraints for output are satisfied.

        Code accordingly.

        We'll generate the 8 candidates and check in order.

        Note: We might have duplicates? For example, when s0=s1 and min_x+s0 = max_x? Then candidate1 is the same as candidate5? But that's okay.

        We break at the first valid candidate.

        Let's code.