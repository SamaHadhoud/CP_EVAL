### Problem Analysis
The problem requires connecting all given points to form an axis-aligned square (with sides parallel to the coordinate axes) such that every point lies on the border of the square. The square can be degenerate (i.e., a single point). The solution involves finding any such square defined by two opposite corners (output as \(X_1, X_2, Y_1, Y_2\) with \(X_1 \leq X_2\) and \(Y_1 \leq Y_2\)) or determining that it's impossible.

#### Key Insights
1. **Bounding Box Constraints**: The square must enclose all points, so its left border \(x = X_1\) must be at most the minimum \(x\)-coordinate (\( \text{min}_x \)) of the points, and the right border \(x = X_2\) must be at least the maximum \(x\)-coordinate (\( \text{max}_x \)). Similarly, the bottom border \(y = Y_1\) must be at most \( \text{min}_y \) and the top border \(y = Y_2\) at least \( \text{max}_y \).

2. **Square Side Length**: The side length \(s\) of the square must satisfy \(s = X_2 - X_1 = Y_2 - Y_1\). The minimal \(s\) required is at least the maximum of the spreads in \(x\) and \(y\) directions, i.e., \(s \geq \max(\text{max}_x - \text{min}_x, \text{max}_y - \text{min}_y)\).

3. **Border Condition**: Every point must lie on at least one border of the square (left: \(x = X_1\), right: \(x = X_2\), bottom: \(y = Y_1\), or top: \(y = Y_2\)).

4. **Candidate Squares**: Based on aligning the square's borders with the extreme values (or extending beyond them), we derive 8 candidate squares. These candidates cover scenarios where:
   - The square is aligned with the bottom-left and top-right corners.
   - The square extends beyond the extremes to ensure equal side lengths while satisfying the border condition.

### Approach
1. **Precompute Extremes**: Calculate \( \text{min}_x, \text{max}_x, \text{min}_y, \text{max}_y \) from the input points.
2. **Calculate Spreads**: Compute \(s_x = \text{max}_x - \text{min}_x\) and \(s_y = \text{max}_y - \text{min}_y\), and \(s_0 = \max(s_x, s_y)\).
3. **Generate Candidates**: Construct 8 candidate squares:
   - **Candidates 1-4**: Use \(s_0\) to define squares aligned with the extremes (e.g., bottom-left corner at \((\text{min}_x, \text{min}_y)\) or top-left corner at \((\text{min}_x, \text{max}_y - s_0)\).
   - **Candidates 5-6**: If \(s_x \geq s_y\), define squares with fixed left and right borders at \(\text{min}_x\) and \(\text{max}_x\), and varying bottom/top borders.
   - **Candidates 7-8**: If \(s_y \geq s_x\), define squares with fixed bottom and top borders at \(\text{min}_y\) and \(\text{max}_y\), and varying left/right borders.
4. **Check Validity**: For each candidate, verify that every point lies on at least one border of the square.
5. **Output Result**: The first valid candidate is output; if none are valid, output "Impossible".

### Solution Code
```python
import sys

def main():
    data = sys.stdin.read().split()
    if not data:
        return
    
    n = int(data[0])
    points = []
    index = 1
    xs = []
    ys = []
    for i in range(n):
        x = int(data[index])
        y = int(data[index+1])
        index += 2
        points.append((x, y))
        xs.append(x)
        ys.append(y)
    
    min_x = min(xs)
    max_x = max(xs)
    min_y = min(ys)
    max_y = max(ys)
    
    s1 = max_x - min_x
    s2 = max_y - min_y
    s0 = max(s1, s2)
    
    candidates = []
    candidates.append((min_x, min_x + s0, min_y, min_y + s0))
    candidates.append((min_x, min_x + s0, max_y - s0, max_y))
    candidates.append((max_x - s0, max_x, min_y, min_y + s0))
    candidates.append((max_x - s0, max_x, max_y - s0, max_y))
    
    if s1 >= s2:
        candidates.append((min_x, max_x, min_y, min_y + s1))
        candidates.append((min_x, max_x, max_y - s1, max_y))
    if s2 >= s1:
        candidates.append((min_x, min_x + s2, min_y, max_y))
        candidates.append((max_x - s2, max_x, min_y, max_y))
    
    for cand in candidates:
        x1, x2, y1, y2 = cand
        valid = True
        for (x, y) in points:
            if x == x1 or x == x2 or y == y1 or y == y2:
                continue
            else:
                valid = False
                break
        if valid:
            print(f"{x1} {x2} {y1} {y2}")
            return
    
    print("Impossible")

if __name__ == "__main__":
    main()
```

### Explanation
1. **Reading Input**: The input is read and parsed into a list of points, with their \(x\) and \(y\) coordinates stored separately for efficiency.
2. **Extremes Calculation**: The minimum and maximum values for \(x\) and \(y\) coordinates are computed to determine the bounding box of the points.
3. **Spread Calculation**: The spreads \(s_x\) (difference in \(x\)) and \(s_y\) (difference in \(y\)) are calculated, along with \(s_0\) (the maximum of these spreads).
4. **Candidate Generation**: Eight candidate squares are generated:
   - **Candidates 1-4** use \(s_0\) to ensure the square covers the bounding box, with corners aligned to the extremes.
   - **Candidates 5-6** are considered if the \(x\)-spread dominates, fixing the left and right borders and adjusting the bottom/top borders.
   - **Candidates 7-8** are considered if the \(y\)-spread dominates, fixing the bottom and top borders and adjusting the left/right borders.
5. **Validation Check**: Each candidate is checked by verifying that every point lies on at least one border (left, right, bottom, or top) of the square.
6. **Output**: The first valid candidate is printed; if no candidates are valid, "Impossible" is printed.

This approach efficiently checks all plausible squares by leveraging the constraints and properties of axis-aligned squares, ensuring optimal performance even for large inputs.