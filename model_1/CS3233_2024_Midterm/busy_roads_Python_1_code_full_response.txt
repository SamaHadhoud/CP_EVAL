To solve this problem, we need to find the minimum time Robert needs to travel from city 1 to city N, considering that each road can only be entered during specific time windows each day. The solution involves using Dijkstra's algorithm to compute the earliest arrival time at each city, taking into account the waiting times required for roads to become available.

### Approach
1. **Problem Analysis**: Robert starts at city 1 at time 0. Each road connecting cities has a travel time and a time window during which it can be entered. If Robert arrives at a city before a road's window opens, he must wait. If he arrives after the window closes, he must wait until the next day's window.
2. **Dijkstra's Algorithm**: This algorithm is suitable because it efficiently finds the shortest path in a graph with non-negative edge weights. Here, the "weights" are dynamic, depending on the current time modulo the day length (C), but Dijkstra's can be adapted by computing the effective waiting time for each road.
3. **Key Insight**: For each road from city `u` to `v`, the waiting time at `u` depends on the current time modulo `C`:
   - If the current time modulo `C` is within the road's window `[L, R]`, Robert can start immediately (wait time = 0).
   - If it's before `L`, he waits `L - current_time` seconds.
   - If it's after `R`, he waits until the next day's window, i.e., `(C - current_time) + L` seconds.
4. **Algorithm**:
   - Initialize distances from city 1 as 0 and all others as infinity.
   - Use a min-heap to process cities in order of increasing arrival time.
   - For each city processed, update the arrival times of its neighbors by considering the waiting time and travel time for each connecting road.
   - The earliest arrival time at city N is the solution.

### Solution Code
```python
import sys
import heapq

def main():
    data = sys.stdin.read().split()
    it = iter(data)
    n = int(next(it))
    m = int(next(it))
    C_day = int(next(it))
    
    graph = [[] for _ in range(n + 1)]
    for _ in range(m):
        a = int(next(it))
        b = int(next(it))
        T = int(next(it))
        L = int(next(it))
        R = int(next(it))
        graph[a].append((b, T, L, R))
        graph[b].append((a, T, L, R))
    
    INF = 10**18
    dist = [INF] * (n + 1)
    dist[1] = 0
    heap = [(0, 1)]
    
    while heap:
        t, u = heapq.heappop(heap)
        if t != dist[u]:
            continue
        for edge in graph[u]:
            v, T, L, R = edge
            rem = t % C_day
            if rem <= R:
                wait_time = max(0, L - rem)
            else:
                wait_time = C_day - rem + L
            new_time = t + wait_time + T
            if new_time < dist[v]:
                dist[v] = new_time
                heapq.heappush(heap, (new_time, v))
                
    print(dist[n])

if __name__ == '__main__':
    main()
```

### Explanation
1. **Input Parsing**: The input is read and parsed into the number of cities (N), roads (M), and seconds per day (C). Each road is stored in an adjacency list for both directions.
2. **Initialization**: The distance array `dist` is initialized with infinity, except for the starting city (1) set to 0. A min-heap is initialized with the starting city and time 0.
3. **Processing Cities**: The heap processes each city by extracting the smallest arrival time. For each outgoing road from the current city:
   - The current time modulo `C` (`rem`) determines the waiting time:
     - If `rem` is within the road's window `[L, R]`, the waiting time is `max(0, L - rem)`.
     - Otherwise, the waiting time is `(C - rem) + L`.
   - The arrival time at the neighbor city is computed as the current time plus waiting time plus travel time. If this time is better than the known time, it updates the neighbor's distance and pushes it into the heap.
4. **Output**: The earliest arrival time at city N is printed, which is the solution to the problem.

This approach efficiently handles the constraints by leveraging Dijkstra's algorithm and dynamically computing waiting times based on periodic road availability, ensuring optimal performance even for large inputs.