### Approach
The problem involves finding the minimum time for Robert to travel from city 1 to city N, considering time windows for road usage and the ability to wait in cities. The solution leverages Dijkstra's algorithm to compute the earliest arrival time at each city, incorporating waiting times based on the periodic road availability.

#### Key Insights:
1. **Time Windows and Waiting**: Each road can only be entered during specific seconds of the day (modulo \(C\)). If Robert arrives at a city too early for a road's window, he must wait until the window opens. If he arrives after the window closes, he must wait until the next day's window.
2. **Earliest Arrival Time**: Using Dijkstra's algorithm, we prioritize processing cities with the earliest known arrival times, ensuring that once a city is processed, its earliest time is finalized.
3. **Bidirectional Roads**: Each road is bidirectional with the same travel time and window constraints in both directions, so the graph is treated as undirected.

#### Algorithm Steps:
1. **Graph Construction**: Represent the cities and roads using an adjacency list. Each bidirectional road is stored as two directed edges.
2. **Dijkstra Initialization**: Start from city 1 at time 0. Initialize all other cities with an infinite arrival time.
3. **Processing Cities**: Use a min-heap to process cities in order of increasing arrival time:
   - For each outgoing road from the current city, compute the earliest start time considering the current time modulo \(C\) and the road's window \([L_i, R_i]\):
     - If the current time modulo \(C\) is within \([L_i, R_i]\), start immediately.
     - If it is before \(L_i\), wait until \(L_i\).
     - If it is after \(R_i\), wait until the same window in the next day.
   - Calculate the arrival time at the neighboring city and update its earliest arrival time if improved.
4. **Termination**: The earliest arrival time at city \(N\) is the solution.

### Solution Code
```python
import sys
import heapq

def main():
    data = sys.stdin.read().split()
    it = iter(data)
    n = int(next(it)); m = int(next(it)); C_day = int(next(it))
    
    graph = [[] for _ in range(n+1)]
    for _ in range(m):
        a = int(next(it)); b = int(next(it)); T = int(next(it)); L = int(next(it)); R = int(next(it))
        graph[a].append((b, T, L, R))
        graph[b].append((a, T, L, R))
    
    INF = 10**18
    dist = [INF] * (n+1)
    dist[1] = 0
    heap = [(0, 1)]
    
    while heap:
        t, u = heapq.heappop(heap)
        if t != dist[u]:
            continue
        for edge in graph[u]:
            v, T, L, R = edge
            rem = t % C_day
            if rem <= R:
                start_time = t + max(0, L - rem)
            else:
                start_time = t + (C_day - rem) + L
            arrival_time = start_time + T
            if arrival_time < dist[v]:
                dist[v] = arrival_time
                heapq.heappush(heap, (arrival_time, v))
                
    print(dist[n])

if __name__ == '__main__':
    main()
```

### Explanation
1. **Reading Input**: The input is read and parsed into the number of cities \(N\), roads \(M\), and seconds per day \(C\).
2. **Graph Construction**: The graph is built as an adjacency list where each road is stored twice (once for each direction) with attributes: destination, travel time, and time window.
3. **Dijkstra's Setup**: The distance array `dist` is initialized to infinity, except for the starting city (1) at time 0. A min-heap is initialized to process cities.
4. **Processing Nodes**: The heap processes each city by extracting the smallest arrival time. For each neighboring city:
   - The current time modulo \(C\) determines if Robert can use the road immediately, must wait until the same day's window, or must wait until the next day's window.
   - The arrival time at the neighbor is calculated and updated if it improves the known time.
5. **Output**: The earliest arrival time at city \(N\) is printed, which is the solution.

This approach efficiently handles the constraints by leveraging Dijkstra's algorithm and careful computation of waiting times based on periodic road availability. The complexity is \(O(M \log N)\), suitable for large inputs.