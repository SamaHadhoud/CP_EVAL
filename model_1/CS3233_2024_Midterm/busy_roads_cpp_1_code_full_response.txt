To solve this problem, we need to find the minimum time Robert needs to travel from city 1 to city N, considering the constraints that each road can only be entered during specific time windows within each day. The solution involves using Dijkstra's algorithm to explore the shortest path while accounting for the waiting times imposed by these time windows.

### Approach
1. **Problem Analysis**: The problem involves navigating a graph where each edge (road) has a travel time and a time window during which it can be entered. Robert can wait in any city for any duration, which allows him to delay his travel until a road's window opens.
2. **Graph Representation**: Represent the cities and roads as an undirected graph using an adjacency list. Each bidirectional road is stored as two directed edges.
3. **Dijkstra's Algorithm**: Utilize Dijkstra's algorithm to determine the earliest arrival time at each city. The algorithm processes nodes in order of increasing arrival time, ensuring optimality.
4. **Handling Time Windows**: For each road from the current city, calculate the earliest possible start time:
   - If the current time modulo the day length falls within the road's window, start immediately.
   - If it's before the window, wait until the window opens.
   - If it's after the window, wait until the same window in the next day.
5. **Priority Queue**: Use a min-heap to efficiently retrieve the next city to process based on the earliest arrival time.

### Solution Code
```cpp
#include <iostream>
#include <vector>
#include <queue>
#include <cstdio>
#include <climits>
#include <tuple>
#include <algorithm>
using namespace std;

typedef long long ll;

int main() {
    int n, m;
    ll C;
    scanf("%d %d %lld", &n, &m, &C);
    vector<vector<tuple<int, ll, ll, ll>>> graph(n+1);

    for (int i = 0; i < m; i++) {
        int a, b;
        ll T_val, L_val, R_val;
        scanf("%d %d %lld %lld %lld", &a, &b, &T_val, &L_val, &R_val);
        graph[a].emplace_back(b, T_val, L_val, R_val);
        graph[b].emplace_back(a, T_val, L_val, R_val);
    }

    vector<ll> dist(n+1, LLONG_MAX);
    dist[1] = 0;
    priority_queue<pair<ll, int>, vector<pair<ll, int>>, greater<pair<ll, int>>> pq;
    pq.push(make_pair(0, 1));

    while (!pq.empty()) {
        ll t = pq.top().first;
        int u = pq.top().second;
        pq.pop();

        if (t != dist[u]) continue;

        for (const auto& edge : graph[u]) {
            int v = get<0>(edge);
            ll T_val = get<1>(edge);
            ll L_val = get<2>(edge);
            ll R_val = get<3>(edge);

            ll rem = t % C;
            ll start_time;
            if (rem <= R_val) {
                start_time = t + max(0LL, L_val - rem);
            } else {
                start_time = t + (C - rem) + L_val;
            }
            ll arrival = start_time + T_val;

            if (arrival < dist[v]) {
                dist[v] = arrival;
                pq.push(make_pair(arrival, v));
            }
        }
    }

    printf("%lld\n", dist[n]);
    return 0;
}
```

### Explanation
1. **Input Reading**: The input is read and parsed into the number of cities (N), roads (M), and the day length (C). Each road is stored in an adjacency list with its travel time and time window.
2. **Initialization**: The distance array `dist` is initialized to a large value (LLONG_MAX) except for the starting city (1), which is set to 0. A priority queue (min-heap) is initialized to process nodes by their earliest arrival time.
3. **Processing Nodes**: The algorithm processes each node by extracting the smallest arrival time from the heap. For each outgoing road from the current node:
   - The current time modulo the day length (`rem`) is checked against the road's time window.
   - The start time is adjusted to the earliest possible entry into the road (immediately, within the same day, or the next day).
   - The arrival time at the neighboring city is calculated and updated if it improves the known earliest arrival time.
4. **Output**: The earliest arrival time at city N is printed as the solution.

This approach efficiently handles the time window constraints by leveraging Dijkstra's algorithm and careful calculation of waiting times, ensuring optimal performance for large inputs.