To solve this problem, we need to determine the maximum number of contiguous segments (boxes) into which Team Galactic can split Pichuu's Pokémon such that Pichuu can still sort the entire sequence using the AutoSort function on each box. The key insight is recognizing that the problem reduces to counting the number of indices \(i\) (from 1 to \(N\)) where the prefix maximum up to \(i\) equals \(i\). 

### Approach
1. **Initial Setup**: 
   - Read the input values for the number of Pokémon \(N\) and the number of swaps \(M\), followed by the permutation array \(A\) representing the desired positions of the Pokémon.
   - Initialize the prefix maximum array \(P\) where \(P[i]\) is the maximum value in the subarray \(A[1..i]\). 
   - Compute the initial count of indices \(i\) where \(P[i] = i\), which gives the initial number of valid segments.

2. **Handling Swaps**:
   - For each swap operation between positions \(u\) and \(v\):
     - Swap the elements in the array \(A\) at positions \(u\) and \(v\).
     - Update the prefix maximum array \(P\) starting from the minimum of \(u\) and \(v\) (denoted as \(u0\)) to the end of the array. The update proceeds as follows:
       - For each index \(i\) starting from \(u0\), compute the new prefix maximum as the maximum of the previous prefix maximum (up to \(i-1\)) and the current element at \(i\).
       - If \(i\) is beyond the maximum of \(u\) and \(v\) (denoted as \(v0\)) and the new prefix maximum equals the old prefix maximum at \(i\), break the update early since subsequent prefix maxima remain unchanged.
       - Adjust the count of valid segments if the condition \(P[i] = i\) changes for any index \(i\) during the update.

3. **Output**:
   - After processing each swap, output the current count of valid segments (indices \(i\) where \(P[i] = i\)).

### Solution Code
```python
import sys

def main():
    data = sys.stdin.read().split()
    if not data:
        return
    
    n = int(data[0])
    m = int(data[1])
    A = [0] * (n + 1)
    tokens = list(map(int, data[2:2+n]))
    for i in range(1, n + 1):
        A[i] = tokens[i - 1]
    
    swaps = []
    index = 2 + n
    for i in range(m):
        u = int(data[index])
        v = int(data[index + 1])
        index += 2
        swaps.append((u, v))
    
    P = [0] * (n + 1)
    P[0] = 0
    total_breaks = 0
    for i in range(1, n + 1):
        P[i] = max(P[i - 1], A[i])
        if P[i] == i:
            total_breaks += 1

    out_lines = [str(total_breaks)]
    
    for swap in swaps:
        u, v = swap
        u0 = min(u, v)
        v0 = max(u, v)
        if u0 == v0:
            out_lines.append(str(total_breaks))
            continue
        
        A[u0], A[v0] = A[v0], A[u0]
        
        temp = P[u0 - 1]
        i = u0
        updated = False
        while i <= n:
            candidate = A[i]
            new_val = candidate if candidate > temp else temp
            old_val = P[i]
            
            if i >= v0 and new_val == old_val:
                break
                
            old_break = (old_val == i)
            new_break = (new_val == i)
            if old_break != new_break:
                if old_break:
                    total_breaks -= 1
                else:
                    total_breaks += 1
            
            P[i] = new_val
            temp = new_val
            i += 1

        out_lines.append(str(total_breaks))
    
    print("\n".join(out_lines))

if __name__ == "__main__":
    main()
```

### Explanation
1. **Initialization**:
   - The input is read and parsed into the number of Pokémon \(N\), the number of swaps \(M\), the permutation array \(A\), and the list of swaps.
   - The prefix maximum array \(P\) is initialized where \(P[i]\) stores the maximum value in the subarray \(A[1..i]\).
   - The initial count of valid segments (indices \(i\) where \(P[i] = i\)) is computed and stored in `total_breaks`.

2. **Processing Swaps**:
   - For each swap, the elements at positions \(u\) and \(v\) in \(A\) are swapped.
   - The prefix maximum array \(P\) is updated starting from the smaller of \(u\) and \(v\) (denoted as \(u0\)):
     - For each index \(i\) from \(u0\) to \(N\), the new prefix maximum is computed as the maximum of the previous prefix maximum (up to \(i-1\)) and the current element at \(i\).
     - If \(i\) is beyond the larger of \(u\) and \(v\) (denoted as \(v0\)) and the new prefix maximum equals the old value at \(i\), the update stops early since subsequent values remain unchanged.
     - The count of valid segments (`total_breaks`) is adjusted if the condition \(P[i] = i\) changes for any index \(i\) during the update.

3. **Output**:
   - The initial count of valid segments and the count after each swap are collected in `out_lines` and printed at the end.

This approach efficiently tracks the necessary conditions for segmenting the array by leveraging the properties of prefix maxima and early termination during updates, ensuring optimal performance for practical inputs.