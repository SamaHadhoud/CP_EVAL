 We are going to implement a segment tree to support point updates and range queries for the density.
 The key is that the density of a segment is the sum of squares of the lengths of contiguous same-character runs.
 In the segment tree node, we store:
   - size: the length of the segment
   - lc: the leftmost character in the segment
   - rc: the rightmost character in the segment
   - lrun: the length of the contiguous run starting from the left (if the entire left side is the same character, then how many)
   - rrun: the length of the contiguous run ending at the right
   - dens: the total density (sum of squares of runs) for the segment.

 When merging two nodes (left and right):
   - The new segment's size = left.size + right.size.
   - The new leftmost character is left.lc, and the new rightmost character is right.rc.
   - The left run (lrun) of the merged node:
        If the entire left node is a run (left.lrun == left.size) and the last character of the left node (left.rc) equals the first character of the right node (right.lc), then the left run extends to include the beginning of the right node: lrun = left.lrun + right.lrun? 
        But note: we cannot necessarily take the entire right.lrun because the left run might break earlier? Actually, the left run of the merged node is:
            if left is all the same and the last char of left equals the first char of right, then the left run of the merged node is left.lrun + (if the right node has a left run that spans the entire right node? no, not necessarily) -> Actually, we can only extend the left run as long as the entire left segment is one run and the boundary matches, then the left run becomes left.lrun + (the left run of the right node, but only if the entire left segment was a run and the boundary matches). However, note: the left run of the merged node must be contiguous from the very left. So if the entire left segment is a run and the left.rc == right.lc, then the left run of the merged node becomes left.lrun + right.lrun? But wait, that would be the case only if the entire right segment is the same? Not exactly: the left run in the merged node can extend into the right segment until a break. However, the right segment might not be uniform. Actually, the left run of the merged node is:
                If left.lrun == left.size and left.rc == right.lc, then the left run of the merged node = left.size + right.lrun.
            Otherwise, the left run of the merged node remains the left.lrun.

   Similarly, the right run (rrun) of the merged node:
        If the entire right segment is a run (right.rrun == right.size) and the last character of the left (left.rc) equals the first character of the right (right.lc), then the right run of the merged node = right.size + left.rrun.
        Otherwise, the right run of the merged node remains right.rrun.

   The density of the merged node is left.dens + right.dens, but we must account for the fact that if the last character of the left segment is the same as the first character of the right segment, then the run that ends at the left segment and the run that starts at the right segment are actually one continuous run. Therefore, we have to subtract the contributions of the two original runs at the boundary and add the contribution of the merged run.

        Specifically, at the boundary we had two runs: one at the end of the left segment of length `left_rrun` and one at the start of the right segment of length `right_lrun`. We subtract `left_rrun^2` and `right_lrun^2` and add `(left_rrun + right_lrun)^2`.

 However, note: the runs at the boundary might not be the entire runs we stored? Actually, we stored the entire left run and the entire right run? But the left segment's right run is stored in `left.rrun` and the right segment's left run is stored in `right.lrun`. And when the boundary matches, we merge these two runs.

 Therefore, we do:
      merged_dens = left.dens + right.dens;
      if (left.rc == right.lc) {
          long long subtract = (long long)left.rrun * left.rrun + (long long)right.lrun * right.lrun;
          long long add = (long long)(left.rrun + right.lrun) * (left.rrun + right.lrun);
          merged_dens = merged_dens - subtract + add;
      }

 But note: we also updated the lrun and rrun of the merged node. However, the above adjustment only accounts for the merging of the two runs at the boundary. The rest of the runs remain unchanged.

 Important: The left.rrun is the length of the run that ends at the right end of the left segment. Similarly, right.lrun is the run that starts at the left end of the right segment. When we merge, these two runs become one. Therefore, we must adjust the density accordingly.

 However, note that the runs that we are merging are not necessarily the entire runs of the segments? Actually, they are the maximal runs at the ends. The rest of the runs in the middle are already accounted for in left.dens and right.dens. But the left.dens already includes the run of length left.rrun (as the last run) and the right.dens includes the run of length right.lrun (as the first run). However, in the left.dens, the entire left segment is broken into runs and the last run is of length left.rrun. Similarly, the right.dens has the first run as right.lrun. Therefore, when we merge, we are replacing two runs (one of length left.rrun and one of length right.lrun) by one run of length (left.rrun+right.lrun). Hence, we subtract the squares and add the square of the sum.

 But note: it is possible that the left.rrun is part of a larger run that we are now extending? Actually, in the left segment, the run at the end is exactly left.rrun. Similarly for the right.

 However, caution: the entire left segment might be one run? Then the left.dens is left.size^2? But then we break the entire run? Actually, the left segment's density is computed as the sum of squares of runs. If the entire left segment is one run, then left.dens = left.size^2. Similarly, if the entire right segment is one run, then right.dens = right.size^2. When we merge, we subtract the square of the last run of the left and the square of the first run of the right and add the square of the merged run. This is correct.

 But what if the left segment has multiple runs? Then the last run is of length left.rrun, and we subtract that square and then add the merged run? Yes.

 Example: 
   Left: "aab" -> runs: [ "aa", "b" ] -> dens = 2^2 + 1^2 = 5, and lc='a', rc='b', lrun=2, rrun=1.
   Right: "baa" -> runs: [ "b", "aa" ] -> dens = 1^2 + 2^2 = 5, and lc='b', rc='a', lrun=1, rrun=2.
   Now merge: the entire string "aabbaa" -> runs: [ "aa", "bb", "aa" ] -> but wait, actually: 
        The left segment ends with 'b' and the right segment starts with 'b', so the last run of the left is 'b' (length 1) and the first run of the right is 'b' (length 1) -> they merge to form a run of length 2.
        Then the runs become: "aa", "bb", "aa" -> density = 2^2 + 2^2 + 2^2 = 12.

   How does the merge work?
        left.dens = 5, right.dens = 5 -> total=10.
        Subtract: 1^2 (from left's last run) and 1^2 (from right's first run) -> subtract 1+1=2 -> becomes 8.
        Add: (1+1)^2 = 4 -> becomes 12. Correct.

   Now update the runs:
        The merged segment: 
          lc = left.lc = 'a'
          rc = right.rc = 'a'
          lrun: the left run of the merged segment: 
                The left segment starts with two 'a's, but then we have a break? Actually, the entire left segment is not one run? So the left run of the merged segment is the left run of the left segment: which is 2? 
                However, note: the left run of the merged segment must be the run starting at the very left. The left segment had two 'a's and then a 'b'. So the left run of the merged segment is 2? But then we merged the two segments and the left run is still 2? 
                However, the left run of the merged segment: the first two are 'a' and then the third is 'b' (so the run of 'a' is 2) -> so lrun=2.
          Similarly, the right run: the last two are 'a', so rrun=2? But the last character is 'a', and we look backwards: the last two are 'a's? So rrun=2.

   But note: the entire merged segment is: [0: 'a', 1: 'a', 2: 'b', 3: 'b', 4: 'a', 5: 'a'] -> the left run (starting at 0) is 2 (because the first two are 'a'), and the right run (ending at 5) is 2 (because the last two are 'a').

   So the merging of the runs at the boundary does not affect the left run of the entire segment? Because the left run of the entire segment is determined only by the left segment's left run? Actually, if the entire left segment is a run and the boundary matches, then we can extend the left run into the right segment? But in our example, the entire left segment is not a run (because it had two runs). Therefore, the condition fails: we require left.lrun == left.size? In the left segment, left.lrun=2, but left.size=3 -> not equal. So we set res.lrun = left.lrun = 2.

   Similarly, for the right run: the entire right segment is not a run? Because right.rrun=2, but right.size=3? So we set res.rrun = right.rrun = 2.

   Therefore, the node for the merged segment is:
        size=6, lc='a', rc='a', lrun=2, rrun=2, dens=12.

   Now, what if we have a case where the entire left segment is a run and the boundary matches?
        Left: "aaa" -> lc='a', rc='a', lrun=3, rrun=3, dens=9.
        Right: "aab" -> lc='a', rc='b', lrun=2, rrun=1, dens= 2^2+1^2=5.
        Merged: "aaaaab" -> runs: "aaaaa" and "b" -> density = 5^2+1^2=26.

        How the merge works:
          Initially: 9+5 = 14.
          Subtract: left.rrun^2 = 3^2=9 and right.lrun^2=2^2=4 -> total subtract 13 -> becomes 1.
          Add: (3+2)^2 = 25 -> becomes 26.

        Now update the runs:
          lrun: because left.lrun==left.size (3) and left.rc==right.lc ('a'=='a') -> so lrun = 3+right.lrun = 3+2=5? 
          But the entire merged segment does not have the entire left run? Actually, the left run of the merged segment is 5 (because the first 5 characters are 'a')? 
          However, the right segment is "aab", so the merged segment starts with 5 'a's? Yes.

          rrun: the entire right segment is not a run? So we set rrun = right.rrun = 1? 
          But the last character is 'b', so the last run is of length 1.

        Therefore, the merged node: size=6, lc='a', rc='b', lrun=5, rrun=1, dens=26.

   This seems correct.

 Implementation:

   We'll build a segment tree. The leaves are:

        Node for a single character c: 
            size=1, lc=c, rc=c, lrun=1, rrun=1, dens=1.

   We'll support point updates and range queries.

   However, note: the query is for an arbitrary range. How do we merge multiple segments? We can do a standard range query: we break the range into O(log n) segments and merge them in order (from left to right). 

   How to merge more than two? We can do:

        res = Node()  (an identity node: with size=0, and then when we merge with the next segment, we return the next segment)

        Then traverse the segments in order and merge: res = merge(res, next_segment)

   But note: our merge function is designed for two adjacent segments. We can do:

        Node left_part = query(left_child, ...);
        Node right_part = query(right_child, ...);
        Then merge: merge(left_part, right_part)

   However, the query might not be aligned with the entire segment? Actually, we can break the query range into segments that are stored in the tree and then merge them one by one. But the segment tree query naturally returns disjoint segments that are adjacent? We can merge them in order.

   Alternatively, we can write the query function to return the node for the entire contiguous range. But note: the standard segment tree query does that: we break the query [l, r] into segments that are stored in the tree and then merge them. However, the segments we get are adjacent. So we can merge from left to right.

   But the segment tree query might get segments that are adjacent and we can merge two at a time. However, we can merge arbitrarily many by keeping a result node and merging each segment one by one.

   However, to avoid O(n) merging in the worst case (if we get many segments) we note that the segment tree returns O(log n) segments. We can merge them in a left-to-right order.

   We can design the query function to return a node for the contiguous interval. Then we can merge two nodes at a time. But if we have more than two, we can do:

        Node res;
        for each segment in order from left to right:
            res = merge(res, segment_i)

   However, we must be cautious: our merge function is designed for two adjacent segments, and we start with an empty node. We can define an identity node: a node of size 0. Then:

        Node identity = Node(0, 0, 0, 0, 0, 0);

        Then when merging identity with a node A: 
            if identity.size==0, then return A.

   We have defined our merge function to handle that: 
        if (L.size==0) return R;
        if (R.size==0) return L;

   So we can do:

        Node res = identity;
        for each segment in the list (from leftmost to rightmost) {
            res = merge(res, segment);
        }

   How to get the segments? We can do:

        vector<Node> segs;
        in the query, when we traverse the tree, we can collect the segments? But that might be O(log n) in the recursion, but we cannot have a vector in a recursive function without affecting performance? Alternatively, we can merge on the fly.

   We can do:

        Node query(int node, int l, int r, int ql, int qr) {
            if (ql <= l && r <= qr) {
                return tree[node];
            }
            int mid = (l+r)/2;
            if (qr <= mid) {
                return query(left_child, l, mid, ql, qr);
            } else if (ql > mid) {
                return query(right_child, mid+1, r, ql, qr);
            } else {
                Node L = query(left_child, l, mid, ql, mid);
                Node R = query(right_child, mid+1, r, mid+1, qr);
                return merge(L, R);
            }
        }

   But wait, what if the query is not exactly covering the entire left and right children? Actually, we can do:

        Node left_node = query(left_child, l, mid, ql, min(qr, mid));
        Node right_node = query(right_child, mid+1, r, max(ql, mid+1), qr);
        return merge(left_node, right_node);

   However, this is safe because the two segments are adjacent? [ql, mid] and [mid+1, qr] are adjacent. So we can merge.

   But what if the query is only in one child? We have conditions above.

   Alternatively, we can do:

        Node res;
        if (ql <= mid) {
            left_node = query(left_child, l, mid, ql, min(qr, mid));
        }
        if (qr > mid) {
            right_node = query(right_child, mid+1, r, max(ql, mid+1), qr);
        }
        then if we have both, merge them. Otherwise, return the one that exists.

   This is safe.

 Implementation:

   We'll use 0-indexed for the string.

   We are going to build the segment tree in an array of size 4*N.

   Steps:

      - Read N, Q and the string s.
      - Build the segment tree: build(0, 0, N-1).
      - For each query:
            if update: update(0, 0, N-1, index, char)
            if query: 
                 Node res = query(0, 0, N-1, l, r);
                 output res.dens

   Important: the update changes the string, so we also update the global string? Actually, we can store the string and update the leaf accordingly. But note: we don't really need the global string for anything after building? However, in the update we change the leaf, so we can update the global string as well to reflect the current state? Actually, we can update the global string so that if we need to rebuild we have the current state? But the segment tree is updated. However, we are going to update the leaf by the new character.

   We'll store the string in a global variable and update it at the leaf update.

   However, note: the problem constraints are up to 200,000, so we can update the string.

   Let's code accordingly.

   Note: We must use long long for dens because the maximum run length could be 200000, and 200000^2 is 40e9 which fits in long long (since we have up to 200000 operations, and the total density for a segment might be as large as O(n^2) for one segment? Actually, worst-case density for a segment of length n: if all characters are the same, then density = n^2. n<=200000 -> 200000^2 = 40e9 which fits in long long (which is at least 64 bits).

   So we use long long for dens.

   Let's code accordingly.

   We'll define:

        struct Node {
            int size;
            char lc, rc;
            int lrun, rrun;
            long long dens;
            Node() : size(0), lc(0), rc(0), lrun(0), rrun(0), dens(0) {}
            Node(int sz, char left_char, char right_char, int left_run, int right_run, long long density) : 
                 size(sz), lc(left_char), rc(right_char), lrun(left_run), rrun(right_run), dens(density) {}
        };

   Then the merge function:

        Node merge(Node L, Node R) {
            if (L.size == 0) return R;
            if (R.size == 0) return L;
            Node res;
            res.size = L.size + R.size;
            res.lc = L.lc;
            res.rc = R.rc;

            // Left run of the merged node
            if (L.lrun == L.size && L.rc == R.lc) {
                res.lrun = L.lrun + R.lrun;
            } else {
                res.lrun = L.lrun;
            }

            // Right run of the merged node
            if (R.rrun == R.size && L.rc == R.lc) {
                res.rrun = R.rrun + L.rrun;
            } else {
                res.rrun = R.rrun;
            }

            res.dens = L.dens + R.dens;
            if (L.rc == R.lc) {
                // Subtract the squares of the two runs that are merging: the run at the end of L and the run at the start of R.
                long long subtract = (long long)L.rrun * L.rrun + (long long)R.lrun * R.lrun;
                long long add = (long long)(L.rrun + R.lrun) * (L.rrun + R.lrun);
                res.dens = res.dens - subtract + add;
            }
            return res;
        }

   Now, the build and update:

        void build(int node, int l, int r) {
            if (l == r) {
                tree[node] = Node(1, s[l], s[l], 1, 1, 1);
                return;
            }
            int mid = (l + r) / 2;
            build(left_child, l, mid);
            build(right_child, mid+1, r);
            tree[node] = merge(tree[left_child], tree[right_child]);
        }

        void update(int node, int l, int r, int idx, char c) {
            if (l == r) {
                s[l] = c;   // update the global string? Actually, we can, but note: the segment tree doesn't use the global string after building? 
                // However, if we do multiple updates, we want to update the leaf. But we don't use the global string in the segment tree again? 
                // Actually, we only use the leaf value to build the node. So we update the leaf and then set the node.
                tree[node] = Node(1, c, c, 1, 1, 1);
                return;
            }
            int mid = (l + r) / 2;
            if (idx <= mid) {
                update(left_child, l, mid, idx, c);
            } else {
                update(right_child, mid+1, r, idx, c);
            }
            tree[node] = merge(tree[left_child], tree[right_child]);
        }

   Query:

        Node query(int node, int l, int r, int ql, int qr) {
            if (ql <= l && r <= qr) {
                return tree[node];
            }
            int mid = (l + r) / 2;
            Node left_node, right_node;
            bool left_used = false;
            bool right_used = false;
            if (ql <= mid) {
                left_node = query(left_child, l, mid, ql, min(qr, mid));
                left_used = true;
            }
            if (qr > mid) {
                right_node = query(right_child, mid+1, r, max(ql, mid+1), qr);
                right_used = true;
            }
            if (left_used && right_used) {
                return merge(left_node, right_node);
            } else if (left_used) {
                return left_node;
            } else if (right_used) {
                return right_node;
            }
            // This should not happen because ql<=r and qr>=l, so one of them must be used?
            return Node(); // identity node (size 0)
        }

   We'll use:

        left_child = 2*node+1, right_child = 2*node+2.

   Main:

        int main() {
            ios::sync_with_stdio(false);
            cin.tie(0);
            int N, Q;
            cin >> N >> Q;
            cin >> s;
            // Build the tree: [0, N-1]
            build(0, 0, N-1);
            for (int i=0; i<Q; i++) {
                int type;
                cin >> type;
                if (type == 1) {
                    int idx; char c;
                    cin >> idx >> c;
                    // update index idx-1 to c
                    update(0, 0, N-1, idx-1, c);
                } else {
                    int l, r;
                    cin >> l >> r;
                    Node res = query(0, 0, N-1, l-1, r-1);
                    cout << res.dens << '\n';
                }
            }
        }

   Let's test with sample:

        Input: 
            9 3
            aabcccacc
            Query: 2 1 9 -> entire string

        How to compute the entire string?
            "aabcccacc" -> break into runs: "aa", "b", "ccc", "a", "cc"?
            Actually: 
                a a b c c c a c c -> runs: 
                  "aa" -> 2 -> 4
                  "b" -> 1 -> 1
                  "ccc" -> 3 -> 9
                  "a" -> 1 -> 1
                  "cc" -> 2 -> 4
                total = 4+1+9+1+4 = 19.

        How does our segment tree compute?

            We build the tree recursively.

            The entire string: 
                left half: "aabcc" -> 
                    left: "aab" -> 
                         left: "aa" -> 
                              left: 'a' -> (1, 'a','a',1,1,1)
                              right: 'a' -> (1, 'a','a',1,1,1) -> merge: 
                                  size=2, lc='a', rc='a', lrun=2 (because left.lrun=1 and left.size=1, and left.rc='a'==right.lc='a' -> so 1+1=2), rrun=2, dens= (1+1) - (1+1) + (2^2)= 0+4 -> 4? 
                                  Actually: 
                                      Initially: 1+1=2.
                                      Then subtract: 1^2 (from left.rrun=1) and 1^2 (from right.lrun=1) -> subtract 2 -> becomes 0? Then add 2^2=4 -> becomes 4.
                         So "aa": (2, 'a','a',2,2,4)
                    Then "aa" and "b": 
                         left: "aa" (2, 'a','a',2,2,4), right: "b" (1, 'b','b',1,1,1)
                         Merge: 
                            size=3
                            lc='a', rc='b'
                            lrun: left.lrun=2 (which equals left.size=2) and left.rc='a' != right.lc='b' -> so lrun=2.
                            rrun: right.rrun=1 (which equals right.size=1) -> but left.rc='a' != 'b'? so rrun=1.
                            dens = 4+1 = 5. (no merge at boundary because 'a' != 'b')
                         So "aab": (3, 'a','b',2,1,5)

                    Similarly, the right half of the entire left half: "cc" -> 
                         two 'c's: (2, 'c','c',2,2,4)

                    Then merge "aab" and "cc": 
                         "aabcc": 
                         lc='a', rc='c'
                         lrun: left.lrun=2 (which is not the entire left segment? left.size=3 -> so lrun=2)
                         rrun: right.rrun=2 (which is the entire right segment) -> but left.rc='b' != 'c', so rrun=2.
                         dens = 5+4 = 9.

                The entire right half: "cacc" -> 
                    left: "ca" -> 
                         left: 'c' -> (1, 'c','c',1,1,1)
                         right: 'a' -> (1, 'a','a',1,1,1) -> merge: 
                             size=2, lc='c', rc='a', lrun=1 (because 'c' != 'a'), rrun=1, dens=1+1=2.
                    right: "cc" -> (2, 'c','c',2,2,4)
                    Then merge "ca" and "cc": 
                         "cacc" -> 
                         lc='c', rc='c'
                         lrun: left.lrun=1 (left.size=2? no, so lrun=1) -> but note: the left segment "ca" has lrun=1? because it starts with 'c' and then breaks? yes.
                         Actually, the left segment "ca" has two runs: 'c' and 'a'. So the entire segment is not a run -> lrun=1.
                         rrun: right.rrun=2 (which is entire right segment) -> and left.rc='a' != right.lc='c', so rrun=2.
                         dens = 2 (from "ca") + 4 (from "cc") = 6. 
                         Then check boundary: left.rc='a' != 'c' -> so no adjustment.

                Then merge the entire left half "aabcc" and the entire right half "cacc": 
                    "aabcccacc"
                    lc='a', rc='c'
                    lrun: left.lrun=2 (from "aa") -> remains 2.
                    rrun: right.rrun=2 (from "cc") -> remains 2.
                    dens = 9 (from left) + 6 (from right) = 15.
                    Then at the boundary: left.rc='c' (from "aabcc" -> the last character is the last of "cc" -> 'c') and right.lc='c' (from "cacc" -> first character is 'c') -> so we merge the last run of left and the first run of right.

                    How long is the last run of left? 
                         The entire left half: "aabcc" -> 
                             runs: "aa", "b", "cc" -> the last run is "cc" -> length=2 (so left.rrun=2? yes, because the entire left segment ends with two 'c's -> so rrun=2).
                    How long is the first run of the right half?
                         The entire right half: "cacc" -> 
                             runs: "c", "a", "cc" -> the first run is "c" -> length=1? 
                         But note: the node for the right half: 
                             We built the right half by merging "ca" and "cc". 
                             The node for "ca": (2, 'c','a',1,1,2) -> so rrun=1? 
                             Then we merged with "cc": 
                                 The merged node for "cacc": 
                                    lrun: 1 (because the entire left segment "ca" is not a run? and we set lrun=1 from "ca")
                                    rrun: 2 (from "cc")
                         How did we set the rrun? 
                             Condition: the entire right segment "cc" has rrun=2 (which equals its size) -> but the boundary between "ca" and "cc": left.rc='a' and right.lc='c' -> so no merge -> so rrun is taken as the right child's rrun which is 2.

                         But what about the first run? The entire segment "cacc" has lrun=1? because the first character is 'c', then next is 'a' -> so lrun=1.

                    Therefore, we subtract: 2^2 + 1^2 = 4+1=5 -> then add (2+1)^2=9 -> so the adjustment: 15-5+9=19.

                So we get 19.

        Then update: change index 7 (0-indexed index 6) from 'a' to 'c'. The string becomes: 
            Original: aabcccacc -> after update: aabcccccc? 
            Actually, the string: 
                indices: 0-indexed: 
                  0:a, 1:a, 2:b, 3:c, 4:c, 5:c, 6:a -> becomes 'c', then 7:c, 8:c
                So the string: aabcccccc

            Then query [2,8] (0-indexed [1,7]): substring = "abcccccc" -> 
                runs: 
                  "a" -> 1
                  "b" -> 1
                  "cccccc" -> 6
                density = 1+1+36 = 38? 
            But the sample output is 27.

            Wait, the sample output after update is 27? 

            The sample input says:
                Output: 
                    19
                    27

            So the second query is for [2,8] (1-indexed) -> 0-indexed [1,7]: 
                Original string after update: 
                  index0: 'a'
                  index1: 'a' -> becomes part of the substring? [1,7] -> index1 to index6? 
                  Actually: 
                    s = "aabcccccc" (if we change the 7th character to 'c', and the 7th character in 1-indexed is the 7th, which is index6? and the substring [2,8] in 1-indexed: 
                         positions: 
                           2: index1 -> 'a'
                           3: index2 -> 'b'
                           4: index3 -> 'c'
                           5: index4 -> 'c'
                           6: index5 -> 'c'
                           7: index6 -> 'c'   (changed to 'c')
                           8: index7 -> 'c'   -> but wait, the substring [2,8] in 1-indexed has 7 characters? 
                         Actually, the string has length 9: 
                            indices 0..8: 
                               0: a, 1: a, 2: b, 3: c, 4: c, 5: c, 6: c, 7: c, 8: c.
                         Query [2,8]: 
                            from index1 to index7: 
                            s[1]='a', s[2]='b', s[3]='c', s[4]='c', s[5]='c', s[6]='c', s[7]='c' -> 
                            runs: 
                                "a" -> 1 -> 1
                                "b" -> 1 -> 1
                                "ccccc" -> 5 -> 25
                            total=27.

            So we must get 27.

            How does our segment tree compute for [1,7] (0-indexed indices 1 to 7)?

            We'll break the segment [1,7] in the tree.

            Alternatively, we can note: the entire string after update is "aabcccccc", and we are taking indices 1 to 7: 
                The entire string: 
                  We have runs: 
                     "aa" -> 2 -> 4
                     "b" -> 1 -> 1
                     "cccccc" -> 6 -> 36
                  total=4+1+36=41? 
                But then we remove the first character and the last character? 
                Actually, we are taking a substring.

            So we must compute the density for [1,7] only.

            How the segment tree does it? It will break the segment [1,7] and then merge.

            We trust the segment tree to compute it correctly.

            So we output 27.

   Therefore, the code should be as above.

   We'll code accordingly.

   Note: We are updating the global string s in the update function. We do that so that if we ever need to rebuild we have the current state? Actually, we don't use the global string for building the leaves? We build the leaves by the character we passed? But in the update, we update the global string and then set the leaf node to the new character. So it's consistent.

   However, we don't really need the global string for the segment tree operations. We are storing the entire segment tree. We could remove the global string update? But we update the leaf node by the new character. The global string is only used for the initial build and then we update it for the sake of consistency? Actually, the leaf update does not use the global string: we set the leaf node to Node(1, c, c, 1,1,1) and we update the global string to c. So it's redundant? We can remove the update of the global string? Or we can remove the global string entirely after the initial build? 

   But note: if we remove the global string, then we don't have the current state? Actually, the segment tree stores the entire state. The global string is not used in the segment tree after the build. So we can skip updating the global string? 

   However, the problem does not require the entire string to be output. So we can do without the global string? Actually, the update function doesn't need the global string. We are updating the leaf node by the new character. So we can remove:

        s[l] = c;

   from the update leaf. 

   But note: the initial build uses the global string. And then we update the global string in the update? Actually, if we remove the update of the global string, then the global string becomes outdated. But we don't use it again. So we can remove that line.

   Alternatively, we can remove the global string and store the initial string as a vector? Actually, we don't need it after building the tree.

   We'll remove the update of the global string in the update function? Actually, the problem does not require us to output the entire string. The segment tree is self-contained.

   However, for clarity, we'll keep the global string and update it so that if we ever want to print the entire string we can? But the problem doesn't require that.

   Since the constraints are high, and updating one character in the string is O(1), we can update the global string. It doesn't hurt.

   But note: the problem says the string is 200000 characters and we have 200000 updates, and updating one character is O(1), so we can do it.

   We'll leave it.

   Let's run the sample.

   We'll write the code accordingly.

   One more note: the segment tree node indices: we use 0-indexed for the array and the string.

   We'll define:
        left_child = 2*node+1
        right_child = 2*node+2

   We'll use an array tree[4*MAXN] of Nodes.

   We'll write the code accordingly.

   We hope it passes.

   Let's code accordingly.