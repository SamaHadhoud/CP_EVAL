To solve this problem, we need to determine if it's possible to form an axis-aligned square such that all given points lie on its borders. The square can be degenerate (i.e., a single point). The solution involves checking several candidate squares derived from the extreme coordinates of the points.

### Approach
1. **Problem Analysis**: The problem requires connecting all given points to form an axis-aligned square (sides parallel to the coordinate axes) where every point lies on the border of the square. The solution must find any such square defined by two opposite corners or report if it's impossible.
2. **Key Insights**:
   - The square must enclose all points, so its borders must align with or extend beyond the extreme coordinates of the points.
   - The side length of the square must be equal in both dimensions (i.e., \(s = X_2 - X_1 = Y_2 - Y_1\)).
   - The minimal side length \(s\) must be at least the maximum of the spreads in the \(x\) and \(y\) directions (\(s \geq \max(\text{max}_x - \text{min}_x, \text{max}_y - \text{min}_y)\)).
3. **Candidate Generation**:
   - **Base Candidates**: Four candidates aligned with the extreme coordinates, using the maximal spread \(s_0 = \max(\text{max}_x - \text{min}_x, \text{max}_y - \text{min}_y)\).
   - **Additional Candidates**: If the spread in \(x\) is larger, generate two candidates with fixed left and right borders, adjusting the top and bottom borders. Similarly, if the spread in \(y\) is larger, generate two candidates with fixed top and bottom borders, adjusting the left and right borders.
4. **Validation**: For each candidate square, check if all points lie on any of its four borders (left, right, top, or bottom).
5. **Output**: The first valid candidate found is printed; if no valid candidate exists, output "Impossible".

### Solution Code
```cpp
#include <iostream>
#include <vector>
#include <set>
#include <algorithm>
#include <tuple>
#include <climits>
using namespace std;

typedef long long LL;

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);

    int n;
    cin >> n;
    vector<LL> xs, ys;
    vector<pair<LL,LL>> points;
    for (int i=0; i<n; i++) {
        LL x, y;
        cin >> x >> y;
        xs.push_back(x);
        ys.push_back(y);
        points.push_back({x,y});
    }

    LL min_x = *min_element(xs.begin(), xs.end());
    LL max_x = *max_element(xs.begin(), xs.end());
    LL min_y = *min_element(ys.begin(), ys.end());
    LL max_y = *max_element(ys.begin(), ys.end());

    LL s1 = max_x - min_x;
    LL s2 = max_y - min_y;
    LL s0 = max(s1, s2);

    set<tuple<LL,LL,LL,LL>> candSet;

    candSet.insert(make_tuple(min_x, min_x + s0, min_y, min_y + s0));
    candSet.insert(make_tuple(min_x, min_x + s0, max_y - s0, max_y));
    candSet.insert(make_tuple(max_x - s0, max_x, min_y, min_y + s0));
    candSet.insert(make_tuple(max_x - s0, max_x, max_y - s0, max_y));

    if (s1 >= s2) {
        candSet.insert(make_tuple(min_x, max_x, min_y, min_y + s1));
        candSet.insert(make_tuple(min_x, max_x, max_y - s1, max_y));
    }
    if (s2 >= s1) {
        candSet.insert(make_tuple(min_x, min_x + s2, min_y, max_y));
        candSet.insert(make_tuple(max_x - s2, max_x, min_y, max_y));
    }

    for (auto cand : candSet) {
        LL x1, x2, y1, y2;
        tie(x1, x2, y1, y2) = cand;

        bool valid = true;
        for (int i=0; i<n; i++) {
            LL x = points[i].first;
            LL y = points[i].second;
            if (x == x1 || x == x2 || y == y1 || y == y2) {
                continue;
            }
            valid = false;
            break;
        }
        if (valid) {
            cout << x1 << " " << x2 << " " << y1 << " " << y2 << endl;
            return 0;
        }
    }

    cout << "Impossible" << endl;
    return 0;
}
```

### Explanation
1. **Reading Input**: The input consists of the number of points \(N\) followed by their coordinates. These are stored in vectors for processing.
2. **Extreme Coordinates**: The minimum and maximum \(x\) and \(y\) values among all points are computed to determine the bounding box.
3. **Spread Calculation**: The spreads \(s_x\) (difference in \(x\)) and \(s_y\) (difference in \(y\)) are calculated, along with \(s_0\) (the maximum of these spreads).
4. **Candidate Squares**: Eight candidate squares are generated:
   - Four base candidates aligned with the extreme coordinates using \(s_0\).
   - Two additional candidates if \(s_x \geq s_y\), adjusting the top and bottom borders.
   - Two additional candidates if \(s_y \geq s_x\), adjusting the left and right borders.
5. **Validation**: Each candidate square is checked to ensure all points lie on at least one of its borders (left, right, top, or bottom).
6. **Output**: The first valid candidate is printed; if no candidate satisfies the condition, "Impossible" is printed.

This approach efficiently checks all plausible squares by leveraging the constraints and properties of axis-aligned squares, ensuring optimal performance even for large inputs.