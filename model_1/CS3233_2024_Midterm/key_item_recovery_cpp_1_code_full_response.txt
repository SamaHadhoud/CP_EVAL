To solve this problem, we need to reconstruct a tree (Town Map) from an N x N matrix where each entry \(A_{i,j}\) represents the minimum town label on the unique path between towns \(i\) and \(j\) in the original tree. The solution leverages the properties of the minimum label in tree paths and constructs the tree incrementally by adding nodes in increasing order of their labels.

### Approach
1. **Problem Analysis**: The original graph is a tree, meaning there is exactly one unique path between any two nodes. The minimum label on the path from \(i\) to \(j\) is the smallest node on that path. The node with label 1 is the smallest in the tree and will be the root. For any node \(i\), the path from \(i\) to 1 must include node 1, so \(A_{i,1} = 1\).

2. **Key Insight**: When adding a node \(i\) (from 2 to N), its parent \(p\) must satisfy \(A_{i,p} = p\) (since \(p < i\)). Among all possible candidates, the parent \(p\) is the maximum value in the \(i\)-th row of the matrix for columns corresponding to nodes already in the tree (labels 1 to \(i-1\)).

3. **Algorithm**:
   - Start with the tree containing only node 1.
   - For each subsequent node \(i\) from 2 to \(N\):
     - Examine the \(i\)-th row of the matrix.
     - Determine the parent \(p\) as the maximum value in this row for columns corresponding to nodes 1 to \(i-1\).
     - Record the edge between \(i\) and \(p\).
   - Sort the edges in descending order of the parent (minimum node in the edge) and ascending order of the child (maximum node in the edge) for ties.
   - Output the sorted edges.

### Solution Code
```cpp
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int main() {
    int n;
    cin >> n;
    vector<vector<int>> matrix(n, vector<int>(n));
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cin >> matrix[i][j];
        }
    }

    vector<pair<int, int>> edges;

    for (int i = 2; i <= n; i++) {
        int row_index = i - 1;
        int parent = 0;
        for (int j = 0; j < i - 1; j++) {
            if (matrix[row_index][j] > parent) {
                parent = matrix[row_index][j];
            }
        }
        edges.push_back(make_pair(parent, i));
    }

    sort(edges.begin(), edges.end(), [](const pair<int, int>& a, const pair<int, int>& b) {
        if (a.first != b.first) {
            return a.first > b.first;
        }
        return a.second < b.second;
    });

    for (auto& edge : edges) {
        cout << edge.first << " " << edge.second << endl;
    }

    return 0;
}
```

### Explanation
1. **Reading Input**: The input consists of an integer \(N\) (number of towns) followed by an \(N \times N\) matrix \(A\).
2. **Tree Construction**:
   - Initialize the tree with node 1.
   - For each node \(i\) from 2 to \(N\):
     - Extract the \(i\)-th row of the matrix (0-indexed as row \(i-1\)).
     - The parent \(p\) of \(i\) is the maximum value \(A_{i,j}\) for \(j\) from 1 to \(i-1\) (nodes already in the tree).
     - Add the edge \((p, i)\) to the list of edges.
3. **Sorting Edges**: The edges are sorted in descending order of the parent node (minimum node in the edge) and ascending order of the child node (maximum node in the edge) for edges with the same parent.
4. **Output**: The sorted edges are printed, each as "p i" representing an edge between towns \(p\) and \(i\).

This approach efficiently reconstructs the tree by leveraging the properties of the minimum label in tree paths and ensures correctness by validating parent selection against the given matrix constraints. The complexity is \(O(N^2)\), which is feasible for \(N \leq 1500\).