To solve this problem, we need to reconstruct a tree (Town Map) from an N x N matrix where each entry \(A_{i,j}\) represents the minimum town label on the unique path between towns \(i\) and \(j\) in the original tree. The solution leverages the properties of the minimum label in tree paths and constructs the tree incrementally by adding nodes in increasing order of their labels.

### Approach
1. **Problem Analysis**: The problem involves reconstructing a tree from a given matrix where each entry \(A_{i,j}\) is the smallest node on the path between nodes \(i\) and \(j\). The tree must satisfy the condition that for any two nodes \(i\) and \(j\), the minimum node on their path is exactly \(A_{i,j}\).

2. **Key Insight**: The node with the smallest label (label 1) is the global minimum. For any node \(i\), the path from \(i\) to node 1 must include node 1, so \(A_{i,1} = 1\). When adding a node \(i\) (from 2 to N), its parent \(p\) must satisfy \(A_{i,p} = p\) (since \(p\) must be the smallest node on the path between \(i\) and \(p\)).

3. **Algorithm Selection**: 
   - **Initialization**: Start with the tree containing only node 1.
   - **Iterative Node Addition**: For each node \(i\) from 2 to \(N\):
     - Examine the \(i\)-th row of the matrix (0-indexed as row \(i-1\)).
     - The parent \(p\) of \(i\) is the maximum value in the first \(i-1\) elements of this row (corresponding to nodes 1 to \(i-1\) already in the tree).
     - Add an edge between \(i\) and \(p\).
   - **Edge Representation and Ordering**: Each edge is stored as a tuple \(( \min(i, p), \max(i, p) )\). The list of edges is sorted in descending order of the minimum node, and ascending order of the maximum node for ties to match the sample output format.

### Solution Code
```python
n = int(input().strip())
matrix = []
for _ in range(n):
    matrix.append(list(map(int, input().split())))
edges = []
for i in range(2, n + 1):
    row = matrix[i - 1]
    M = 0
    for j in range(1, i):
        if row[j - 1] > M:
            M = row[j - 1]
    u = min(i, M)
    v = max(i, M)
    edges.append((u, v))
edges.sort(key=lambda x: (-x[0], x[1]))
for u, v in edges:
    print(f"{u} {v}")
```

### Explanation
1. **Reading Input**: The input consists of an integer \(N\) (number of towns) followed by an \(N \times N\) matrix \(A\) where \(A_{i,j}\) is the minimum node on the path from \(i\) to \(j\).
2. **Tree Construction**:
   - **Initialization**: The tree starts with node 1.
   - **Adding Nodes**: For each subsequent node \(i\) (from 2 to \(N\)):
     - The parent \(p\) is determined as the maximum value in the \(i\)-th row for columns corresponding to nodes 1 to \(i-1\) (already in the tree).
     - An edge between \(i\) and \(p\) is added to the list of edges, stored as \(( \min(i, p), \max(i, p) )\).
3. **Output Preparation**: 
   - The list of edges is sorted in descending order of the minimum node in each edge. For edges with the same minimum node, they are sorted in ascending order of the maximum node.
4. **Output**: The sorted edges are printed, each as "u v" where \(u\) and \(v\) are the connected towns.

This approach efficiently reconstructs the tree by leveraging the properties of the minimum label in tree paths, ensuring correctness by validating parent selection against the given matrix constraints. The complexity is \(O(N^2)\), which is feasible for \(N \leq 1500\).