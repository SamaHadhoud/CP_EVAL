To solve this problem, we need to compute the sum of the squares of the sums of vertex values over all independent sets in a connected cactus graph. A cactus graph is characterized by the property that each edge lies in at most one simple cycle. The solution involves leveraging dynamic programming (DP) to efficiently handle the graph structure, considering both tree edges and cycles.

### Approach
1. **Problem Analysis**: The problem requires summing the squares of the sums of vertex values for all independent sets in a cactus graph. An independent set is a subset of vertices where no two vertices are adjacent. The challenge lies in efficiently processing the graph structure, especially handling cycles without double-counting or missing any sets.

2. **Key Insight**: The score for an independent set \( S \) is \( F(S) = \left( \sum_{v \in S} a_v \right)^2 \). This can be expanded into a sum of squares and cross terms, but directly computing these terms is infeasible for large graphs. Instead, we use DP to maintain counts, linear sums, and quadratic sums of independent sets.

3. **Dynamic Programming States**: For each node \( u \), maintain two states:
   - \( dp[u][0] \): Represents the count, sum of values, and sum of squares for independent sets where \( u \) is not included.
   - \( dp[u][1] \): Similar, but where \( u \) is included.

4. **Handling Graph Components**:
   - **Tree Edges (Bridges)**: For each child \( v \) connected by a bridge, update the DP states by merging the child's states into the parent's states.
   - **Cycles**: When a back edge is detected during DFS, extract the cycle. Process the cycle by considering two cases: the root is taken or not taken. Use linear DP over the cycle's nodes (as a chain) to compute the states, ensuring no adjacent nodes in the cycle are included if the root is taken.

5. **State Convolution**: When combining states from different components, use a convolution operation that correctly aggregates counts, sums, and sums of squares:
   - \( c = c1 \times c2 \)
   - \( s = c1 \times s2 + c2 \times s1 \)
   - \( ss = c1 \times ss2 + c2 \times ss1 + 2 \times s1 \times s2 \)

6. **Complexity**: The algorithm processes each node and edge exactly once. The total length of all chains in cycles is \( O(n) \) due to the cactus property, leading to an overall \( O(n) \) complexity.

### Solution Code
```cpp
#include <bits/stdc++.h>
using namespace std;

const int MOD = 998244353;
const int N = 1e5 + 5;
using ll = long long;

struct State {
    int c;
    int s;
    int ss;
    State(int c = 0, int s = 0, int ss = 0) : c(c), s(s), ss(ss) {}
};

State operator+(const State& a, const State& b) {
    return State((a.c + b.c) % MOD, (a.s + b.s) % MOD, (a.ss + b.ss) % MOD);
}

State operator*(const State& a, const State& b) {
    int c = (ll)a.c * b.c % MOD;
    int s = ((ll)a.s * b.c % MOD + (ll)a.c * b.s % MOD) % MOD;
    int ss = ((ll)a.ss * b.c % MOD + (ll)a.c * b.ss % MOD + 2LL * a.s % MOD * b.s % MOD) % MOD;
    return State(c, s, ss);
}

int n, m;
int a[N];
vector<int> g[N];
int parent[N], depth[N];
State dp[N][2];
bool visited[N];
set<pair<int, int>> cycle_edges;
vector<vector<int>> cycles_for_node[N];

State linear_chain(const vector<int>& chain, bool force_first, bool force_last) {
    int n = chain.size();
    if (n == 0) {
        return State(1, 0, 0);
    }
    State f0, f1;
    if (force_first) {
        f0 = dp[chain[0]][0];
        f1 = State(0, 0, 0);
    } else {
        f0 = dp[chain[0]][0];
        f1 = dp[chain[0]][1];
    }

    for (int i = 1; i < n; i++) {
        State next_f0 = (f0 + f1) * dp[chain[i]][0];
        State next_f1 = f0 * dp[chain[i]][1];
        f0 = next_f0;
        f1 = next_f1;
    }

    if (force_last) {
        return f0;
    } else {
        return f0 + f1;
    }
}

void dfs(int u, int p) {
    visited[u] = true;
    depth[u] = (p == -1 ? 0 : depth[p] + 1);
    parent[u] = p;
    dp[u][0] = State(1, 0, 0);
    dp[u][1] = State(1, a[u], (ll)a[u] * a[u] % MOD);

    for (int v : g[u]) {
        if (v == p) continue;
        if (!visited[v]) {
            dfs(v, u);
        } else if (depth[v] < depth[u]) {
            vector<int> cycle;
            int cur = u;
            while (cur != v) {
                cycle.push_back(cur);
                cur = parent[cur];
            }
            cycle.push_back(v);
            cycles_for_node[v].push_back(cycle);
            for (int i = 0; i < (int)cycle.size(); i++) {
                int uu = cycle[i];
                int vv = (i + 1 < cycle.size()) ? cycle[i+1] : cycle[0];
                if (uu > vv) swap(uu, vv);
                cycle_edges.insert({uu, vv});
            }
        }
    }

    for (int v : g[u]) {
        if (v == p) continue;
        if (depth[v] == depth[u] + 1) {
            pair<int, int> edge = {min(u, v), max(u, v)};
            if (cycle_edges.find(edge) != cycle_edges.end()) {
                continue;
            }
            dp[u][0] = dp[u][0] * (dp[v][0] + dp[v][1]);
            dp[u][1] = dp[u][1] * dp[v][0];
        }
    }

    for (auto& cycle : cycles_for_node[u]) {
        vector<int> chain = cycle;
        chain.pop_back();
        reverse(chain.begin(), chain.end());
        State total_chain = linear_chain(chain, false, false);
        State safe_chain = linear_chain(chain, true, true);
        dp[u][0] = dp[u][0] * total_chain;
        dp[u][1] = dp[u][1] * safe_chain;
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);

    cin >> n >> m;
    for (int i = 1; i <= n; i++) {
        cin >> a[i];
    }
    for (int i = 0; i < m; i++) {
        int u, v;
        cin >> u >> v;
        g[u].push_back(v);
        g[v].push_back(u);
    }

    dfs(1, -1);

    State total = dp[1][0] + dp[1][1];
    cout << total.ss << endl;

    return 0;
}
```

### Explanation
1. **Initialization**: The graph is read, and each vertex's value is stored. The adjacency list is built.
2. **DFS Traversal**: The DFS processes each node, maintaining depth and parent pointers. When a back edge is found, the cycle is recorded, and its edges are marked.
3. **Dynamic Programming**: For each node, the DP states are initialized. Tree edges are processed by merging child states into the parent's states. Marked cycle edges are skipped during this merge.
4. **Cycle Processing**: For each cycle rooted at a node, the cycle is processed as a chain. Linear DP computes the states for the chain, considering constraints where the root