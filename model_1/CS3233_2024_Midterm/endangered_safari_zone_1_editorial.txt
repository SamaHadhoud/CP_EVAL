### Approach
The problem involves efficiently handling two types of operations on an array: updating the species of a Pokémon at a specific zone and querying the number of distinct species that appear at most K times in a given range [A, B]. Given the constraints (N, M, K up to 100,000), a direct approach for each query would be too slow. Instead, we use an offline processing technique known as **Mo's Algorithm with Updates**, which efficiently handles range queries and point updates by processing them in a specific order.

#### Key Insights
1. **Distinct Species with Frequency Constraint**: For each query [A, B], we need the count of distinct species where their frequency in [A, B] is between 1 and K (inclusive). This can be expressed as:
   - **Total distinct species** in [A, B] minus the **distinct species that appear more than K times** (bad species).
2. **Maintaining Frequencies**: To compute these values dynamically as the range changes, we maintain:
   - A frequency array for each species in the current range.
   - The number of distinct species (`distinct_count`).
   - The number of bad species (`bad_count`), i.e., species with frequency > K.
3. **Handling Updates**: Point updates (changing a species at a zone) require adjusting the frequency counts if the updated zone is within the current query range.
4. **Mo's Algorithm with Updates**: This algorithm extends Mo's algorithm to handle updates by treating them as a third dimension (time). Queries are sorted into blocks based on left endpoint, right endpoint, and the number of updates applied. This ordering minimizes the number of operations when moving between queries.

#### Algorithm Selection
- **Block Size**: The optimal block size is \(N^{2/3}\), leading to a time complexity of \(O((N + Q) \cdot N^{2/3})\), which is feasible for \(N, Q \leq 100,000\).
- **Processing Queries**:
  - **Adjust Time**: Apply or revert updates to match the query's timestamp.
  - **Adjust Range**: Expand or shrink the current range to match the query's range.
  - **Update Frequencies**: When adding or removing an element, update `distinct_count` and `bad_count` based on frequency changes.
- **Answer Calculation**: For each query, the result is `distinct_count - bad_count`.

### Solution Code
```cpp
#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>

using namespace std;

const int MAXN = 100005;

struct Query {
    int time, l, r, idx;
};

struct Update {
    int pos, old_val, new_val;
};

int block_size;
vector<int> arr;
vector<Query> queries;
vector<Update> updates;
vector<int> ans;
vector<int> freq;
int distinct_count, bad_count;
int N, M, K;

bool cmp(const Query &a, const Query &b) {
    int block_a_l = a.l / block_size;
    int block_b_l = b.l / block_size;
    if (block_a_l != block_b_l) {
        return block_a_l < block_b_l;
    }
    int block_a_r = a.r / block_size;
    int block_b_r = b.r / block_size;
    if (block_a_r != block_b_r) {
        if (block_a_l % 2 == 0) {
            return block_a_r < block_b_r;
        } else {
            return block_a_r > block_b_r;
        }
    }
    return a.time < b.time;
}

void add_element(int i) {
    int species = arr[i];
    int &count = freq[species];
    if (count == 0) {
        distinct_count++;
    }
    count++;
    if (count == K + 1) {
        bad_count++;
    }
}

void remove_element(int i) {
    int species = arr[i];
    int &count = freq[species];
    if (count == K + 1) {
        bad_count--;
    }
    count--;
    if (count == 0) {
        distinct_count--;
    }
}

void apply_update(const Update &u, int current_l, int current_r) {
    if (current_l <= u.pos && u.pos <= current_r) {
        remove_element(u.pos);
    }
    arr[u.pos] = u.new_val;
    if (current_l <= u.pos && u.pos <= current_r) {
        add_element(u.pos);
    }
}

void unapply_update(const Update &u, int current_l, int current_r) {
    if (current_l <= u.pos && u.pos <= current_r) {
        remove_element(u.pos);
    }
    arr[u.pos] = u.old_val;
    if (current_l <= u.pos && u.pos <= current_r) {
        add_element(u.pos);
    }
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    cin >> N >> M >> K;
    arr.resize(N);
    freq.assign(MAXN, 0);
    for (int i = 0; i < N; i++) {
        cin >> arr[i];
    }

    vector<int> current_array = arr;
    int time_count = 0;
    int query_count = 0;

    for (int i = 0; i < M; i++) {
        int q, a, b;
        cin >> q >> a >> b;
        a--;
        if (q == 1) {
            b--;
            updates.push_back({a, current_array[a], b});
            current_array[a] = b;
            time_count++;
        } else {
            b--;
            queries.push_back({time_count, a, b, query_count++});
        }
    }

    block_size = pow(N, 2.0/3.0);
    if (block_size < 1) block_size = 1;
    sort(queries.begin(), queries.end(), cmp);

    arr = current_array;
    freq.assign(MAXN, 0);
    distinct_count = 0;
    bad_count = 0;
    int current_l = 0, current_r = -1, current_time = 0;
    ans.resize(query_count);

    for (const auto &q : queries) {
        while (current_time < q.time) {
            apply_update(updates[current_time], current_l, current_r);
            current_time++;
        }
        while (current_time > q.time) {
            current_time--;
            unapply_update(updates[current_time], current_l, current_r);
        }

        while (current_l > q.l) {
            current_l--;
            add_element(current_l);
        }
        while (current_r < q.r) {
            current_r++;
            add_element(current_r);
        }
        while (current_l < q.l) {
            remove_element(current_l);
            current_l++;
        }
        while (current_r > q.r) {
            remove_element(current_r);
            current_r--;
        }

        ans[q.idx] = distinct_count - bad_count;
    }

    for (int i = 0; i < query_count; i++) {
        cout << ans[i] << '\n';
    }

    return 0;
}
```

### Explanation
1. **Initialization**: The initial array of species is read, and we maintain a copy to track updates.
2. **Processing Operations**: For each operation:
   - **Update (Type 1)**: Store the position, old species, and new species. Update the current array.
   - **Query (Type 2)**: Store the query parameters along with the number of updates applied before it.
3. **Sorting Queries**: Queries are sorted by blocks of left endpoints, then right endpoints (with alternating order for optimization), and finally by the number of updates.
4. **Mo's Algorithm**:
   - **Time Adjustment**: Apply or revert updates to match the query's timestamp.
   - **Range Adjustment**: Expand or shrink the current range to match the query's range, updating frequencies.
   - **Tracking Counts**: Maintain `distinct_count` (species with frequency ≥ 1) and `bad_count` (species with frequency > K). The answer for each query is `distinct_count - bad_count`.
5. **Output**: Results for each query are output in the original order.

This approach efficiently handles the dynamic updates and range queries within feasible time complexity for large constraints.