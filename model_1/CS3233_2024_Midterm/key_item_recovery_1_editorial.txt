### Approach
The problem involves reconstructing a tree (Town Map) from an N x N matrix where each entry \(A_{i,j}\) represents the minimum town label on the unique path between towns \(i\) and \(j\) in the original tree. The solution leverages the properties of the minimum label in tree paths and constructs the tree incrementally by adding nodes in increasing order of their labels.

#### Key Insights:
1. **Tree Properties**: The original graph is a tree, meaning there is exactly one unique path between any two nodes. The minimum label on the path from \(i\) to \(j\) is the smallest node on that path.
2. **Global Minimum**: The node with label 1 is the smallest in the tree. For any node \(i\), the path from \(i\) to 1 must include node 1, so \(A_{i,1} = 1\).
3. **Parent Selection**: When adding a node \(i\) (from 2 to N), its parent \(p\) must satisfy:
   - \(A_{i,p} = p\): The minimum label on the direct path between \(i\) and \(p\) is \(p\) (since \(p < i\)).
   - Among all possible candidates, the parent \(p\) is the maximum value in the \(i\)-th row of the matrix for columns corresponding to nodes already in the tree (labels 1 to \(i-1\)).

#### Algorithm:
1. **Initialization**: Start with the tree containing only node 1.
2. **Iterative Node Addition**: For each node \(i\) from 2 to \(N\):
   - Extract the \(i\)-th row from the matrix (0-indexed as row \(i-1\)).
   - Determine the parent \(p\) as the maximum value in this row for columns corresponding to nodes 1 to \(i-1\).
   - Record the edge between \(i\) and \(p\).
3. **Edge Representation and Ordering**: Represent each edge as \((min(i,p), max(i,p))\). Sort all edges in descending order of the minimum node, and ascending order of the maximum node for ties. This ensures the output matches the sample format for clarity.

### Solution Code
```python
n = int(input().strip())
matrix = []
for _ in range(n):
    matrix.append(list(map(int, input().split())))

edges = []

for i in range(2, n + 1):
    row = matrix[i - 1]
    M = 0
    for j in range(1, i):
        val = row[j - 1]
        if val > M:
            M = val
    u = min(i, M)
    v = max(i, M)
    edges.append((u, v))

edges.sort(key=lambda x: (-x[0], x[1]))

for u, v in edges:
    print(f"{u} {v}")
```

### Explanation
1. **Reading Input**: The input consists of an integer \(N\) (number of towns) followed by an \(N \times N\) matrix \(A\).
2. **Tree Construction**:
   - Start with node 1 in the tree.
   - For each subsequent node \(i\) (from 2 to \(N\)):
     - Examine the row corresponding to node \(i\) in the matrix.
     - The parent \(p\) of \(i\) is the maximum value \(A_{i,j}\) for \(j\) from 1 to \(i-1\) (nodes already in the tree). This ensures \(p\) is the correct parent because the path \(i\) to \(p\) must have \(p\) as its minimum label.
     - Add the edge \((min(i,p), max(i,p))\) to the list of edges.
3. **Output Preparation**: 
   - Edges are sorted such that edges with a smaller minimum node appear last. For edges with the same minimum node, they are sorted by the maximum node in ascending order. This matches the sample output format.
4. **Output**: The sorted edges are printed, each as "u v" where \(u\) and \(v\) are the connected towns.

This approach efficiently reconstructs the tree by leveraging the properties of the minimum label in tree paths and ensures correctness by validating parent selection against the given matrix constraints. The complexity is \(O(N^2)\), which is feasible for \(N \leq 1500\).