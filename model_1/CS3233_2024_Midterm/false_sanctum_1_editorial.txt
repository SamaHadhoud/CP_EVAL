### Editorial
The problem involves maintaining a string under two operations: updating a character at a specific position and querying the "density" of a substring. The density of a substring is defined as the sum of the squares of the lengths of its maximal contiguous blocks of identical characters. Given the constraints (up to 200,000 characters and queries), an efficient solution is required.

#### Approach
1. **Problem Analysis**:
   - **Density Calculation**: For any substring, partition it into maximal contiguous blocks of the same character. The density is the sum of the squares of the lengths of these blocks. For example, the substring "aabccc" has blocks "aa" (length 2), "b" (length 1), and "ccc" (length 3), so its density is \(2^2 + 1^2 + 3^2 = 4 + 1 + 9 = 14\).
   - **Operations**: We need to handle point updates (change a character) and range queries (compute density for a substring) efficiently.

2. **Intuition**:
   - **Segment Tree**: Given the need for efficient range queries and point updates, a segment tree is suitable. Each node in the segment tree will store information about a contiguous segment of the string, enabling efficient merging of segments during queries and updates.
   - **Node Structure**: Each node stores:
     - `size`: Length of the segment.
     - `lc`, `rc`: Leftmost and rightmost characters in the segment.
     - `lrun`, `rrun`: Lengths of the runs of identical characters starting at the left and ending at the right of the segment.
     - `dens`: The density (sum of squares of runs) of the segment.
   - **Merging Segments**: When merging two adjacent segments, the key is to handle the boundary where the segments meet. If the last character of the left segment matches the first character of the right segment, their runs merge, affecting the density and run lengths.

3. **Algorithm Selection**:
   - **Segment Tree Operations**:
     - **Update**: Change a character at a specific position, then update the segment tree by propagating changes from the leaf to the root.
     - **Query**: For a range query, decompose the range into segments covered by the tree, then merge these segments while handling boundary runs to compute the overall density.

4. **Complexity Analysis**:
   - **Time Complexity**: Both update and query operations take \(O(\log N)\) time per operation due to the segment tree structure. With \(Q\) queries, the total time is \(O(Q \log N)\).
   - **Space Complexity**: The segment tree uses \(O(N)\) space.

#### Solution Code
```cpp
#include <iostream>
#include <vector>
#include <string>
using namespace std;

struct Node {
    int size;
    char lc, rc;
    int lrun, rrun;
    long long dens;
    Node() : size(0), lc(0), rc(0), lrun(0), rrun(0), dens(0) {}
    Node(int sz, char left_char, char right_char, int left_run, int right_run, long long density)
        : size(sz), lc(left_char), rc(right_char), lrun(left_run), rrun(right_run), dens(density) {}
};

const int MAXN = 200000;
Node tree[4 * MAXN];
string s;

Node merge(Node L, Node R) {
    if (L.size == 0) return R;
    if (R.size == 0) return L;
    Node res;
    res.size = L.size + R.size;
    res.lc = L.lc;
    res.rc = R.rc;

    if (L.lrun == L.size && L.rc == R.lc) {
        res.lrun = L.lrun + R.lrun;
    } else {
        res.lrun = L.lrun;
    }

    if (R.rrun == R.size && L.rc == R.lc) {
        res.rrun = R.rrun + L.rrun;
    } else {
        res.rrun = R.rrun;
    }

    res.dens = L.dens + R.dens;
    if (L.rc == R.lc) {
        long long subtract = (long long)L.rrun * L.rrun + (long long)R.lrun * R.lrun;
        long long add = (long long)(L.rrun + R.lrun) * (L.rrun + R.lrun);
        res.dens = res.dens - subtract + add;
    }
    return res;
}

void build(int node, int l, int r) {
    if (l == r) {
        tree[node] = Node(1, s[l], s[l], 1, 1, 1);
        return;
    }
    int mid = (l + r) / 2;
    build(2 * node + 1, l, mid);
    build(2 * node + 2, mid + 1, r);
    tree[node] = merge(tree[2 * node + 1], tree[2 * node + 2]);
}

void update(int node, int l, int r, int idx, char c) {
    if (l == r) {
        s[l] = c;
        tree[node] = Node(1, c, c, 1, 1, 1);
        return;
    }
    int mid = (l + r) / 2;
    if (idx <= mid) {
        update(2 * node + 1, l, mid, idx, c);
    } else {
        update(2 * node + 2, mid + 1, r, idx, c);
    }
    tree[node] = merge(tree[2 * node + 1], tree[2 * node + 2]);
}

Node query(int node, int l, int r, int ql, int qr) {
    if (ql <= l && r <= qr) {
        return tree[node];
    }
    int mid = (l + r) / 2;
    Node left_node, right_node;
    bool left_used = false, right_used = false;
    if (ql <= mid) {
        left_node = query(2 * node + 1, l, mid, ql, min(qr, mid));
        left_used = true;
    }
    if (qr > mid) {
        right_node = query(2 * node + 2, mid + 1, r, max(ql, mid + 1), qr);
        right_used = true;
    }
    if (left_used && right_used) {
        return merge(left_node, right_node);
    } else if (left_used) {
        return left_node;
    } else if (right_used) {
        return right_node;
    }
    return Node();
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int N, Q;
    cin >> N >> Q;
    cin >> s;

    build(0, 0, N - 1);

    for (int q = 0; q < Q; q++) {
        int type;
        cin >> type;
        if (type == 1) {
            int i;
            char c;
            cin >> i >> c;
            update(0, 0, N - 1, i - 1, c);
        } else {
            int l, r;
            cin >> l >> r;
            Node res = query(0, 0, N - 1, l - 1, r - 1);
            cout << res.dens << '\n';
        }
    }

    return 0;
}
```

#### Explanation
1. **Segment Tree Node**:
   - Each node stores the size of the segment, leftmost (`lc`) and rightmost (`rc`) characters, lengths of the left run (`lrun`) and right run (`rrun`), and the density (`dens`).
   
2. **Building the Tree**:
   - The tree is built recursively. Leaf nodes represent single characters with `lrun = rrun = dens = 1`.
   - Internal nodes are formed by merging child nodes using the `merge` function.

3. **Merging Nodes**:
   - When merging two segments, if the last character of the left segment matches the first character of the right segment, their runs are merged. The density is adjusted by subtracting the squares of the original runs and adding the square of the merged run. The `lrun` and `rrun` are updated if the entire left or right segment is merged.

4. **Update Operation**:
   - Updates a character at a specified position and propagates the change up the tree to maintain correct segment information.

5. **Query Operation**:
   - Queries a range by decomposing it into segments covered by the tree. The segments are merged left to right to compute the overall density, handling boundary runs appropriately.

This approach efficiently handles both updates and queries in logarithmic time per operation, making it suitable for large input sizes.