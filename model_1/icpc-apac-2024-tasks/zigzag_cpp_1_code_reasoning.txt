 We have found a recurrence: 
   f(1)=1, f(2)=1.
   For n>=3: f(n) = f(n-1) + f(n-2) + (1 if n % 3 == 0 else 0)

 However, note: the sample input n=890 gives 502674609.

 But wait, let's test the recurrence for n=3: 
     f(3)=f(2)+f(1)+1 = 1+1+1 = 3 -> matches.
     n=4: f(4)=f(3)+f(2) = 3+1 = 4 -> matches.
     n=5: 4+3 = 7 -> matches.
     n=6: 7+4+1 = 12 -> matches.
     n=7: 12+7 = 19 -> matches.

 Therefore, we precompute an array f[1..300000] using:
   f[1] = 1
   f[2] = 1
   for n from 3 to 300000:
        f[n] = (f[n-1] + f[n-2] + (n % 3 == 0 ? 1 : 0)) % MOD

 However, note that the modulus is 998244353.

 But the problem states: t up to 300000 and n up to 300000.

 We can precompute the f array for all n from 1 to 300000, then answer each test case in O(1).

 Steps in C++:
   - Precompute an array `f` of size 300001 (index 0 to 300000). We will use indices 1..300000.
   - f[1] = 1, f[2] = 1.
   - For i from 3 to 300000:
        f[i] = (f[i-1] + f[i-2] + (i % 3 == 0 ? 1 : 0)) % mod_value

 However, note: the modulus operation should be done at each step to avoid overflow.

 But wait: the recurrence as written might not be the most efficient, but it is O(n) and n=300000 is acceptable.

 Let's code accordingly.

 Important: The modulus is 998244353.

 But note: we are adding three numbers: f[i-1] (which is modulo 998244353) and f[i-2] and a 0 or 1. The maximum value without modulus is about 2*f[i-1] (if we add 1) which is less than 2*mod_value? So we can do:
   f[i] = f[i-1] + f[i-2];
   if (i % 3 == 0) f[i] += 1;
   f[i] %= mod_value;

 But to be safe, we do modulo after each step.

 However, note: the numbers might be large but we are modulo 998244353, so we do:

   f[i] = (f[i-1] + f[i-2]) % mod;
   if (i % 3 == 0) 
        f[i] = (f[i] + 1) % mod;

 But this is acceptable.

 However, we must be cautious: the recurrence might be different? Let me check for n=3: 
        f[3] = (f[2] + f[1]) % mod + 1 = (1+1) % mod + 1 = 2 + 1 = 3.

 Alternatively, we can do:

   f[i] = (f[i-1] + f[i-2] + (i % 3 == 0)) % mod;

 But note: in C++, (i%3==0) is 1 when true, 0 otherwise.

 However, let me write the code accordingly.

 Steps:
   Precomputation:
      const int MAX = 300000;
      vector<long long> f(MAX+1, 0);
      f[1] = 1;
      if (MAX>=2) f[2] = 1;
      for (int i=3; i<=MAX; i++) {
          f[i] = (f[i-1] + f[i-2] + (i % 3 == 0 ? 1 : 0)) % mod;
      }

 But note: the modulus might cause negative? No, because we are adding nonnegative.

 However, we can also do:

      f[i] = (f[i-1] + f[i-2]) % mod;
      if (i % 3 == 0) 
          f[i] = (f[i] + 1) % mod;

 Both are equivalent.

 But the modulus: we are adding two numbers that are in [0, mod-1] and then an extra 0 or 1, so the sum is at most 2*(mod-1)+1, which is less than 2*mod, so we can do:

      f[i] = f[i-1] + f[i-2];
      if (i % 3 == 0) 
          f[i]++;
      if (f[i] >= mod) f[i] -= mod;

 This is faster. But let's do modulo with % for simplicity, and n=300000 is acceptable.

 However, we are in C++ and speed matters (t up to 300000, but we precompute the array once, then each test is O(1)).

 But the problem has 12.0s time limit, so modulo by % is acceptable.

 Alternatively, we can do:

      f[i] = f[i-1] + f[i-2];
      if (i % 3 == 0) 
          f[i] = (f[i] + 1) % mod;
      else
          f[i] %= mod;

 But the modulus operation might be expensive? However, we do one modulus per n.

 But note: without modulus, the numbers can become huge (exponential growth) and we are going up to 300000, which is too big. We must use modulus at each step to keep the numbers in the range of mod.

 Actually, we can use:

      f[i] = (f[i-1] + f[i-2] + (i%3==0)) % mod;

 However, to avoid overflow, we do modulus after the entire expression? But the modulus is 998244353, and the maximum value we have before modulus is at most (mod-1)*2 + 1, which is less than 2e9? Actually, 998244353*2 is about 2e9, which is acceptable for long long? But note: the Fibonacci-like sequence grows exponentially, so we must use modulus at each step to avoid numbers that are too big.

 However, we are storing modulo 998244353, so we can do:

      f[i] = (f[i-1] + f[i-2] + (i%3==0 ? 1 : 0)) % mod;

 But the intermediate sum f[i-1] + f[i-2] might be as large as 2*(mod-1) which is about 2e9, and then adding 1 is 2e9+1, which fits in a long long? Yes, since 2e9 is less than 2^31? Actually, 2^31 is 2.1e9. So if we use int, we might overflow. Therefore, we use long long for the array.

 Actually, we can also use int if we do modulus at each step? But the modulus operation after the addition of three terms: we can do:

      f[i] = (f[i-1] + f[i-2]) % mod;
      if (i % 3 == 0) 
          f[i] = (f[i] + 1) % mod;

 This avoids the intermediate sum being too big? Because (f[i-1] + f[i-2]) % mod is at most 2*(mod-1) mod mod? Then we add at most 1, so the maximum is mod (if (f[i-1]+f[i-2])%mod = mod-1, then adding 1 gives mod, then we do mod mod? Actually, we do:

      f[i] = ( (f[i-1] + f[i-2]) % mod + (i%3==0 ? 1 : 0) ) % mod;

 This is safe for int? Because the intermediate (f[i-1]+f[i-2]) can be up to 2*(mod-1) = 2*998244352 = 1996488704, which is less than 2^31 (2147483647). So we can use int.

 But note: the problem says n up to 300000, and the Fibonacci-like numbers modulo mod are bounded by mod, so we can use int for the array.

 However, to be safe from overflow in the intermediate sum, we can do:

      long long temp = f[i-1] + f[i-2];
      if (i % 3 == 0) temp++;
      f[i] = temp % mod;

 But then we are using long long for temp. Alternatively, we can do:

      f[i] = (0LL + f[i-1] + f[i-2] + (i%3==0)) % mod;

 This will promote to long long.

 But the constraints: n=300000, so 300000 iterations, and each step we do a long long addition? It's acceptable.

 Alternatively, we can use:

      f[i] = (1LL * f[i-1] + f[i-2] + (i%3==0)) % mod;

 Let's write the code accordingly.

 Steps:

   #include <iostream>
   #include <vector>
   using namespace std;

   const int mod = 998244353;
   const int MAX_N = 300000;

   int main() {
        vector<int> f(MAX_N+1);
        f[1] = 1;
        if (MAX_N>=2) f[2] = 1;
        for (int i=3; i<=MAX_N; i++) {
            f[i] = (1LL * f[i-1] + f[i-2] + (i%3==0)) % mod;
        }

        int t;
        cin >> t;
        while (t--) {
            int n;
            cin >> n;
            cout << f[n] << '\n';
        }
   }

 But note: the recurrence for n=1 and n=2 are set, and then we compute from 3 to MAX_N.

 However, what if the test case has n=1? then we output f[1]=1.

 But note: the problem says n>=1.

 Let me run the sample:

   n=5: f[5] = (f[4] + f[3] + (5%3==0?1:0)) % mod
        f[3] = (f[2]+f[1]+1) % mod = (1+1+1)=3
        f[4] = (f[3]+f[2]) % mod + 0? = (3+1)=4
        f[5] = (4+3+0) % mod = 7 -> correct.

   n=6: (7+4+1) % mod = 12 -> correct.

   n=7: (12+7+0) % mod = 19 -> correct.

   So the code should be:

        f[1]=1, f[2]=1
        for i=3 to MAX_N:
            f[i] = (f[i-1] + f[i-2] + (i%3==0)) % mod   [with long long conversion to avoid overflow in intermediate]

 However, note: (i%3==0) is 1 when i is divisible by 3, else 0.

 But in C++: (i%3==0) is a bool, which when added to numbers becomes 0 or 1.

 We write:

        f[i] = ( (long long) f[i-1] + f[i-2] + (i%3==0) ) % mod;

 But we can do:

        f[i] = (0LL + f[i-1] + f[i-2] + (i%3==0)) % mod;

 Alternatively, we can use:

        long long temp = f[i-1];
        temp += f[i-2];
        if (i % 3 == 0) temp++;
        f[i] = temp % mod;

 All are acceptable.

 However, we choose the first one for brevity.

 But note: the modulus operation: we are doing modulo at each step.

 Let me write the code accordingly.

 Important: We must precompute the array for all n from 1 to MAX_N (300000) once at the beginning.

 Since t can be up to 300000, we precompute once and then answer each test case by a lookup.

 Code:

   #include <iostream>
   #include <vector>
   #include <cstdio>   // for faster input if needed

   using namespace std;

   const int mod = 998244353;
   const int MAX = 300000;

   int main() {
        vector<int> f(MAX+1);
        f[1] = 1;
        if (MAX>=2) {
            f[2] = 1;
        }
        for (int i=3; i<=MAX; i++) {
            f[i] = ( (long long) f[i-1] + f[i-2] + (i % 3 == 0) ) % mod;
        }

        int t;
        scanf("%d", &t);
        while (t--) {
            int n;
            scanf("%d", &n);
            printf("%d\n", f[n]);
        }
        return 0;
   }

 However, note: the recurrence we found might be different from the known generating function solutions, but it matches the sample.

 But wait: the problem says n=890 -> output 502674609.

 We can run the recurrence for n=890? Let me compute in the code and check.

 However, we trust the recurrence.

 But note: the modulus: we do modulo at each step.

 We'll run the precomputation for n=890 and output the result. Then we can verify.

 Alternatively, we can use the sample output: 502674609.

 We hope that the recurrence gives that.

 However, we have to code and test with n=890? But the problem sample output is 502674609.

 We write the code and hope it matches.

 But note: the recurrence:

        f[1]=1
        f[2]=1
        f[3]= (1+1+1) = 3
        f[4]= (3+1) = 4
        f[5]= (4+3)=7
        f[6]= (7+4+1)=12
        ... and so on.

 We compute f[890] modulo 998244353.

 We write the code and hope.

 Since the problem states the sample, we assume our recurrence is correct.

 Let me run for n=6: 12 -> correct.

 We output the code accordingly.

 However, note: the recurrence for n=0? We don't use.

 We start from n=1.

 But the problem says n>=1.

 Therefore, we output the code as below.

 To speed up input/output for 300000 test cases, we use scanf and printf.

 Alternatively, we can use fast I/O.

 But 300000 test cases: using scanf and printf is acceptable in C++.

 Let's write the code accordingly.