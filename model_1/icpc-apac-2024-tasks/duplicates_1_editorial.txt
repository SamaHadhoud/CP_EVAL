### Approach
1. **Problem Analysis**: The problem requires modifying the minimum number of entries in an \( n \times n \) matrix such that every row and every column contains at least one duplicate. The key observation is that a row or column is "bad" (i.e., lacks duplicates) if and only if it is a permutation of the integers from 1 to \( n \) (i.e., all elements are distinct and cover the range 1 to \( n \)).

2. **Identify Bad Rows and Columns**: For each test case, scan all rows and columns to identify which are "bad" (permutations). This involves checking if all elements in a row or column are distinct and cover the range 1 to \( n \).

3. **Minimum Modifications Calculation**: The minimum number of modifications required is the maximum of the number of bad rows and bad columns, i.e., \( \max(\text{number of bad rows}, \text{number of bad columns}) \). This is because:
   - Each modification can fix one bad row and one bad column if placed at their intersection.
   - Any remaining bad rows or columns after covering all possible pairs require one modification each.

4. **Modification Strategy**:
   - **Pair Handling**: For the first \( \min(\text{number of bad rows}, \text{number of bad columns}) \) pairs of bad rows and columns, modify the entry at their intersection. The new value is chosen as 1 (if the original value is not 1) or 2 (otherwise) to break both the row and column permutations.
   - **Remaining Bad Rows**: For each remaining bad row, modify the first column entry. The new value is chosen as any value already present in the column (to avoid creating a permutation in the column) or any other value if necessary.
   - **Remaining Bad Columns**: For each remaining bad column, modify the first row entry. The new value is chosen as any value already present in the row (to avoid creating a permutation in the row) or any other value if necessary.

5. **Output**: For each test case, output the number of modifications followed by the modifications specified as row, column, and new value (converted to 1-based indexing).

### Solution Code
```python
import sys

def main():
    data = sys.stdin.read().split()
    t = int(data[0])
    index = 1
    output_lines = []
    for _ in range(t):
        n = int(data[index]); index += 1
        X = []
        for i in range(n):
            row = list(map(int, data[index:index+n]))
            index += n
            X.append(row)
        
        bad_rows = []
        for i in range(n):
            if len(set(X[i])) == n:
                bad_rows.append(i)
                
        bad_cols = []
        for j in range(n):
            col = [X[i][j] for i in range(n)]
            if len(set(col)) == n:
                bad_cols.append(j)
                
        r = len(bad_rows)
        c = len(bad_cols)
        k = min(r, c)
        modifications = []
        
        for i in range(k):
            i_row = bad_rows[i]
            j_col = bad_cols[i]
            a = X[i_row][j_col]
            if a != 1:
                v = 1
            else:
                v = 2
            modifications.append((i_row, j_col, v))
            
        for i in range(k, r):
            i_row = bad_rows[i]
            j_col = 0
            a = X[i_row][j_col]
            col0 = [X[ii][j_col] for ii in range(n)]
            S = set(col0)
            if a in S:
                S.discard(a)
            if S:
                v = next(iter(S))
            else:
                if a != 1:
                    v = 1
                else:
                    v = 2
            modifications.append((i_row, j_col, v))
            
        for j in range(k, c):
            i_row = 0
            j_col = bad_cols[j]
            a = X[i_row][j_col]
            row0 = X[0]
            S = set(row0)
            if a in S:
                S.discard(a)
            if S:
                v = next(iter(S))
            else:
                if a != 1:
                    v = 1
                else:
                    v = 2
            modifications.append((i_row, j_col, v))
            
        output_lines.append(str(len(modifications)))
        for (i, j, v) in modifications:
            output_lines.append(f"{i+1} {j+1} {v}")
            
    print("\n".join(output_lines))

if __name__ == '__main__':
    main()
```

### Explanation
1. **Reading Input**: The input is read in one go for efficiency, especially given the constraints. The first value is the number of test cases \( t \).
2. **Processing Each Test Case**:
   - **Matrix Construction**: For each test case, the matrix \( X \) is constructed from the input data.
   - **Identifying Bad Rows/Columns**: Rows and columns are checked to see if they are permutations (all distinct values from 1 to \( n \)). These are labeled as "bad" since they lack duplicates.
3. **Modifications Calculation**:
   - **Pair Handling**: For each pair of bad rows and columns (up to the minimum count), the intersecting cell is modified. The new value is chosen to break the permutation (1 if original is not 1, else 2).
   - **Remaining Rows/Columns**: For leftover bad rows or columns, the first cell in the row (for rows) or column (for columns) is modified. The new value is selected from existing values in the respective column or row to prevent creating a new permutation. If no such value exists, 1 or 2 is used as a fallback.
4. **Output**: The results for each test case are formatted to show the number of modifications followed by each modification (row, column, new value in 1-based indexing).

This approach efficiently minimizes modifications while ensuring all rows and columns meet the duplicate requirement, adhering to the problem constraints.