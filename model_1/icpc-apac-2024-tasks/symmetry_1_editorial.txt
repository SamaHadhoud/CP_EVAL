### Problem Analysis
The problem requires determining if there exists a convex, point-symmetric region that contains all given vertices of a convex polygon on its boundary. If such regions exist, we must find the one with the minimum area. The region must be convex and symmetric under 180-degree rotation about a center point \( c \), meaning for any point \( p \) in the region, the point \( 2c - p \) is also in the region.

#### Key Insights
1. **Central Symmetry**: The region must be symmetric about a center \( c \). This implies that for each vertex \( v_i \) in the given polygon, its symmetric point \( 2c - v_i \) must also be part of the region.
2. **Convex Hull**: The smallest convex region that includes all original vertices and their symmetric points is the convex hull of the set \( S = \{v_1, v_2, \ldots, v_n\} \cup \{2c - v_1, 2c - v_2, \ldots, 2c - v_n\} \).
3. **Boundary Constraint**: Every original vertex must lie on the boundary of this convex hull. This imposes constraints on the possible centers \( c \).
4. **Candidate Centers**: The center \( c \) can be derived from:
   - **Midpoints**: \( c \) is the midpoint of two original vertices (i.e., \( c = (v_i + v_j)/2 \)).
   - **Collinearity Conditions**: Derived from conditions where three points (either two original and one symmetric, or one original and two symmetric) are collinear. Each condition provides a linear equation in \( c \), and solving any two such equations yields a candidate \( c \).

### Approach
1. **Check for Central Symmetry**: If the polygon is centrally symmetric (i.e., for each vertex \( v_i \), \( v_{i+n/2} = 2c - v_i \) for some center \( c \) and even \( n \)), the polygon itself is a valid region. Output its area.
2. **Generate Candidate Centers**:
   - **Midpoints**: For every pair of vertices \( (v_i, v_j) \), compute \( c = (v_i + v_j)/2 \).
   - **Collinearity Conditions**:
     - **Type 2**: For three vertices \( i, j, k \), the symmetric point \( 2c - v_k \) must be collinear with \( v_i \) and \( v_j \). This gives a linear equation in \( c \).
     - **Type 3**: For three vertices \( i, j, k \), the original point \( v_i \) must be collinear with the symmetric points \( 2c - v_j \) and \( 2c - v_k \). This also gives a linear equation in \( c \).
   - Solve pairs of these linear equations to get candidate centers \( c \).
3. **Validation and Area Calculation**: For each candidate \( c \):
   - Form the set \( S \) of original and symmetric points.
   - Compute the convex hull of \( S \).
   - Verify all original vertices lie on the boundary of this convex hull.
   - If valid, compute the area of the convex hull.
4. **Output**: If valid regions exist, output the minimum area; otherwise, output -1.

### Solution Code
```python
import numpy as np

def compute_convex_hull_area(points):
    points = sorted(set(points))
    if len(points) <= 1:
        return 0.0
    def cross(o, a, b):
        return (a[0] - o[0]) * (b[1] - o[1]) - (a[1] - o[1]) * (b[0] - o[0])
    lower = []
    for p in points:
        while len(lower) >= 2 and cross(lower[-2], lower[-1], p) <= 0:
            lower.pop()
        lower.append(p)
    upper = []
    for p in reversed(points):
        while len(upper) >= 2 and cross(upper[-2], upper[-1], p) <= 0:
            upper.pop()
        upper.append(p)
    hull = lower[:-1] + upper[:-1]
    area = 0
    for i in range(len(hull)):
        x1, y1 = hull[i]
        x2, y2 = hull[(i+1) % len(hull)]
        area += x1 * y2 - x2 * y1
    return abs(area) / 2.0

def is_point_on_segment(a, b, p):
    if min(a[0], b[0]) <= p[0] <= max(a[0], b[0]) and min(a[1], b[1]) <= p[1] <= max(a[1], b[1]):
        if abs((b[0]-a[0])*(p[1]-a[1]) - (b[1]-a[1])*(p[0]-a[0])) < 1e-8:
            return True
    return False

def main():
    import sys
    data = sys.stdin.read().split()
    if not data:
        return
    n = int(data[0])
    vertices = []
    index = 1
    for i in range(n):
        x = float(data[index]); y = float(data[index+1]); index += 2
        vertices.append((x, y))
    if n % 2 == 0:
        c0 = ((vertices[0][0] + vertices[n//2][0]) / 2.0, (vertices[0][1] + vertices[n//2][1]) / 2.0)
        symmetric_ok = True
        for i in range(n):
            j = (i + n//2) % n
            x_sym = 2*c0[0] - vertices[i][0]
            y_sym = 2*c0[1] - vertices[i][1]
            if abs(x_sym - vertices[j][0]) > 1e-8 or abs(y_sym - vertices[j][1]) > 1e-8:
                symmetric_ok = False
                break
        if symmetric_ok:
            area = 0
            for i in range(n):
                x1, y1 = vertices[i]
                x2, y2 = vertices[(i+1) % n]
                area += x1 * y2 - x2 * y1
            area = abs(area) / 2.0
            print("{0:.15f}".format(area))
            return

    candidates = set()
    for i in range(n):
        for j in range(i+1, n):
            c = ((vertices[i][0] + vertices[j][0]) / 2.0, (vertices[i][1] + vertices[j][1]) / 2.0)
            candidates.add(c)
    events = []
    for i in range(n):
        for j in range(n):
            if i == j:
                continue
            for k in range(n):
                a = vertices[i]
                b = vertices[j]
                dx = b[0] - a[0]
                dy = b[1] - a[1]
                const = dx*(a[1] + vertices[k][1]) - dy*(a[0] + vertices[k][0])
                events.append( (-2*dy, 2*dx, const) )
    for i in range(n):
        for j in range(n):
            for k in range(n):
                a_x = vertices[j][0] + vertices[i][0]
                a_y = vertices[j][1] + vertices[i][1]
                b_x = vertices[k][0] + vertices[i][0]
                b_y = vertices[k][1] + vertices[i][1]
                A = 2 * (a_y - b_y)
                B = 2 * (b_x - a_x)
                const_val = a_x * b_y - a_y * b_x
                events.append( (A, B, const_val) )
    for i in range(len(events)):
        A1, B1, C1 = events[i]
        for j in range(i+1, len(events)):
            A2, B2, C2 = events[j]
            det = A1 * B2 - A2 * B1
            if abs(det) < 1e-12:
                continue
            cx = (C1 * B2 - C2 * B1) / det
            cy = (A1 * C2 - A2 * C1) / det
            candidates.add((cx, cy))
    min_area = None
    for c in candidates:
        S = set()
        for v in vertices:
            S.add(v)
            sym_x = 2*c[0] - v[0]
            sym_y = 2*c[1] - v[1]
            S.add((sym_x, sym_y))
        points = list(S)
        if len(points) < 3:
            continue
        hull = convex_hull(points)
        all_on_boundary = True
        for v in vertices:
            found = False
            if v in hull:
                found = True
            else:
                for idx in range(len(hull)):
                    a = hull[idx]
                    b = hull[(idx+1) % len(hull)]
                    if is_point_on_segment(a, b, v):
                        found = True
                        break
            if not found:
                all_on_boundary = False
                break
        if not all_on_boundary:
            continue
        area = compute_convex_hull_area(points)
        if min_area is None or area < min_area:
            min_area = area
    if min_area is None:
        print(-1)
    else:
        print("{0:.15f}".format(min_area))

if __name__ == '__main__':
    main()
```

### Explanation
1. **Central Symmetry Check**: The algorithm first checks if the polygon is centrally symmetric by verifying if \( v_{i+n/2} = 2c - v_i \) for all vertices. If true, it outputs the polygon's area.
2. **Candidate Generation**:
   - **Midpoints**: Centers \( c \) are derived as midpoints of all vertex pairs.
   - **Collinearity Conditions**: Centers \( c \) are derived from solving pairs of linear equations obtained from collinearity conditions (either two original points and one symmetric point, or one original point and two symmetric points).
3. **Convex Hull and Validation**: For each candidate \( c \), the algorithm constructs the set \( S \) of original and symmetric points, computes the convex hull, and checks if all original vertices lie on the hull's boundary. Valid hull areas are tracked.
4. **Output**: The minimum valid area is output; if no valid region exists, -1 is printed.

This approach efficiently explores potential symmetric regions by leveraging geometric properties and convex hull computations, ensuring correctness while adhering to problem constraints.