To solve this problem, we need to modify the minimum number of entries in an \( n \times n \) matrix such that every row and every column contains at least one duplicate. The key insight is that a row or column is "bad" (i.e., lacks duplicates) if and only if it is a permutation of the integers from 1 to \( n \) (i.e., all elements are distinct and cover the range 1 to \( n \)).

### Approach
1. **Identify Bad Rows and Columns**: For each test case, scan all rows and columns to determine which are permutations (i.e., all elements are distinct and within the range 1 to \( n \)). These are labeled as "bad" because they lack duplicates.
2. **Calculate Minimum Modifications**: The minimum number of modifications required is the maximum of the number of bad rows and bad columns. This is because each modification can fix one bad row and one bad column if placed at their intersection. Any remaining bad rows or columns after covering all possible pairs require one modification each.
3. **Modification Strategy**:
   - **Pair Handling**: For the first \( \min(\text{number of bad rows}, \text{number of bad columns}) \) pairs of bad rows and columns, modify the entry at their intersection. The new value is chosen to break both the row and column permutations (1 if the original value is not 1, otherwise 2).
   - **Remaining Bad Rows**: For each remaining bad row, modify the first column entry. The new value is chosen from existing values in the column to ensure the column gains a duplicate, which also breaks the row permutation since the row contains all values from 1 to \( n \).
   - **Remaining Bad Columns**: For each remaining bad column, modify the first row entry. Similarly, the new value is chosen from existing values in the row to ensure the row gains a duplicate, which also breaks the column permutation.

### Solution Code
```cpp
#include <iostream>
#include <vector>
#include <set>
#include <tuple>
using namespace std;

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        vector<vector<int>> mat(n, vector<int>(n));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                cin >> mat[i][j];
            }
        }

        vector<int> bad_rows;
        for (int i = 0; i < n; i++) {
            set<int> row_set;
            for (int j = 0; j < n; j++) {
                row_set.insert(mat[i][j]);
            }
            if (row_set.size() == n) {
                bad_rows.push_back(i);
            }
        }

        vector<int> bad_cols;
        for (int j = 0; j < n; j++) {
            set<int> col_set;
            for (int i = 0; i < n; i++) {
                col_set.insert(mat[i][j]);
            }
            if (col_set.size() == n) {
                bad_cols.push_back(j);
            }
        }

        int r = bad_rows.size();
        int c = bad_cols.size();
        int k = min(r, c);
        vector<tuple<int, int, int>> mods;

        for (int i = 0; i < k; i++) {
            int i_row = bad_rows[i];
            int j_col = bad_cols[i];
            int a = mat[i_row][j_col];
            int v;
            if (a != 1) {
                v = 1;
            } else {
                v = 2;
            }
            mods.push_back(make_tuple(i_row, j_col, v));
        }

        for (int i = k; i < r; i++) {
            int i_row = bad_rows[i];
            int j_col = 0;
            int a = mat[i_row][j_col];
            set<int> col_set;
            for (int ii = 0; ii < n; ii++) {
                col_set.insert(mat[ii][j_col]);
            }
            if (col_set.find(a) != col_set.end()) {
                col_set.erase(a);
            }
            int v;
            if (!col_set.empty()) {
                v = *(col_set.begin());
            } else {
                if (a != 1) {
                    v = 1;
                } else {
                    v = 2;
                }
            }
            mods.push_back(make_tuple(i_row, j_col, v));
        }

        for (int j = k; j < c; j++) {
            int j_col = bad_cols[j];
            int i_row = 0;
            int a = mat[i_row][j_col];
            set<int> row_set;
            for (int jj = 0; jj < n; jj++) {
                row_set.insert(mat[i_row][jj]);
            }
            if (row_set.find(a) != row_set.end()) {
                row_set.erase(a);
            }
            int v;
            if (!row_set.empty()) {
                v = *(row_set.begin());
            } else {
                if (a != 1) {
                    v = 1;
                } else {
                    v = 2;
                }
            }
            mods.push_back(make_tuple(i_row, j_col, v));
        }

        cout << mods.size() << "\n";
        for (auto &mod : mods) {
            int i, j, v;
            tie(i, j, v) = mod;
            cout << i+1 << " " << j+1 << " " << v << "\n";
        }
    }
    return 0;
}
```

### Explanation
1. **Reading Input**: The input is read in one go for efficiency. The first value is the number of test cases \( t \).
2. **Matrix Construction**: For each test case, the matrix \( X \) is constructed from the input data.
3. **Identifying Bad Rows/Columns**: Rows and columns are checked to see if they are permutations (all distinct values from 1 to \( n \)). These are labeled as "bad" because they lack duplicates.
4. **Modifications Calculation**:
   - **Pair Handling**: For each pair of bad rows and columns (up to the minimum count), the intersecting cell is modified. The new value is chosen to break the permutation (1 if the original is not 1, else 2).
   - **Remaining Rows/Columns**: For leftover bad rows or columns, the first cell in the row (for rows) or column (for columns) is modified. The new value is selected from existing values in the respective column or row to prevent creating a new permutation. If no such value exists, 1 or 2 is used as a fallback.
5. **Output**: The results for each test case are formatted to show the number of modifications followed by each modification (row, column, new value in 1-based indexing).

This approach efficiently minimizes modifications while ensuring all rows and columns meet the duplicate requirement, adhering to the problem constraints.