To solve this problem, we need to minimize the number of contestants moved between tables in a restaurant such that each table ends up with all contestants ordering the same dish (either *phở tái* (0) or *phở chín* (1)). The solution involves processing each table to determine the minimal moves required per table and then adjusting for global constraints to ensure at least one table is set to each dish if needed.

### Approach
1. **Initial Setup**: Read the number of tables and the binary strings representing each table's initial state.
2. **Process Each Table**: For each table:
   - Count the number of contestants wanting dish 0 (`count0`) and dish 1 (`count1`).
   - The minimal contestants to move from this table is the smaller of `count0` or `count1`, so the saved contestants (those not moved) is the larger of the two.
   - Track if the table can be naturally set to dish 0 (`count0 >= count1`) or dish 1 (`count1 >= count0`).
   - For tables that cannot be naturally set to a dish, record the cost (loss) if forced to set to the minority dish.
3. **Global Adjustment**:
   - If there are contestants wanting dish 0 but no table is naturally set to it, find the minimal loss from forcing a table to dish 0.
   - Similarly, if there are contestants wanting dish 1 but no table is naturally set to it, find the minimal loss from forcing a table to dish 1.
   - Adjust the total saved contestants by subtracting these minimal losses.
4. **Compute Result**: The minimal moves required is the total contestants minus the adjusted saved contestants.

### Solution Code
```cpp
#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
using namespace std;

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    int n;
    cin >> n;

    long long total_contestants = 0;
    long long saving = 0;
    long long total_zeros = 0, total_ones = 0;
    bool has0 = false;
    bool has1 = false;
    vector<int> force0;
    vector<int> force1;

    for (int i = 0; i < n; i++) {
        string s;
        cin >> s;
        total_contestants += s.size();
        int count0 = 0;
        for (char c : s) {
            if (c == '0') count0++;
        }
        int count1 = s.size() - count0;
        total_zeros += count0;
        total_ones += count1;

        saving += max(count0, count1);

        if (count0 >= count1) {
            has0 = true;
        }
        if (count1 >= count0) {
            has1 = true;
        }

        if (count0 < count1) {
            force0.push_back(count1 - count0);
        } else if (count1 < count0) {
            force1.push_back(count0 - count1);
        }
    }

    if (total_zeros > 0 && !has0) {
        int min_force0 = *min_element(force0.begin(), force0.end());
        saving -= min_force0;
    }
    if (total_ones > 0 && !has1) {
        int min_force1 = *min_element(force1.begin(), force1.end());
        saving -= min_force1;
    }

    long long moves = total_contestants - saving;
    cout << moves << '\n';

    return 0;
}
```

### Explanation
1. **Reading Input**: The input is read efficiently using `ios::sync_with_stdio(false)` and `cin.tie(0)` for faster I/O.
2. **Processing Tables**: For each table:
   - The number of contestants wanting dish 0 (`count0`) and dish 1 (`count1`) is counted.
   - The saved contestants (`saving`) is incremented by the maximum of `count0` and `count1`, representing contestants not moved.
   - Flags `has0` and `has1` are set if the table can be naturally set to dish 0 or 1.
   - If the table cannot be naturally set to a dish, the cost to force it is recorded in `force0` or `force1`.
3. **Global Adjustment**: If there are contestants wanting dish 0 but no table is naturally set to it, the minimal cost from `force0` is subtracted from `saving`. Similarly for dish 1 using `force1`.
4. **Result Calculation**: The minimal moves required is the total contestants minus the adjusted saved contestants (`saving`).

This approach efficiently minimizes moves by leveraging per-table optimization and adjusting for global constraints with minimal additional cost, ensuring optimal performance even for large inputs.