To solve this problem, we need to find the maximum attraction score among all possible non-empty subsets of cities in the fictional country of Manteiv. The attraction score is defined as the sum of attraction points from highways connecting pairs of cities in the subset, minus a penalty based on the number of pairs of cities in the subset that are not connected by a highway. The penalty is a large constant (10^6) multiplied by the square of the number of such missing edges. 

### Approach
1. **Problem Analysis**: The problem involves selecting a subset of cities to maximize the attraction score. Given the constraints (planar graph with no intersecting highways except at cities), the solution leverages the properties of planar graphs. The key insight is that the optimal subset must be a clique (complete subgraph) of size 1, 2, 3, or 4. This is because larger subsets would incur a prohibitive penalty due to the quadratic penalty term.
2. **Intuition**: 
   - **Size 1**: The score is always 0.
   - **Size 2**: The score is the attraction points of the highway connecting the two cities.
   - **Size 3 (Triangle)**: The score is the sum of attraction points of the three highways forming the triangle.
   - **Size 4 (K4)**: The score is the sum of attraction points of the six highways forming the complete graph K4.
3. **Algorithm Selection**: 
   - **Size 2**: Iterate through all highways to find the maximum attraction points.
   - **Size 3 (Triangles)**: For each edge (u, v), find common neighbors w such that (u, w) and (v, w) are edges. This forms a triangle (u, v, w). Sum the attraction points of the three edges.
   - **Size 4 (K4)**: For each triangle (u, v, w), find a common neighbor x such that (x, u), (x, v), and (x, w) are edges. This forms a K4 (u, v, w, x). Sum the attraction points of the six edges.
4. **Complexity Analysis**: 
   - **Size 2**: O(m) time.
   - **Size 3**: O(m * min_degree) per edge, but due to planarity, the total is O(m + n).
   - **Size 4**: O(number of triangles * min_degree), which is O(n) due to planarity constraints.
   - Overall complexity is O(m + n) for planar graphs, which is efficient given the constraints (n ≤ 100,000 and m ≤ 300,000).

### Solution Code
```python
import sys

def main():
    data = sys.stdin.read().split()
    if not data:
        print(0)
        return
        
    it = iter(data)
    n = int(next(it)); m = int(next(it))
    cities = []
    for i in range(n):
        x = int(next(it)); y = int(next(it))
        cities.append((x, y))
    
    graph = [[] for _ in range(n+1)]
    deg = [0] * (n+1)
    edges_dict = {}
    adj_set = [set() for _ in range(n+1)]
    
    for i in range(m):
        u = int(next(it)); v = int(next(it)); a = int(next(it))
        if u > v:
            u, v = v, u
        edges_dict[(u, v)] = a
        graph[u].append(v)
        graph[v].append(u)
        deg[u] += 1
        deg[v] += 1
        adj_set[u].add(v)
        adj_set[v].add(u)
        
    best = 0
    
    for key in edges_dict:
        a_val = edges_dict[key]
        if a_val > best:
            best = a_val
            
    triangles = []
    for (u, v) in edges_dict:
        common = adj_set[u] & adj_set[v]
        for w in common:
            if w > v:
                try:
                    a1 = edges_dict[(u, v)]
                    a2 = edges_dict[(u, w)]
                    a3 = edges_dict[(v, w)]
                except KeyError:
                    continue
                total_tri = a1 + a2 + a3
                if total_tri > best:
                    best = total_tri
                triangles.append((u, v, w))
                
    done_k4 = set()
    for (u, v, w) in triangles:
        common = adj_set[u] & adj_set[v] & adj_set[w]
        for x in common:
            if x == u or x == v or x == w:
                continue
            four = tuple(sorted([u, v, w, x]))
            if four in done_k4:
                continue
            done_k4.add(four)
            total_k4 = 0
            nodes = four
            valid = True
            for i in range(4):
                for j in range(i+1, 4):
                    a_val = min(nodes[i], nodes[j])
                    b_val = max(nodes[i], nodes[j])
                    if (a_val, b_val) in edges_dict:
                        total_k4 += edges_dict[(a_val, b_val)]
                    else:
                        valid = False
                        break
                if not valid:
                    break
            if valid and total_k4 > best:
                best = total_k4
                
    print(best)

if __name__ == '__main__':
    main()
```

### Explanation
1. **Input Parsing**: The input is read and parsed into the number of cities (n), highways (m), city coordinates, and highway details (endpoints and attraction points).
2. **Graph Construction**: The graph is stored as adjacency lists and a dictionary maps edges to their attraction points. Each city's adjacency set is also stored for efficient lookups.
3. **Size 2 Subsets**: The maximum attraction from any single highway (size 2 subset) is computed.
4. **Triangle Enumeration (Size 3)**: For each edge (u, v), common neighbors w (forming triangles) are found. The sum of the three edge weights is a candidate score.
5. **K4 Enumeration (Size 4)**: For each triangle (u, v, w), a common neighbor x (forming a K4) is found. The sum of the six edge weights is a candidate score, avoiding duplicates by storing sorted tuples of the four vertices.
6. **Result**: The maximum score from size 1 (0), size 2, size 3, and size 4 subsets is printed.

This approach efficiently checks all competitive subsets by leveraging planarity properties, ensuring optimal performance within constraints.