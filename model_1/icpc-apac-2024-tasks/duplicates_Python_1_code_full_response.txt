To solve this problem, we need to modify the minimum number of entries in an \( n \times n \) matrix such that every row and every column contains at least one duplicate. The solution involves identifying rows and columns that are permutations (i.e., all elements are distinct and cover the range from 1 to \( n \)), and then systematically modifying entries to break these permutations while ensuring the conditions are met with minimal changes.

### Approach
1. **Identify Bad Rows and Columns**: For each test case, scan all rows and columns to identify which are "bad" (i.e., permutations of integers from 1 to \( n \)). A row or column is bad if all its elements are distinct.
2. **Pair Handling**: The minimum number of modifications required is the maximum of the number of bad rows and bad columns. For each pair of bad rows and columns (up to the minimum count), modify the entry at their intersection to break both permutations. The new value is chosen as 1 (if the original value isn't 1) or 2 (otherwise).
3. **Remaining Bad Rows and Columns**: For any remaining bad rows or columns, modify an entry in the row or column to introduce a duplicate. The new value is chosen to ensure the row or column still meets the duplicate condition, preferably by selecting a value already present in the row or column to avoid creating new permutations.
4. **Output the Modifications**: For each test case, output the number of modifications followed by each modification specified as row, column, and new value (using 1-based indexing).

### Solution Code
```python
import sys

def main():
    data = sys.stdin.read().split()
    t = int(data[0])
    index = 1
    output_lines = []
    for _ in range(t):
        n = int(data[index]); index += 1
        X = []
        for i in range(n):
            row = list(map(int, data[index:index+n]))
            index += n
            X.append(row)
        
        bad_rows = []
        for i in range(n):
            if len(set(X[i])) == n:
                bad_rows.append(i)
                
        bad_cols = []
        for j in range(n):
            col = [X[i][j] for i in range(n)]
            if len(set(col)) == n:
                bad_cols.append(j)
                
        r = len(bad_rows)
        c = len(bad_cols)
        k = min(r, c)
        modifications = []
        
        for i in range(k):
            i_row = bad_rows[i]
            j_col = bad_cols[i]
            a = X[i_row][j_col]
            if a != 1:
                v = 1
            else:
                v = 2
            modifications.append((i_row, j_col, v))
            
        for i in range(k, r):
            i_row = bad_rows[i]
            found = False
            for j in range(n-1, -1, -1):
                a0 = X[i_row][j]
                list_A = []
                for jj in range(n):
                    if jj == j: 
                        continue
                    list_A.append(X[i_row][jj])
                list_B = []
                for ii in range(n):
                    if ii == i_row:
                        continue
                    list_B.append(X[ii][j])
                has_dup_A = (len(list_A) != len(set(list_A)))
                has_dup_B = (len(list_B) != len(set(list_B)))
                if has_dup_A and has_dup_B:
                    if a0 != 1:
                        v = 1
                    else:
                        v = 2
                    modifications.append((i_row, j, v))
                    found = True
                    break
                elif has_dup_A and (not has_dup_B):
                    set_B = set(list_B)
                    v = min(set_B)
                    modifications.append((i_row, j, v))
                    found = True
                    break
                elif (not has_dup_A) and has_dup_B:
                    set_A = set(list_A)
                    v = min(set_A)
                    modifications.append((i_row, j, v))
                    found = True
                    break
                else:
                    set_A = set(list_A)
                    set_B = set(list_B)
                    common = set_A & set_B
                    if common:
                        v = min(common)
                        modifications.append((i_row, j, v))
                        found = True
                        break
            if not found:
                j = 0
                a0 = X[i_row][0]
                list_A = X[i_row][1:]
                set_A = set(list_A)
                if set_A:
                    v = next(iter(set_A))
                else:
                    v = 1
                modifications.append((i_row, j, v))
        
        for j in range(k, c):
            j_col = bad_cols[j]
            found = False
            for i in range(n-1, -1, -1):
                a0 = X[i][j_col]
                list_A = []
                for jj in range(n):
                    if jj == j_col:
                        continue
                    list_A.append(X[i][jj])
                list_B = []
                for ii in range(n):
                    if ii == i:
                        continue
                    list_B.append(X[ii][j_col])
                has_dup_A = (len(list_A) != len(set(list_A)))
                has_dup_B = (len(list_B) != len(set(list_B)))
                if has_dup_A and has_dup_B:
                    if a0 != 1:
                        v = 1
                    else:
                        v = 2
                    modifications.append((i, j_col, v))
                    found = True
                    break
                elif has_dup_A and (not has_dup_B):
                    set_B = set(list_B)
                    v = min(set_B)
                    modifications.append((i, j_col, v))
                    found = True
                    break
                elif (not has_dup_A) and has_dup_B:
                    set_A = set(list_A)
                    v = min(set_A)
                    modifications.append((i, j_col, v))
                    found = True
                    break
                else:
                    set_A = set(list_A)
                    set_B = set(list_B)
                    common = set_A & set_B
                    if common:
                        v = min(common)
                        modifications.append((i, j_col, v))
                        found = True
                        break
            if not found:
                i = 0
                a0 = X[0][j_col]
                list_A = X[0][:j_col] + X[0][j_col+1:]
                set_A = set(list_A)
                if set_A:
                    v = next(iter(set_A))
                else:
                    v = 1
                modifications.append((i, j_col, v))
        
        output_lines.append(str(len(modifications)))
        for (i, j, v) in modifications:
            output_lines.append(f"{i+1} {j+1} {v}")
            
    print("\n".join(output_lines))

if __name__ == '__main__':
    main()
```

### Explanation
1. **Reading Input**: The input is read in one go for efficiency, especially given the constraints. The first value is the number of test cases \( t \).
2. **Processing Each Test Case**:
   - **Matrix Construction**: For each test case, the matrix \( X \) is constructed from the input data.
   - **Identifying Bad Rows/Columns**: Rows and columns are checked to see if they are permutations (all distinct values from 1 to \( n \)). These are labeled as "bad" since they lack duplicates.
3. **Modifications Calculation**:
   - **Pair Handling**: For each pair of bad rows and columns (up to the minimum count), the intersecting cell is modified. The new value is chosen to break the permutation (1 if original is not 1, else 2).
   - **Remaining Rows/Columns**: For leftover bad rows or columns, a cell is modified. The new value is selected from existing values in the respective row or column to prevent creating a new permutation. If no such value exists, 1 or 2 is used as a fallback.
4. **Output**: The results for each test case are formatted to show the number of modifications followed by each modification (row, column, new value in 1-based indexing).

This approach efficiently minimizes modifications while ensuring all rows and columns meet the duplicate requirement, adhering to the problem constraints.