 We are going to use the recurrence we found: 
   f(1) = 1
   f(2) = 1
   for n >= 3:
        f(n) = f(n-1) + f(n-2) + (1 if n % 3 == 0 else 0)

 However, note that the sample n=3: 1+1+1 = 3 -> correct.
        n=4: 3+1 = 4 -> correct.
        n=5: 4+3 = 7 -> correct.
        n=6: 7+4+1 = 12 -> correct.
        n=7: 12+7 = 19 -> correct.

 We precompute an array f_arr[1..MAX_N] (with MAX_N=300000) and then answer each test case by an array lookup.

 But note: the modulus is 998244353.

 Steps:
   Precomputation:
      f_arr[1] = 1
      f_arr[2] = 1
      for n from 3 to MAX_N:
          add = 1 if n % 3 == 0 else 0
          f_arr[n] = (f_arr[n-1] + f_arr[n-2] + add) % MOD

   Then, for each test case, read n and output f_arr[n].

 However, note that the problem constraints: t up to 300000 and n up to 300000.
   Precomputation is O(MAX_N) and then each test case is O(1).

 Let's run the recurrence for n=890 and see if we get 502674609? 
   We'll trust the code to compute it.

 We'll write the code accordingly.

 Important: We must precompute for all n from 1 to 300000.

 Let's code accordingly.

 But note: the recurrence for n=3: we do 1+1+1=3, which is correct.

 We'll now write the code.