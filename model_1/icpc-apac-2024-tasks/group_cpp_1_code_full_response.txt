To solve this problem, we need to minimize the ratio of the maximum group skill sum to the minimum group skill sum by optimally choosing the position of the captain (student 1) and the number of groups \( k \) (a divisor of \( n \) greater than 1). The students (excluding the captain) are in a fixed line, and the captain can be inserted at any position in this line. The groups are formed by distributing students in order: the first student to group 1, the second to group 2, and so on, cycling through the groups until all students are assigned.

### Approach
1. **Precompute Divisors**: For each number up to \( 10^6 \), precompute all its divisors. This allows quick access to the divisors of \( n \) for each test case.
2. **Process Each Test Case**: For each test case:
   - **Special Case for \( k = n \)**: When the number of groups equals the number of students, each group contains exactly one student. The skill levels of the groups are simply the individual student skills. The ratio is determined by the minimum and maximum skill levels.
   - **General Case for Other Divisors \( k \)**:
     - **Initial Group Sums**: Start with the captain at position 0 (leftmost). Compute the initial sums for each group by distributing students into groups based on their positions modulo \( k \).
     - **Multiset for Tracking Min and Max**: Use a multiset to maintain the current group sums. This allows efficient updates and retrieval of the minimum and maximum group sums.
     - **Simulate Captain Movement**: Move the captain from position 0 to each subsequent position (1 to \( n-1 \)). For each move:
       - Update the group sums for the residues affected by the captain's movement.
       - Update the multiset with the new group sums.
       - Track the best (minimum) ratio encountered for the current \( k \).
   - **Track Best Ratio**: Compare the best ratio obtained for each divisor \( k \) and keep the overall best ratio for the test case.
3. **Output the Result**: For the best ratio found, reduce it to its irreducible form and output.

### Solution Code
```cpp
#include <iostream>
#include <vector>
#include <set>
#include <algorithm>
#include <cmath>
#include <cctype>
#include <climits>
using namespace std;

const int MAXN = 1000000;
vector<int> divisors_list[MAXN + 1];

void precompute_divisors() {
    for (int i = 1; i <= MAXN; i++) {
        for (int j = i; j <= MAXN; j += i) {
            divisors_list[j].push_back(i);
        }
    }
}

long long gcd(long long a, long long b) {
    if (b == 0) 
        return a;
    return gcd(b, a % b);
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    precompute_divisors();

    int t;
    cin >> t;
    while (t--) {
        long long n, a1;
        cin >> n >> a1;
        vector<long long> arr(n - 1);
        for (int i = 0; i < n - 1; i++) {
            cin >> arr[i];
        }

        vector<int> divs = divisors_list[n];
        long long best_max = -1, best_min = -1;

        for (int k : divs) {
            if (k == 1) continue;

            if (k == n) {
                long long min_val = a1;
                long long max_val = a1;
                for (long long x : arr) {
                    if (x < min_val) min_val = x;
                    if (x > max_val) max_val = x;
                }
                if (best_max == -1) {
                    best_max = max_val;
                    best_min = min_val;
                } else {
                    if (max_val * best_min < best_max * min_val) {
                        best_max = max_val;
                        best_min = min_val;
                    }
                }
                continue;
            }

            vector<long long> cur(k, 0);
            cur[0] = a1;
            for (int i = 0; i < n - 1; i++) {
                int r = (i + 1) % k;
                cur[r] += arr[i];
            }

            multiset<long long> mset;
            for (int i = 0; i < k; i++) {
                mset.insert(cur[i]);
            }

            long long current_min = *mset.begin();
            long long current_max = *mset.rbegin();
            long long best_max_k = current_max;
            long long best_min_k = current_min;

            for (int pos = 1; pos < n; pos++) {
                int r1 = (pos - 1) % k;
                int r2 = pos % k;

                auto it1 = mset.find(cur[r1]);
                mset.erase(it1);
                auto it2 = mset.find(cur[r2]);
                mset.erase(it2);

                long long old_r1 = cur[r1];
                long long old_r2 = cur[r2];
                cur[r1] = old_r1 - a1 + arr[pos - 1];
                cur[r2] = old_r2 - arr[pos - 1] + a1;

                mset.insert(cur[r1]);
                mset.insert(cur[r2]);

                current_min = *mset.begin();
                current_max = *mset.rbegin();

                if (current_max * best_min_k < best_max_k * current_min) {
                    best_max_k = current_max;
                    best_min_k = current_min;
                }
            }

            if (best_max == -1) {
                best_max = best_max_k;
                best_min = best_min_k;
            } else {
                if (best_max_k * best_min < best_max * best_min_k) {
                    best_max = best_max_k;
                    best_min = best_min_k;
                }
            }
        }

        long long g = gcd(best_max, best_min);
        best_max /= g;
        best_min /= g;
        cout << best_max << " " << best_min << "\n";
    }
    return 0;
}
```

### Explanation
1. **Precompute Divisors**: We precompute all divisors for numbers up to \( 10^6 \) using a sieve-like approach. This allows efficient access to divisors during each test case.
2. **Reading Input**: For each test case, we read the number of students \( n \) and the captain's skill level \( a1 \), followed by the skill levels of the other \( n-1 \) students.
3. **Processing Divisors**: For each divisor \( k \) of \( n \) (greater than 1):
   - **Special Case \( k = n \)**: Each group contains one student. The ratio is simply the ratio of the maximum to the minimum skill level among all students.
   - **General Case**: 
     - **Initial Group Sums**: The captain starts at position 0. Group sums are computed by distributing students into groups based on their positions modulo \( k \).
     - **Tracking Min and Max**: A multiset is used to maintain group sums for efficient min and max queries.
     - **Simulating Captain Movement**: The captain is moved to each subsequent position (1 to \( n-1 \)). For each move, the affected group sums are updated in the multiset. The best ratio (minimum of max/min) for the current \( k \) is tracked.
4. **Result Calculation**: The best ratio across all divisors is reduced to its irreducible form and printed.

This approach efficiently handles the constraints by leveraging divisor precomputation and multiset operations to dynamically track group sums and their min/max values during captain movement simulations. The complexity is manageable due to the constraints on the sum of \( n \) across test cases.