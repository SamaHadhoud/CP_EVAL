To solve this problem, we need to find a subset of cities that maximizes the attraction score, which is defined as the sum of attraction points from highways connecting pairs of cities in the subset, minus a penalty based on the number of pairs of cities in the subset not connected by a highway. The penalty is a large constant (10^6) multiplied by the square of the number of such missing edges. Given the constraints and properties of the planar graph, we can leverage the fact that the optimal subset is likely to be a clique of size 1, 2, 3, or 4.

### Approach
1. **Problem Analysis**: The problem involves selecting a subset of cities such that the attraction score is maximized. The score is computed by summing the attraction points of highways connecting cities in the subset and subtracting a penalty for pairs of cities in the subset not connected by a highway. The penalty term grows quadratically, making large subsets with many missing edges unattractive.
2. **Key Insights**: 
   - **Planar Graph Properties**: The graph is planar, meaning the number of edges is linear in the number of vertices (O(n)). This sparsity allows efficient enumeration of cliques (complete subgraphs).
   - **Clique Limitations**: The largest possible clique in a planar graph is of size 4 (since K5 is non-planar). Thus, we only need to consider cliques of size 1, 2, 3, or 4.
   - **Optimal Subset**: The optimal subset must be among:
     - **Size 1**: Score 0.
     - **Size 2**: An edge (highway) with its attraction points.
     - **Size 3**: A triangle (3-clique) with the sum of its edge weights.
     - **Size 4**: A 4-clique (K4) with the sum of its six edge weights.
3. **Algorithm Selection**:
   - **Size 2**: Iterate over all highways and keep track of the maximum attraction points.
   - **Size 3 (Triangles)**: For each edge (u, v), find common neighbors w such that w > max(u, v) to form triangles (u, v, w). Sum the attraction points of the three edges.
   - **Size 4 (K4)**: For each edge (u, v), find common neighbors w and x such that w and x are connected and w < x. The vertices (u, v, w, x) form a K4. Sum the attraction points of all six edges.
4. **Complexity Analysis**:
   - **Size 2**: O(m) time.
   - **Size 3**: O(m * d) time, where d is the average degree. In planar graphs, d is O(1), making this O(m).
   - **Size 4**: O(m * d^2) time. In planar graphs, d is O(1), making this O(m).
   - Overall complexity is O(m) for planar graphs, which is efficient given the constraints (n ≤ 100,000 and m ≤ 300,000).

### Solution Code
```cpp
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef pair<int, int> pii;

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int n, m;
    cin >> n >> m;

    vector<pii> cities(n + 1);
    for (int i = 1; i <= n; i++) {
        int x, y;
        cin >> x >> y;
        cities[i] = {x, y};
    }

    vector<vector<int>> graph(n + 1);
    vector<int> deg(n + 1, 0);
    map<pii, ll> edge_to_a;

    for (int i = 0; i < m; i++) {
        int u, v, a_val;
        cin >> u >> v >> a_val;
        if (u > v) swap(u, v);
        graph[u].push_back(v);
        graph[v].push_back(u);
        deg[u]++;
        deg[v]++;
        edge_to_a[{u, v}] = a_val;
    }

    vector<unordered_set<int>> adj_set(n + 1);
    for (int i = 1; i <= n; i++) {
        adj_set[i] = unordered_set<int>(graph[i].begin(), graph[i].end());
    }

    ll best = 0;

    for (const auto& e : edge_to_a) {
        if (e.second > best) {
            best = e.second;
        }
    }

    for (const auto& e : edge_to_a) {
        int u = e.first.first;
        int v = e.first.second;
        int u0 = u;
        int v0 = v;
        int x = u;
        int y = v;

        if (deg[x] > deg[y] || (deg[x] == deg[y] && x > y)) {
            swap(x, y);
        }

        vector<int> common;
        for (int w : graph[x]) {
            if (w == y) continue;
            if (w > v0 && adj_set[y].count(w)) {
                common.push_back(w);
            }
        }

        for (int w : common) {
            ll total_tri = e.second;
            auto it1 = edge_to_a.find(minmax(u0, w));
            auto it2 = edge_to_a.find(minmax(v0, w));
            if (it1 != edge_to_a.end() && it2 != edge_to_a.end()) {
                total_tri += it1->second;
                total_tri += it2->second;
                if (total_tri > best) {
                    best = total_tri;
                }
            }
        }

        unordered_set<int> common_set(common.begin(), common.end());
        for (int w : common) {
            for (int x_val : graph[w]) {
                if (x_val > w && common_set.count(x_val)) {
                    vector<pii> edges = {
                        minmax(u0, v0),
                        minmax(u0, w),
                        minmax(u0, x_val),
                        minmax(v0, w),
                        minmax(v0, x_val),
                        minmax(w, x_val)
                    };
                    ll total_k4 = 0;
                    bool valid = true;
                    for (auto& edge : edges) {
                        auto it = edge_to_a.find(edge);
                        if (it == edge_to_a.end()) {
                            valid = false;
                            break;
                        }
                        total_k4 += it->second;
                    }
                    if (valid && total_k4 > best) {
                        best = total_k4;
                    }
                }
            }
        }
    }

    cout << best << endl;

    return 0;
}
```

### Explanation
1. **Input Reading**: The code reads the number of cities (n) and highways (m), followed by the coordinates of the cities and the details of each highway (endpoints and attraction points).
2. **Graph Construction**: The graph is built using adjacency lists, and the degrees of each vertex are computed. A map stores the attraction points for each highway.
3. **Initial Check for Size 2**: The maximum attraction points from any single highway (size 2 subset) is determined.
4. **Finding Triangles (Size 3)**: For each edge (u, v), common neighbors (w) greater than max(u, v) are found. The sum of attraction points for the edges (u, v), (u, w), and (v, w) is computed and compared to the current best score.
5. **Finding K4 Cliques (Size 4)**: For each edge (u, v), pairs of common neighbors (w, x) that are connected and greater than max(u, v) are found. The sum of attraction points for all six edges in the K4 clique is computed and compared to the current best score.
6. **Output**: The highest attraction score encountered during the checks is printed.

This approach efficiently checks all potential optimal subsets by leveraging planar graph properties, ensuring optimal performance within the problem constraints.