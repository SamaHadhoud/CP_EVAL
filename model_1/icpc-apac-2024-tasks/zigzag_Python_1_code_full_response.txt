To solve this problem, we need to count the number of distinct ways to stack `n` boxes such that the sequence of stack sizes forms a zig-zag pattern. The zig-zag pattern can either start with an increase (a1 < a2 > a3 < a4 > ...) or a decrease (a1 > a2 < a3 > a4 < ...). The solution involves leveraging dynamic programming to efficiently compute the number of valid compositions for large values of `n` up to 300,000.

### Approach
1. **Problem Analysis**: The problem requires counting sequences of positive integers (stack sizes) that sum to `n` and alternate between increasing and decreasing. Single-element sequences are trivially valid.
2. **Key Insight**: Through pattern analysis, we observe that the number of valid compositions for `n` can be derived using a recurrence relation:
   - For `n = 1` and `n = 2`, the counts are 1.
   - For `n â‰¥ 3`, the count is the sum of the counts for `n-1` and `n-2`, plus an additional 1 if `n` is divisible by 3.
3. **Dynamic Programming**: We precompute the values for all `n` from 1 to 300,000 using the recurrence relation, storing results modulo 998244353 to handle large numbers.
4. **Efficiency**: Preprocessing ensures each test case can be answered in constant time, making the solution efficient for large inputs.

### Solution Code
```python
MOD = 998244353
MAX_N = 300000

def main():
    import sys
    data = sys.stdin.read().split()
    t = int(data[0])
    ns = list(map(int, data[1:1+t]))
    max_n = max(ns) if ns else 0
    
    f_arr = [0] * (max_n + 1)
    if max_n >= 1:
        f_arr[1] = 1
    if max_n >= 2:
        f_arr[2] = 1
    for n in range(3, max_n + 1):
        add = 1 if n % 3 == 0 else 0
        f_arr[n] = (f_arr[n-1] + f_arr[n-2] + add) % MOD
    
    out_lines = []
    for n in ns:
        out_lines.append(str(f_arr[n]))
    sys.stdout.write("\n".join(out_lines))

if __name__ == "__main__":
    main()
```

### Explanation
1. **Reading Input**: The input consists of multiple test cases. The first value is the number of test cases `t`, followed by `t` integers representing `n` for each test case.
2. **Precomputation**: We initialize an array `f_arr` where `f_arr[n]` stores the number of valid compositions for `n`. For `n = 1` and `n = 2`, the values are set to 1.
3. **Recurrence Relation**: For each `n` from 3 to the maximum `n` in the input:
   - If `n` is divisible by 3, add 1; otherwise, add 0.
   - Compute `f_arr[n]` as the sum of `f_arr[n-1]`, `f_arr[n-2]`, and the additive term, all taken modulo 998244353.
4. **Output**: For each test case, the precomputed result for `n` is retrieved from `f_arr` and printed.

This approach efficiently handles the constraints by leveraging dynamic programming and modular arithmetic, ensuring optimal performance even for large inputs.