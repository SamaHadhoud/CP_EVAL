To solve this problem, we need to compute the expected number of additional numbers Aristides must generate from a random number generator (which produces integers between 1 and N uniformly) until every integer from 1 to N has been generated at least twice. The solution involves leveraging dynamic programming to precompute the expected values for all possible states of the problem, defined by the counts of unseen numbers and numbers seen exactly once.

### Approach
1. **Problem Analysis**: The problem requires calculating the expected number of steps to reach a state where every number from 1 to N has been generated at least twice, starting from an initial state defined by the counts of unseen numbers (a) and numbers seen exactly once (b). The key insight is that the expected value from any state (a, b) can be derived using dynamic programming.

2. **Dynamic Programming Setup**: We precompute a DP table `F[a][b]` where `a` is the count of numbers not yet generated, and `b` is the count of numbers generated exactly once. The recurrence relation for `F[a][b]` is:
   - **Base Case**: If `a = 0` and `b = 0`, `F[0][0] = 0.0` (no steps needed).
   - **Recurrence**:
     - If `a = 0`, `F[0][b] = (1.0 + b * F[0][b-1]) / b`.
     - If `b = 0`, `F[a][0] = (1.0 + a * F[a-1][1]) / a`.
     - Otherwise, `F[a][b] = (1.0 + a * F[a-1][b+1] + b * F[a][b-1]) / (a + b)`.

3. **Precomputation**: We precompute the DP table for all possible states (a, b) where `a + b ≤ 3000` (since N can be up to 3000). This table is computed once at the beginning to answer all test cases efficiently.

4. **Processing Test Cases**: For each test case:
   - **Frequency Counting**: We count how many numbers have not been generated (a) and how many have been generated exactly once (b) using frequency arrays.
   - **Result Calculation**: The expected additional steps are computed as `F[a][b] * N`.

### Solution Code
```cpp
#include <iostream>
#include <vector>
#include <iomanip>
using namespace std;

const int MAX_M = 3000;

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);

    vector<vector<double>> F(MAX_M+1, vector<double>(MAX_M+1, 0.0));
    for (int s = 0; s <= MAX_M; s++) {
        for (int a = 0; a <= s; a++) {
            int b = s - a;
            if (s == 0) {
                F[a][b] = 0.0;
            } else if (a == 0) {
                F[0][b] = (1.0 + b * F[0][b-1]) / b;
            } else if (b == 0) {
                F[a][0] = (1.0 + a * F[a-1][1]) / a;
            } else {
                F[a][b] = (1.0 + a * F[a-1][b+1] + b * F[a][b-1]) / (a + b);
            }
        }
    }

    int T;
    cin >> T;
    while (T--) {
        int N, K;
        cin >> N >> K;
        vector<int> A(K);
        for (int i = 0; i < K; i++) {
            cin >> A[i];
        }

        vector<int> freq(N+1, 0);
        int a = N, b = 0;
        for (int x : A) {
            if (x >= 1 && x <= N) {
                freq[x]++;
                if (freq[x] == 1) {
                    a--;
                    b++;
                } else if (freq[x] == 2) {
                    b--;
                }
            }
        }

        double ans = F[a][b] * N;
        cout << fixed << setprecision(9) << ans << '\n';
    }

    return 0;
}
```

### Explanation
1. **Precomputation**: The DP table `F` is precomputed for all possible states (a, b) where `a + b ≤ 3000`. The recurrence relations efficiently compute the expected steps by leveraging previously computed states, iterating from smaller to larger sums `s = a + b`.

2. **Reading Input**: For each test case, we read the values of N (range of numbers) and K (numbers already generated), followed by the list of K numbers.

3. **Frequency Counting**: Using a frequency array, we count how many numbers have not been generated (a) and how many have been generated exactly once (b). This is done in O(K) time per test case by updating counts as we process each number.

4. **Result Calculation**: The expected additional steps are derived from the precomputed table `F` by accessing `F[a][b]` and multiplying by N. The result is printed with a precision of 9 decimal places.

This approach efficiently handles the constraints by leveraging dynamic programming for state precomputation and linear processing for each test case, ensuring optimal performance even for large inputs.