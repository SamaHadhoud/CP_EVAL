To solve this problem, we need to determine the winning team in an ICPC-style contest where teams are evaluated based on the number of problems they solve completely. A team solves a problem only if they solve all test cases for that problem. The winning team is the one with the highest number of solved problems. If multiple teams have the same highest number of solved problems, the team with the smallest index wins.

### Approach
1. **Input Reading**: Read the number of teams \(N\) and problems \(M\). Then, read the array \(T\) which contains the number of test cases for each problem.
2. **Processing Each Team**: For each team, read the number of test cases they solved for each problem. For each problem, check if the number of solved test cases equals the total test cases for that problem. If so, increment the count of solved problems for that team.
3. **Tracking the Best Team**: Maintain the highest count of solved problems across all teams and the smallest team index that achieves this count. If a team has a higher count than the current best, update the best count and team index. If a team has the same count as the current best, retain the current best team index to ensure the smallest index is kept in case of ties.
4. **Output the Result**: The result is the index of the best team (converted from 0-based to 1-based indexing).

### Solution Code
```cpp
#include <iostream>
#include <vector>
using namespace std;

int main() {
    int N, M;
    cin >> N >> M;

    vector<int> T(M);
    for (int j = 0; j < M; j++) {
        cin >> T[j];
    }

    int best_count = -1;
    int best_team_index = -1;

    for (int i = 0; i < N; i++) {
        vector<int> S(M);
        for (int j = 0; j < M; j++) {
            cin >> S[j];
        }

        int count = 0;
        for (int j = 0; j < M; j++) {
            if (S[j] == T[j]) {
                count++;
            }
        }

        if (count > best_count) {
            best_count = count;
            best_team_index = i;
        }
    }

    cout << best_team_index + 1 << endl;

    return 0;
}
```

### Explanation
1. **Reading Input**: The first line reads \(N\) (number of teams) and \(M\) (number of problems). The second line reads the array \(T\) where each element \(T[j]\) is the number of test cases for problem \(j\).
2. **Processing Teams**: For each team \(i\), the code reads an array \(S\) where \(S[j]\) is the number of test cases solved by team \(i\) for problem \(j\). The inner loop checks if \(S[j] == T[j]\) for each problem, incrementing the count of solved problems for the team if true.
3. **Tracking Best Team**: The variable `best_count` keeps track of the highest number of problems solved by any team. If a team's count exceeds `best_count`, `best_count` and `best_team_index` are updated. Since teams are processed in order (from 0 to \(N-1\)), the smallest index in case of a tie is automatically retained.
4. **Output**: The result is `best_team_index + 1` because the team indices in the input are 1-based, while the processing uses 0-based indices.

This approach efficiently processes each team's submissions in \(O(N \times M)\) time, which is optimal given the constraints, and correctly identifies the winning team with minimal overhead.