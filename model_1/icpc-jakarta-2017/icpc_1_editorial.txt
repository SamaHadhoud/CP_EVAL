### Editorial
#### Problem Analysis
The problem involves determining the winning team in an ICPC-style contest. There are \(N\) teams and \(M\) problems. Each problem \(j\) has \(T_j\) test cases. Each team has submitted exactly one solution for every problem, solving \(S_{i,j}\) test cases for problem \(j\). A team is considered to have solved a problem only if they solve all test cases for that problem (i.e., \(S_{i,j} = T_j\)). The winning team is the one that solves the most problems. If multiple teams solve the same maximum number of problems, the team with the smallest index (lowest team number) wins.

#### Key Insight
The solution requires:
1. For each team, count the number of problems they solved completely (i.e., where \(S_{i,j} = T_j\) for problem \(j\)).
2. Track the team(s) with the highest count of solved problems.
3. If there's a tie, select the team with the smallest index.

#### Algorithm Selection
Given the constraints \(1 \le N, M \le 100\), a straightforward approach is efficient:
- Iterate over each team.
- For each team, iterate over each problem and count how many problems they solved completely.
- Maintain the maximum count of solved problems encountered and the smallest team index achieving this count.

This approach runs in \(O(N \times M)\) time, which is optimal for the given constraints (since \(100 \times 100 = 10,000\) operations are well within the 1-second time limit).

#### Step-by-Step Explanation
1. **Read Input:**
   - The first line contains integers \(N\) (number of teams) and \(M\) (number of problems).
   - The second line contains \(M\) integers \(T_1, T_2, \ldots, T_M\) representing the test cases for each problem.
   - The next \(N\) lines each contain \(M\) integers \(S_{i,1}, S_{i,2}, \ldots, S_{i,M}\) for team \(i\).

2. **Initialize Tracking Variables:**
   - `max_solved = -1` to track the highest number of problems solved by any team.
   - `best_team_index = -1` to store the smallest team index achieving `max_solved`.

3. **Process Each Team:**
   - For each team \(i\) (from 0 to \(N-1\), corresponding to team numbers 1 to \(N\)):
     - Initialize `count = 0`.
     - For each problem \(j\) (from 0 to \(M-1\)):
       - If \(S_{i,j} = T_j\), increment `count`.
     - Compare `count` with `max_solved`:
       - If `count > max_solved`, update `max_solved = count` and `best_team_index = i`.
       - If `count == max_solved`, do nothing (since we want the smallest team index, and \(i\) is larger than the current `best_team_index`).

4. **Output Result:**
   - The winning team index is `best_team_index + 1` (to convert from 0-based to 1-based indexing).

#### Handling Edge Cases
- **All teams solve zero problems:** The first team (team 1) wins, as it has the smallest index.
- **Tie in solved problems:** The team with the smallest index is chosen.
- **Single team:** The only team wins regardless of their solved count.

#### Complexity Analysis
- **Time Complexity:** \(O(N \times M)\). Each team is processed in \(O(M)\) time, leading to \(O(N \times M)\) total time.
- **Space Complexity:** \(O(M)\). Only the problem test counts \(T\) and the current team's solved counts are stored at any time, using \(O(M)\) space.

#### Why This Solution Works
- **Correctness:** The algorithm accurately counts the completely solved problems for each team and ensures the team with the highest count (and smallest index in case of a tie) is selected.
- **Efficiency:** The approach efficiently processes each team and problem exactly once, adhering to the constraints.

This approach guarantees optimal performance and correctness for all valid inputs within the problem constraints.