To solve this problem, we need to count the number of valid sacred arrangements of scarecrows on a rectangular paddy field. The arrangements must satisfy two conditions: each row must have at least one scarecrow, and every two consecutive columns must contain at least one scarecrow. Scarecrows can only be placed on empty squares (denoted by '.'), not on rice-planted squares (denoted by 'v').

### Approach
1. **Problem Analysis**:
   - The problem involves placing scarecrows on an R x C grid with constraints on row and column coverage.
   - Each row must have at least one scarecrow.
   - Every pair of consecutive columns must have at least one scarecrow.
   - The solution must efficiently handle the constraints (R ≤ 14, C ≤ 1000) using combinatorial and dynamic programming techniques.

2. **Key Insights**:
   - **Inclusion-Exclusion Principle**: To ensure each row has at least one scarecrow, we use inclusion-exclusion over subsets of rows. For each subset T of rows, we count arrangements that avoid placing scarecrows in T, then combine these counts with appropriate signs.
   - **Dynamic Programming (DP)**: For each subset T, we use DP to count valid arrangements satisfying the consecutive column constraint. The DP state tracks whether the previous column had a scarecrow to enforce the constraint for consecutive columns.

3. **Algorithm**:
   - **Precomputation**:
     - **Base Masks**: For each column, compute a bitmask indicating available rows (empty squares).
     - **Power of Two Table**: Precompute powers of two modulo \(10^9 + 7\) for quick non-empty placement calculations.
     - **Popcount Table**: Precompute the number of set bits (popcount) for all numbers up to \(2^R\) to efficiently count available rows in masked operations.
   - **Inclusion-Exclusion Over Subsets**:
     - For each subset T of rows:
       - **Non-Empty Placements**: For each column, compute the number of ways to place at least one scarecrow in rows not in T.
       - **DP Initialization**: Initialize DP states for the first column (empty or non-empty).
       - **DP Transition**: For subsequent columns, update DP states based on whether the current column is non-empty and the previous column was non-empty.
     - **Count Valid Arrangements**: Sum the final DP states to get \(F(T)\), the count of valid arrangements avoiding rows in T.
   - **Combine Results**: Apply inclusion-exclusion to sum \(F(T)\) over all subsets T with signs based on subset size parity.

4. **Complexity**:
   - **Time Complexity**: \(O(2^R \times R \times C)\). The dominant factor is iterating over \(2^R\) subsets, each involving \(O(C)\) column processing and \(O(R)\) bitmask operations.
   - **Space Complexity**: \(O(2^R + C)\), primarily for storing inclusion-exclusion counts and precomputed tables.

### Solution Code
```cpp
#include <iostream>
#include <vector>
#include <cstring>
#include <algorithm>
using namespace std;

const int MOD = 1000000007;

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);

    int R, C;
    cin >> R >> C;

    vector<string> grid(R);
    for (int i = 0; i < R; i++) {
        cin >> grid[i];
    }

    int nT = 1 << R;
    vector<int> base(C, 0);
    for (int j = 0; j < C; j++) {
        int mask = 0;
        for (int i = 0; i < R; i++) {
            if (grid[i][j] == '.') {
                mask |= (1 << i);
            }
        }
        base[j] = mask;
    }

    vector<long long> power2(R+1, 1);
    for (int i = 1; i <= R; i++) {
        power2[i] = (power2[i-1] * 2) % MOD;
    }

    vector<int> popcount_arr(nT, 0);
    for (int i = 0; i < nT; i++) {
        popcount_arr[i] = __builtin_popcount(i);
    }

    vector<long long> F(nT, 0);
    for (int T = 0; T < nT; T++) {
        vector<long long> non_empty_ways(C, 0);
        for (int j = 0; j < C; j++) {
            int avail = base[j] & ~T;
            avail &= (nT - 1);
            int a = popcount_arr[avail];
            if (a == 0) {
                non_empty_ways[j] = 0;
            } else {
                non_empty_ways[j] = (power2[a] - 1) % MOD;
            }
        }

        if (C == 0) {
            F[T] = 0;
        } else {
            long long dp0 = 1;
            long long dp1 = non_empty_ways[0];
            for (int j = 1; j < C; j++) {
                long long new_dp0 = dp1;
                long long new_dp1 = (dp0 + dp1) % MOD;
                new_dp1 = (new_dp1 * non_empty_ways[j]) % MOD;
                dp0 = new_dp0;
                dp1 = new_dp1;
            }
            F[T] = (dp0 + dp1) % MOD;
        }
    }

    long long ans = 0;
    for (int T = 0; T < nT; T++) {
        int cnt = popcount_arr[T];
        if (cnt % 2 == 0) {
            ans = (ans + F[T]) % MOD;
        } else {
            ans = (ans - F[T]) % MOD;
        }
    }

    ans %= MOD;
    if (ans < 0) ans += MOD;
    cout << ans << endl;

    return 0;
}
```

### Explanation
1. **Reading Input**: The grid dimensions and contents are read.
2. **Base Masks**: For each column, a bitmask is created where each bit represents whether the corresponding row is an empty square ('.').
3. **Power of Two Table**: Precomputed to efficiently calculate the number of non-empty placements per column.
4. **Popcount Table**: Precomputed to quickly count available rows for any subset of rows.
5. **Inclusion-Exclusion Loop**: For each subset T of rows:
   - **Non-Empty Ways**: For each column, compute the number of ways to place at least one scarecrow in rows not in T.
   - **DP Initialization**: The first column can be either empty or non-empty.
   - **DP Transition**: For subsequent columns, update states based on whether the current column is non-empty and the previous column was non-empty.
6. **Result Combination**: Sum \(F(T)\) over all subsets T with signs based on subset size parity to get the final count of valid arrangements covering all rows.
7. **Output**: The result is printed modulo \(10^9 + 7\).

This approach efficiently handles the constraints by leveraging bitmask operations and dynamic programming, ensuring optimal performance for large grids.