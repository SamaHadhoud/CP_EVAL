 Okay, let me break down the problem.

 We have N teams and M problems. Each problem j has T_j testcases. Each team i has submitted a solution for every problem j and solved S_{i,j} testcases.

 Important: A team is considered to have solved a problem only if they solved ALL the testcases for that problem. That means for problem j, the team must have S_{i,j} equal to T_j.

 Steps:

 1. For each team, we want to count the number of problems that they solved completely. That is, for each problem j, if S_{i,j} == T_j, then we count that problem as solved for team i.

 2. Then, we want to find the team(s) that have the maximum number of solved problems.

 3. If there is a tie in the maximum number of solved problems, we choose the team with the smallest index (i.e., the smallest team number, which is the first one in the input order starting from 1).

 How to implement:

  - We read the first line: N and M.
  - Then, we read the next line which has M integers: T_1, T_2, ..., T_M.
  - Then, we read N lines, each with M integers: the j-th integer in the i-th line is S_{i,j}.

  - We can create an array (or list) `solved_counts` of length N (indexed 0 to N-1 for teams 0-indexed) to store the count of problems solved by each team.

    Alternatively, we can process each team one by one and keep track of the best.

  Algorithm:

    Step 1: Read N and M.
    Step 2: Read the list T of M integers (the testcases per problem).
    Step 3: Initialize:
        best_team_index = -1   (will store the current winning team index, 1-indexed)
        max_solved = -1        (the maximum number of problems solved by a team we've seen so far)

    Step 4: For i in range(N):   (i from 0 to N-1, representing team index i)
        Read a line of M integers, call it solved_testcases. (This is the list of S_{i,1}, S_{i,2}, ..., S_{i,M})

        Initialize count = 0 for this team.

        For j in range(M):   (j from 0 to M-1)
            if solved_testcases[j] == T[j]:   (Note: T[j] is the total testcases for problem j)
                then count++

        Now, we have the count of problems that team i solved completely.

        Now, compare this count with the current max_solved.

        Conditions:
          - If count > max_solved, then this team is currently the best. So:
                max_solved = count
                best_team_index = i   (but note: we are 0-indexed here, and the problem expects 1-indexed. So we will output i+1)

          - If count == max_solved, then we have a tie. According to the problem, we choose the team with the smallest index. 
            Since we are iterating from team 0 to team N-1 (which corresponds to team 1 to team N), if we see a tie, we should not update the best_team_index? 
            Actually, we want the smallest index. But note: if we see a team that has the same max_solved as the current best, but our current best_team_index is a team that appeared earlier (with a smaller index) then we don't update. 

          However, note: we are iterating in increasing index order. So if we have:

            team0: count0
            team1: count1

          and then we see a team i that has the same max_solved as the current best, then the current best_team_index is the one with the smallest index we've seen so far. Therefore, we don't want to update in this case.

        So in the case of a tie (count == max_solved), we leave best_team_index unchanged because we already have a team with the same number of solved problems and a smaller index.

    Step 5: Output best_team_index + 1.

  But wait: what if multiple teams have the same max_solved and we see a team that has the same max_solved but a smaller index than the current best_team_index? 

  Actually, because we are iterating from index 0 to N-1, when we see a team that has the same max_solved as the current max, we don't update because we already have a team with the same max_solved and a smaller index (the one we recorded earlier). However, what if the current max_solved is set by a team that has a larger index and we then see a team with the same max_solved and a smaller index? 

  That won't happen because we are iterating from 0 to N-1. So when we see a team that sets a new max_solved, we update. Then when we see a team that has the same max_solved, we skip. 

  However, what if the first team has 0 solved, then we set max_solved=0 and best_team_index=0. Then the next team has 1 solved, then we update max_solved=1 and best_team_index=1. Then the next team has 1 solved: we don't update because we want the smallest index and we already have team1 (index1) which is smaller than the next team (which would be index2). 

  But what if we have:

      Team0: count=1
      Team1: count=2  -> becomes best (max_solved=2, best_team_index=1)
      Team2: count=2 -> same as max_solved, but we don't update because we already have team1 (which is index1) and team2 has index2 (which is larger) so we don't update.

  However, what if we have:

      Team0: count=0
      Team1: count=0 -> we don't update? Then best_team_index remains 0 (which is team1 in 1-indexed? Actually no: team0 is team1? Let me clarify indexing.)

  Actually, in the problem, teams are numbered 1 to N. Our array index 0 corresponds to team1, index1 corresponds to team2? 

  But note: the input says: "the next N lines, each contains M integers; the j-th integer on the i-th line is S_{i,j}"

  The first of these N lines is for team1? 

  So:

      Line0 (the first of the N lines) -> team1
      Line1 -> team2
      ...

  Therefore, in our code:

      i=0 -> team1
      i=1 -> team2
      ...

  So when we output best_team_index+1, that gives the team number.

  Now, in the tie: we want the smallest team number. Since we iterate from i=0 to i=N-1 (which are teams 1 to N), we will first see the team with the smallest number. 

  Therefore, in the algorithm:

      When we see a team i that has a count of solved problems greater than the current max_solved, we update max_solved and best_team_index (to i).

      When we see a team i that has a count equal to the current max_solved, we do nothing (because we already have a team with the same number of solved problems and a smaller index).

  However, note: what if we haven't set max_solved? We initialize max_solved to -1. Then the first team, even if count=0, will be set: because 0 > -1 -> so we set max_solved=0 and best_team_index=0.

  Then the next team with 0: we don't update.

  This is correct.

  But note: it is possible that all teams have 0 solved problems. Then we pick the first team (team1) because it has the smallest index.

  Example: the third sample input: 
      "1 1
       1
       0"

  Then: 
      N=1, M=1, T = [1]
      Then we read one line: [0] for team1.

      For team0 (which is team1): 
          j=0: solved_testcases[0] = 0, T[0]=1 -> 0 != 1 -> count=0.
      Then we set: max_solved=0, best_team_index=0 -> output 0+1 = 1.

  This matches.

  Now, let's test with the first sample:

      Input: 
        3 2
        10 20
        0 19
        10 0
        9 19

      T = [10, 20]

      Team1 (i=0): [0, 19] 
          problem0: 0 != 10 -> not solved.
          problem1: 19 != 20 -> not solved.
          count = 0.

      Then: max_solved becomes 0, best_team_index=0 (which is team1? but wait, the expected winner is team2).

      Then Team2 (i=1): [10, 0] 
          problem0: 10 == 10 -> solved -> count=1
          problem1: 0 != 20 -> not solved.
          count=1 -> which is >0 -> update: max_solved=1, best_team_index=1 -> which is team2? (because i=1 -> team2: yes, since i=0 is team1, i=1 is team2)

      Then Team3 (i=2): [9,19]
          problem0: 9 != 10 -> not solved.
          problem1: 19 != 20 -> not solved.
          count=0 -> skip.

      Then output: best_team_index+1 = 1+1 = 2? But wait, we have team2 which is index1 -> 1+1=2? Actually, the problem says the second team is team2.

      However, note: the sample input has:

        "3 2
         10 20
         0 19
         10 0
         9 19"

      and the output is 2.

      So that matches.

  Now, the second sample:

      Input:
        3 2
        10 20
        0 20
        10 0
        9 19

      T = [10,20]

      Team1 (i=0): [0,20] 
          problem0: 0 != 10 -> no
          problem1: 20 == 20 -> yes -> count=1
          -> count=1 -> max_solved=1, best_team_index=0 (which is team1)

      Team2 (i=1): [10,0]
          problem0: 10==10 -> yes -> count=1 so far
          problem1: 0 !=20 -> no -> count=1
          Now, 1 == max_solved (which is 1) -> so we do nothing? 
          But note: we want the team with the smallest index. Team1 (index0) is already recorded and team2 (index1) has a larger index. So we don't update.

      Team3: [9,19] -> count=0 -> skip.

      Then output: 0+1 = 1 -> which is correct.

  But wait: the problem says: 
      "the first team solved the second problem, the second team solved the first problem, and the third team did not solve any problem. Since the first team has a smaller index than the second team, the first team is the winner."

  So we have two teams with 1 solved problem, and we pick the one with the smallest index (team1).

  Therefore, the algorithm is:

      max_solved = -1
      best_index = -1   (not set)

      for i in range(N):
          count = 0
          read the next line of M integers -> list S

          for j in range(M):
              if S[j] == T[j]:
                  count += 1

          if count > max_solved:
              max_solved = count
              best_index = i

          # else if count == max_solved: we do nothing because we want the smallest index and we already have a team with the same count and a smaller index.

      print(best_index+1)

  However, note: if we have max_solved set to -1 initially, then the first team will always set it to some nonnegative number. And then we update only when we have a strictly greater count.

  This should work.

  Let me test with a case: 
      N=2, M=2, T=[5,5]
      Team1: [5,0] -> count=1 -> then max_solved=1, best_index=0 (team1)
      Team2: [5,5] -> count=2 -> then update: max_solved=2, best_index=1 (team2) -> output 2.

  Another: 
      N=2, M=2, T=[5,5]
      Team1: [5,5] -> count=2 -> max_solved=2, best_index=0
      Team2: [5,5] -> count=2 -> then we don't update -> output 1 (because best_index=0 -> 0+1=1). Correct: both solved 2, but we pick the smallest index (team1).

  Therefore, the algorithm is correct.

  Time complexity: O(N*M). Since N, M <= 100, the maximum operations are 100*100 = 10000, which is acceptable in 1 second.

  Memory: We store T (size M) and then we read each team's data one by one (so we only store one row at a time). So memory is O(M) for T and O(M) for the current row -> O(M) which is <=100, so very safe.

  Implementation note: We must read the input as specified.

  Pseudocode:

      Read N and M
      Read the next line and split to get T (a list of M integers)

      max_solved = -1
      best_index = -1   # we can also initialize to 0, but we haven't seen any team.

      for i from 0 to N-1:
          read a line and split to get an array of M integers, call it arr
          count = 0
          for j from 0 to M-1:
              if arr[j] == T[j]:
                  count += 1

          if count > max_solved:
              max_solved = count
              best_index = i

      print(best_index+1)

  But note: what if N=0? The problem states N>=1, so we don't have to worry.

  Let's code accordingly.

  However, let me check the constraints: N, M>=1.

  So we are safe.

  Therefore, the solution is straightforward.

  Why is it correct?
    - We are correctly counting the number of problems that each team has solved completely.
    - We are tracking the maximum count and the smallest index achieving that maximum as we iterate in increasing index order.

  We output the winning team.

  I think that's it.