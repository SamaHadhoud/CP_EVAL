To solve this problem, we need to determine the minimum cost required to adjust the arrival times of subordinates such that exactly K subordinates are present in a meeting starting at a non-integer time S. The meeting starts S seconds after the boss arrives, and each subordinate must not arrive before the boss (arrival time ≥ 0) or after T seconds (arrival time ≤ T). The cost to adjust a subordinate's arrival time by one second is $1.

### Approach
1. **Problem Analysis**:
   - The meeting time S is a positive non-integer, allowing us to choose S between two integers. This lets us use integer thresholds for arrival times.
   - For exactly K subordinates to be present at time S, there must be an integer threshold \( m \) where:
     - Exactly K subordinates have arrival times ≤ \( m \).
     - The remaining \( N-K \) subordinates have arrival times ≥ \( m+1 \).
   - The cost to adjust a subordinate's arrival time is the absolute difference between their original and new arrival times.

2. **Special Cases Handling**:
   - **T = 0**: If \( K = N \), all subordinates must be at time 0 (cost 0). Otherwise, it's impossible (output -1).
   - **K = N**: All subordinates must be present, achievable without adjustments (cost 0).

3. **General Case (0 < K < N)**:
   - **Candidate Thresholds**: The optimal threshold \( m \) is derived from:
     - 0 and \( T-1 \).
     - Each original arrival time in \( A \) and each arrival time minus one (if within [0, T-1]).
   - **Cost Calculation**:
     - For each candidate \( m \), compute:
       - \( r \): Number of subordinates with original arrival times ≤ \( m \).
       - If \( K \leq r \):
         - Cost = \( (m+1) \times (r - K) - \) (sum of the smallest \( r-K \) arrival times).
       - If \( K > r \):
         - \( s = K - r \)
         - Cost = (sum of the next \( s \) arrival times after the first \( r \)) - \( s \times m \).

4. **Algorithm Selection**:
   - **Sorting and Prefix Sums**: Sort the array of arrival times to efficiently compute counts and sums over ranges. Precompute prefix sums for quick range sum queries.
   - **Candidate Evaluation**: Evaluate each candidate threshold \( m \) to find the minimal cost using binary search for counts and prefix sums for sums.

5. **Complexity Analysis**:
   - **Time Complexity**: \( O(N \log N) \) due to sorting and \( O(N) \) candidate evaluations.
   - **Space Complexity**: \( O(N) \) for storing the sorted array and prefix sums.

### Solution Code
```python
import bisect
import sys

def main():
    data = sys.stdin.read().split()
    if not data:
        return
    
    n = int(data[0])
    K = int(data[1])
    T = int(data[2])
    A = list(map(int, data[3:3+n]))
    
    if T == 0:
        print(0 if K == n else -1)
        return
            
    if K == n:
        print(0)
        return
        
    A.sort()
    P = [0] * (n+1)
    for i in range(1, n+1):
        P[i] = P[i-1] + A[i-1]
    
    candidates = set()
    candidates.add(0)
    if T-1 >= 0:
        candidates.add(T-1)
    for a in A:
        if 0 <= a <= T-1:
            candidates.add(a)
        if 0 <= a-1 <= T-1:
            candidates.add(a-1)
            
    best = float('inf')
    
    for m in candidates:
        r = bisect.bisect_right(A, m)
        if r >= K:
            cost_val = (m + 1) * (r - K) - P[r - K]
        else:
            s = K - r
            cost_val = (P[r + s] - P[r]) - m * s
        
        if cost_val < best:
            best = cost_val
            
    print(best if best != float('inf') else -1)

if __name__ == '__main__':
    main()
```

### Explanation
1. **Input Handling**: The input is read and parsed into the number of subordinates \( N \), required attendees \( K \), maximum arrival time \( T \), and the list of arrival times \( A \).
2. **Special Cases**:
   - **T = 0**: If all subordinates must be present (\( K = N \)), cost is 0; otherwise, it's impossible (-1).
   - **K = N**: All subordinates must be present, so cost is 0 (no adjustments needed).
3. **General Case**:
   - **Sorting and Prefix Sums**: The arrival times are sorted, and prefix sums are precomputed for efficient range sum calculations.
   - **Candidate Thresholds**: Candidate values for \( m \) include 0, \( T-1 \), each original arrival time, and each arrival time minus one (if valid).
   - **Cost Calculation**:
     - For each candidate \( m \), count subordinates with arrival times ≤ \( m \) (\( r \)).
     - If \( K \leq r \), the cost is derived from adjusting the smallest \( r-K \) subordinates to \( m+1 \).
     - If \( K > r \), the cost involves adjusting the next \( K-r \) subordinates to \( m \).
4. **Output**: The minimal cost across all candidates is printed. If no valid candidate is found, -1 is printed.

This approach efficiently narrows down potential thresholds \( m \) and computes the minimal adjustment cost using sorting, prefix sums, and binary search, ensuring optimal performance even for large inputs.