To solve this problem, we need to determine the winning team in an ICPC-style contest where teams are ranked based on the number of problems they solve completely. A team solves a problem only if they solve all test cases for that problem. The winning team is the one with the highest number of solved problems. If multiple teams have the same highest number of solved problems, the team with the smallest index wins.

### Approach
1. **Input Reading**: Read the number of teams \( N \) and problems \( M \). Then, read the list \( T \) which contains the number of test cases for each problem.
2. **Process Each Team**: For each team, read their solved test cases for each problem. For each problem, check if the number of solved test cases matches the total test cases for that problem. If it does, increment the count of solved problems for that team.
3. **Track the Winning Team**: Maintain the maximum number of solved problems encountered and the smallest team index that achieved this count. If a team has more solved problems than the current maximum, update the maximum and the best team index. If a team has the same number of solved problems as the current maximum, do not update since we prefer the smallest index.
4. **Output the Result**: The result is the smallest team index (converted to 1-based indexing) with the highest number of solved problems.

### Solution Code
```python
def main():
    import sys
    input = sys.stdin.read().split()
    idx = 0
    N = int(input[idx])
    idx += 1
    M = int(input[idx])
    idx += 1
    T = list(map(int, input[idx:idx+M]))
    idx += M
    
    max_solved = -1
    best_team = -1
    
    for i in range(N):
        S = list(map(int, input[idx:idx+M]))
        idx += M
        count = 0
        for j in range(M):
            if S[j] == T[j]:
                count += 1
        if count > max_solved:
            max_solved = count
            best_team = i
    
    print(best_team + 1)

if __name__ == "__main__":
    main()
```

### Explanation
1. **Reading Input**: The input is read all at once for efficiency, especially given the constraints. The first two values are \( N \) (number of teams) and \( M \) (number of problems). The next \( M \) values are the test cases for each problem, stored in list \( T \).
2. **Processing Teams**: For each team, the next \( M \) values represent the solved test cases for each problem. The code checks if the solved test cases for each problem match the total test cases for that problem. If they do, the problem is counted as solved.
3. **Tracking Best Team**: The code keeps track of the maximum number of solved problems (`max_solved`) and the team index (`best_team`) that achieved this count. If a team solves more problems than the current maximum, both `max_solved` and `best_team` are updated.
4. **Output**: The result is the 1-based index of the best team, which is `best_team + 1`.

This approach efficiently processes each team and problem, ensuring optimal performance with a time complexity of \( O(N \times M) \), which is feasible given the constraints. The solution correctly handles ties by selecting the smallest team index and edge cases such as all teams solving zero problems or a single team participating.