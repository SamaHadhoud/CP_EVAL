 We are going to read the input as described.
 Steps:
 1. Read the first line: N and M.
 2. Read the next line: list T of M integers (T_j for each problem j).
 3. Then, we will read N lines, each with M integers.

 We'll then iterate for each team (i from 0 to N-1):
   For the current team, we have a list of M integers (S_i0, S_i1, ..., S_i(M-1))
   For each problem j in range(M):
        if S_ij == T[j], then we count this problem as solved.

 We'll keep track of:
   max_solved = -1   (the maximum number of solved problems we've seen so far)
   best_team = -1    (the team index (0-indexed) that achieved max_solved)

 However, note: in case of a tie in the number of solved problems, we choose the smallest team index (i.e., the first team that achieved that max, and then if we see a tie later we don't update because we want the smallest index? Actually, we must note: if a later team has the same max, we don't want to update because we already have a team with a smaller index? But what if we haven't seen a team with that max? Actually, we traverse from team 0 to team N-1 (which corresponds to team 1 to team N). We want the smallest team index that has the highest count.

 How about: 
   We traverse in increasing order of team index (from 0 to N-1). 
   We want to remember the best team (with the smallest index) that has the highest count so far.

   So when we see a team that has a count greater than the current max_solved, we update both max_solved and best_team.
   When we see a team that has a count equal to the current max_solved, we do nothing because we already have a team with a smaller index (since we are going from 0 to N-1) that achieved the same max_solved? Actually, if a later team has the same max_solved, we don't want to update because the current best_team has a smaller index. But if we haven't set any team for the current max_solved? Actually, we update only when we get a count greater than max_solved.

 However, what if we have two teams: 
   Team 0: count = 3
   Team 1: count = 3 -> we don't update. Then we return team0+1 = 1.

 But what if we have:
   Team 0: count = 2
   Team 1: count = 3 -> we update to team1 (index1) then max_solved=3.
   Then team2: count=3 -> we don't update? Then we return team1 (which is index1 -> team2? no, wait: our team indices: 
        index0 -> team1, index1 -> team2, index2 -> team3? 

 Actually, the input: 
   The first team after the T line is team1: so that's index0 in our list? 
   But the problem says: the i-th team (i from 1 to N) is the next lines.

 Our plan: 
   We read N lines. The first line of the teams is team1, the second is team2, ... the last is teamN.

   We'll iterate i from 0 to N-1: 
        count = 0
        for j in range(M):
            if S[i][j] == T[j]:
                count += 1

        Then we compare:
            if count > max_solved:
                max_solved = count
                best_team = i   # which corresponds to the (i+1)-th team
            # if equal, we don't update because we want the first team (smallest index) that achieved the max.

 But note: if we see a team later that has the same max_solved, we don't want to take it because we already have a team with a smaller index? Exactly. Since we are iterating from the smallest index (0) to the largest (N-1), the first time we see a max_solved we have the smallest index for that max_solved. Then if we see a higher count we update. If we see an equal count but we have already seen a higher count, then we don't care. But if we haven't seen a higher count and we see an equal count, then we don't update because we already have one at a smaller index.

 However, what if the first team has 0, then the second team has 1 (which is the new max), then the third team has 1? We update at the second team (index1) and then for the third team (index2) we see 1 which is equal to max_solved? Then we don't update. So we return index1 -> which is team2? But the problem says: if there are more than one team with the most number of problems solved, then the winning team is the team with the smallest index. So we want team2? Actually, in this case, team2 (index1) is smaller than team3 (index2). So we don't update for team3? That's correct.

 But what if the first team has 1, then the second team has 1? Then we set at team0: max_solved=1, best_team=0. Then for team1 (index1): count=1 -> equal to max_solved -> we don't update. Then we return team0+1 = 1. That's correct because team1 (the first team) has the smallest index.

 Therefore, we don't update on equal.

 Implementation:

   max_solved = -1
   best_team = -1

   for i in range(N):
        count = 0
        read the next line -> list of M integers for team i
        for j in range(M):
            if s_ij == T[j]:
                count += 1

        if count > max_solved:
            max_solved = count
            best_team = i

   Then output best_team + 1

 Let's test with the sample: 
   Sample 1:
        Input: 
            3 2
            10 20
            0 19
            10 0
            9 19

        T = [10, 20]

        Team0: [0,19] -> 
            problem0: 0 != 10 -> not solved.
            problem1: 19 != 20 -> not solved. -> count=0.
            max_solved = 0? But initially max_solved=-1, so 0>-1 -> update: max_solved=0, best_team=0.

        Team1: [10,0] -> 
            problem0: 10==10 -> solved.
            problem1: 0!=20 -> not solved. -> count=1.
            1>0 -> update: max_solved=1, best_team=1.

        Team2: [9,19] -> 
            problem0: 9!=10 -> no
            problem1: 19!=20 -> no -> count=0 -> no update.

        Output: best_team+1 = 1+1 = 2. -> Correct.

   Sample 2:
        Input:
            3 2
            10 20
            0 20
            10 0
            9 19

        T = [10,20]

        Team0: [0,20] -> 
            problem0: 0!=10 -> no
            problem1: 20==20 -> yes -> count=1.
            update: max_solved=1, best_team=0.

        Team1: [10,0] -> 
            problem0: 10==10 -> solved (count1 for this team: 1 so far)
            problem1: 0!=20 -> no -> total=1.
            Now, 1==max_solved? Then we don't update. So best_team remains 0.

        Team2: [9,19] -> count=0 -> skip.

        Output: 0+1 = 1. -> Correct.

   Sample 3:
        Input:
            1 1
            1
            0

        T=[1]
        Team0: [0] -> 0 != 1 -> count=0.
        Then: 0 > -1 -> update: max_solved=0, best_team=0 -> output 1.

 Therefore, the solution is as described.

 Let's code accordingly.