To solve this problem, we need to construct a forest with the minimum number of trees that satisfies seven specific requirements. The key requirements include ensuring that each tree is rooted, each node and edge has specific values, each tuple appears exactly once as a parent-child relationship, internal nodes have parent edge weights smaller than child edge weights, no node has more than M children, and the forest contains exactly N edges.

### Approach
1. **Sort Edges by Weight**: Process edges in increasing order of their weights. This ensures that when attaching an edge to an existing node, the parent edge weight is always smaller than any child edge weights, satisfying requirement 5.
2. **Track Available Slots**: Maintain a hash map (`slots`) where `slots[a]` represents the number of available child slots for nodes with value `a`. Each node can have up to `M` children.
3. **Process Each Edge**:
   - For each edge `(u, v, w)`:
     - If there is an available slot for a node with value `u` (i.e., `slots[u] > 0`), use one slot to attach the edge. Decrement `slots[u]` by 1 and add `M` slots to `slots[v]` (since the new child node can have up to `M` children).
     - If no slot is available for `u`, start a new tree (increment the tree count). This creates a root node for `u` (with `M - 1` remaining slots) and a child node for `v` (with `M` slots).
4. **Output the Tree Count**: The total number of trees created (root edges) is the answer.

### Solution Code
```cpp
#include <iostream>
#include <vector>
#include <algorithm>
#include <unordered_map>

int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(0);
    int N, M;
    std::cin >> N >> M;

    std::vector<std::tuple<int, long long, long long>> edges;
    for (int i = 0; i < N; i++) {
        long long u, v;
        int w;
        std::cin >> u >> v >> w;
        edges.push_back(std::make_tuple(w, u, v));
    }

    std::sort(edges.begin(), edges.end());

    int trees = 0;
    std::unordered_map<long long, long long> slots;
    slots.reserve(2 * N);

    for (int i = 0; i < N; i++) {
        int w = std::get<0>(edges[i]);
        long long u = std::get<1>(edges[i]);
        long long v = std::get<2>(edges[i]);

        long long& ref_u = slots[u];
        long long& ref_v = slots[v];

        if (ref_u > 0) {
            ref_u--;
            ref_v += M;
        } else {
            trees++;
            ref_u += (M - 1);
            ref_v += M;
        }
    }

    std::cout << trees << "\n";
    return 0;
}
```

### Explanation
1. **Reading Input**: The input is read and stored as a vector of tuples `(w, u, v)`, where `w` is the edge weight, and `u` and `v` are the node values.
2. **Sorting Edges**: The edges are sorted by their weights to ensure that parent edges are processed before child edges, which is crucial for satisfying requirement 5.
3. **Processing Edges**: For each edge in sorted order:
   - If the parent node `u` has available slots, the edge is attached to it. The slot count for `u` is decremented, and the child node `v` gains `M` slots.
   - If no slots are available for `u`, a new tree is started (incrementing the tree count). The parent node `u` is initialized with `M - 1` slots, and the child node `v` gains `M` slots.
4. **Output**: The total number of trees (new roots created) is printed as the result.

This approach efficiently constructs the forest while minimizing the number of trees and adhering to all constraints, leveraging sorting and hash map operations for optimal performance. The complexity is dominated by the sorting step, which is \(O(N \log N)\), with the processing step being \(O(N)\) on average due to hash map operations.