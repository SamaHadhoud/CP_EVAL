To solve this problem, we need to reconstruct Romanos' guesses in a number guessing game where Theodora provides answers that maximize the remaining range of possible numbers. Romanos makes up to \( K \) guesses, and Theodora's answers are given. The goal is to determine a sequence of guesses consistent with the answers or conclude that it's impossible.

### Approach
1. **Problem Analysis**: The problem involves simulating a number guessing game where Theodora adaptively changes her number to maximize the remaining range of possible numbers, ensuring Romanos loses if he doesn't guess correctly within \( K \) tries. The challenge is to reconstruct Romanos' guesses based on Theodora's answers while adhering to the constraints.

2. **Key Insight**: The solution requires simulating the game step-by-step while ensuring each guess is consistent with the current range of possible numbers and Theodora's adversarial strategy. Theodora's answers are predetermined to leave the largest possible range, breaking ties by choosing "<".

3. **Algorithm Selection**:
   - **Precomputation**: Compute the minimal interval size required at each step to accommodate the remaining answers. This involves traversing the answer string backwards to determine the minimal interval sizes.
   - **Simulation**: Start with the initial interval \([1, N]\). For each answer, choose a guess within the current interval that satisfies Theodora's answer and ensures the updated interval is non-empty and sufficiently large for subsequent answers. Update the interval based on the answer.

4. **Complexity Analysis**: The algorithm processes each answer once, leading to a time complexity of \( O(K) \). The space complexity is \( O(K) \) to store the precomputed minimal sizes and the output guesses.

### Solution Code
```cpp
#include <iostream>
#include <vector>
#include <string>
using namespace std;

int main() {
    long long N, K;
    cin >> N >> K;
    string s;
    cin >> s;
    int M = s.size();

    vector<long long> dp(M + 1, 0);
    dp[M] = 1;
    for (int i = M - 1; i >= 0; i--) {
        if (s[i] == '=') {
            dp[i] = 1;
        } else {
            if (i == M - 1) {
                dp[i] = 2;
            } else {
                dp[i] = dp[i + 1] + 1;
            }
        }
    }

    long long L = 1, R = N;
    vector<long long> ans;

    for (int i = 0; i < M; i++) {
        if (R < L || R - L + 1 < dp[i]) {
            cout << -1 << endl;
            return 0;
        }

        if (s[i] == '=') {
            if (L != R) {
                cout << -1 << endl;
                return 0;
            }
            ans.push_back(L);
        } else if (s[i] == '<') {
            long long candidate1 = (L + R + 1) / 2;
            long long candidate2 = L + dp[i + 1];
            long long g = max(candidate1, candidate2);
            if (g < L || g > R) {
                cout << -1 << endl;
                return 0;
            }
            ans.push_back(g);
            R = g - 1;
        } else if (s[i] == '>') {
            long long candidate1 = (L + R - 1) / 2;
            long long candidate2 = R - dp[i + 1];
            long long g = min(candidate1, candidate2);
            if (g < L || g > R) {
                cout << -1 << endl;
                return 0;
            }
            ans.push_back(g);
            L = g + 1;
        }
    }

    for (int i = 0; i < ans.size(); i++) {
        if (i > 0) cout << " ";
        cout << ans[i];
    }
    cout << endl;

    return 0;
}
```

### Explanation
1. **Precomputation**: The `dp` array is computed to store the minimal interval size required at each step. For the last answer, if it's "=", the interval size is 1; otherwise, it's 2. For other steps, the minimal size is derived from the next step's requirement plus one.
2. **Simulation**: The algorithm processes each answer in sequence:
   - For "=", the current interval must be a singleton; otherwise, it's impossible.
   - For "<", the guess is chosen to ensure the left part of the interval is at least as large as the right part and meets the next step's minimal size requirement.
   - For ">", the guess ensures the right part is strictly larger than the left part and meets the next step's requirement.
3. **Output**: If any step is impossible (interval too small or invalid guess), "-1" is printed. Otherwise, the sequence of valid guesses is printed.

This approach efficiently reconstructs Romanos' guesses while adhering to Theodora's adversarial strategy, ensuring correctness and optimal performance within the problem constraints.