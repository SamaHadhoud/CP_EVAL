To solve this problem, we need to compute the expected number of additional numbers Aristides needs to generate until every number from 1 to N has been generated at least twice. The solution involves dynamic programming to precompute the expected values for all possible states of the problem, where a state is defined by the count of numbers that haven't been generated yet (a) and the count of numbers that have been generated exactly once (b).

### Approach
1. **Problem Analysis**: The problem requires calculating the expected number of steps to reach a state where every number from 1 to N has been generated at least twice, starting from an initial state defined by the counts of unseen numbers (a) and numbers seen exactly once (b). The solution leverages dynamic programming to efficiently compute these expected values.

2. **Dynamic Programming Setup**: We use a 2D DP array `dp[a][b]` where `a` is the count of numbers not yet generated, and `b` is the count of numbers generated exactly once. The recurrence relation for `dp[a][b]` is derived from considering the next possible outcomes:
   - Generating a new number (unseen), transitioning to state `(a-1, b+1)`.
   - Generating a number seen once, transitioning to state `(a, b-1)`.
   - Generating a number already seen twice, staying in the same state.

3. **Base Case**: The base case is `dp[0][0] = 0.0` since no additional steps are needed if all numbers have been generated at least twice.

4. **State Transitions**: For each state `(a, b)`:
   - If `a` is zero, the expected steps depend on reducing `b`.
   - If `b` is zero, the expected steps depend on reducing `a`.
   - Otherwise, the expected steps combine transitions for reducing `a` and `b`.

5. **Efficiency**: The solution groups test cases by `N` to avoid redundant computations. For each distinct `N`, the DP table is computed once and reused for all test cases with that `N`. The frequency counts for each test case are computed to determine the initial state `(a, b)`, and the result is fetched from the precomputed DP table.

### Solution Code
```python
import sys
from collections import defaultdict

def main():
    data = sys.stdin.read().split()
    t = int(data[0])
    index = 1
    test_cases = []
    for _ in range(t):
        n = int(data[index])
        k = int(data[index+1])
        index += 2
        A = list(map(int, data[index:index+k])) if k > 0 else []
        index += k
        test_cases.append((n, k, A))
    
    groups = defaultdict(list)
    for i, (n, k, A) in enumerate(test_cases):
        groups[n].append((k, A, i))
    
    results = [0.0] * t
    for n, cases in groups.items():
        dp = [[0.0] * (n+1) for _ in range(n+1)]
        for s in range(1, n+1):
            for a in range(0, s+1):
                b = s - a
                if a == 0:
                    dp[0][b] = (n + b * dp[0][b-1]) / b
                elif b == 0:
                    dp[a][0] = (n + a * dp[a-1][1]) / a
                else:
                    dp[a][b] = (n + a * dp[a-1][b+1] + b * dp[a][b-1]) / s
        
        for k_val, A_list, orig_idx in cases:
            freq = [0] * (n+1)
            for x in A_list:
                if 1 <= x <= n:
                    freq[x] += 1
            a_count = 0
            b_count = 0
            for i in range(1, n+1):
                if freq[i] == 0:
                    a_count += 1
                elif freq[i] == 1:
                    b_count += 1
            results[orig_idx] = dp[a_count][b_count]
    
    for res in results:
        print("{:.9f}".format(res))

if __name__ == '__main__':
    main()
```

### Explanation
1. **Reading Input**: The input is read in one go for efficiency, especially given the constraints. The number of test cases `t` is read first, followed by the details of each test case (N, K, and the list of generated numbers).
2. **Grouping Test Cases**: Test cases are grouped by their `N` values to process all cases with the same `N` together. This allows the DP table for each `N` to be computed once and reused.
3. **Dynamic Programming Table Initialization**: For each distinct `N`, a 2D DP array is initialized. The array is filled by iterating over possible sums `s = a + b` (from 1 to N) and all valid `a` and `b` values.
4. **State Transitions**: For each state `(a, b)`, the expected steps are computed based on transitions:
   - If `a` is zero, only reducing `b` is considered.
   - If `b` is zero, only reducing `a` is considered.
   - Otherwise, both transitions are combined.
5. **Processing Test Cases**: For each test case in a group, the frequency of each number is counted to determine the initial state `(a, b)`. The result is then retrieved from the precomputed DP table.
6. **Output**: The results for all test cases are printed with a precision of 9 decimal places.

This approach efficiently handles the problem by leveraging dynamic programming and grouping test cases to minimize redundant computations, ensuring optimal performance even for large inputs.