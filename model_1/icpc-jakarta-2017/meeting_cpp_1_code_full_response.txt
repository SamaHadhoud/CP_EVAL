To solve this problem, we need to determine the minimum cost required to adjust the arrival times of subordinates such that exactly K subordinates are present in a meeting starting at a non-integer time S. The meeting starts S seconds after the boss arrives, and each subordinate must not arrive before the boss (arrival time ≥ 0) or after T seconds (arrival time ≤ T). The cost to adjust a subordinate's arrival time by one second is $1.

### Approach
1. **Problem Analysis**:
   - The meeting time S is a positive non-integer, allowing us to choose S between two integers, effectively using integer thresholds for arrival times.
   - For exactly K subordinates to be present at time S, there must be an integer threshold \( m \) where:
     - Exactly K subordinates have arrival times ≤ \( m \).
     - The remaining \( N-K \) subordinates have arrival times ≥ \( m+1 \).
   - The cost to adjust each subordinate's arrival time is the absolute difference between their original and new arrival times.

2. **Special Cases Handling**:
   - **T = 0**: If \( K = N \), all subordinates must be at time 0, costing 0. Otherwise, it's impossible (output -1).
   - **K = N**: All subordinates must be present, achievable with cost 0.

3. **General Case (0 < K < N)**:
   - **Candidate Thresholds**: The optimal threshold \( m \) is derived from:
     - 0 and \( T-1 \).
     - Each original arrival time in \( A \) and each arrival time minus one (if within [0, \( T-1 \)].
   - **Cost Calculation**:
     - For each candidate \( m \):
       - **Count \( r \)**: Number of subordinates with original arrival times ≤ \( m \).
       - **If \( K \leq r \)**:
         - Push \( r-K \) subordinates (largest among the first \( r \)) to \( m+1 \). Cost = \( (m+1) \times (r - K) - \sum_{i=K}^{r-1} A[i] \).
       - **If \( K > r \)**:
         - Bring \( K - r \) subordinates (smallest among those > \( m \)) down to \( m \). Cost = \( \sum_{i=r}^{r+s-1} A[i] - s \times m \), where \( s = K - r \).

### Solution Code
```cpp
#include <iostream>
#include <vector>
#include <algorithm>
#include <set>
#include <climits>
using namespace std;

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    long long n, K, T;
    cin >> n >> K >> T;
    vector<long long> A(n);
    for (int i = 0; i < n; i++) {
        cin >> A[i];
    }

    if (T == 0) {
        if (K == n) {
            cout << 0 << endl;
        } else {
            cout << -1 << endl;
        }
        return 0;
    }

    if (K == n) {
        cout << 0 << endl;
        return 0;
    }

    sort(A.begin(), A.end());
    vector<long long> P(n + 1, 0);
    for (int i = 0; i < n; i++) {
        P[i + 1] = P[i] + A[i];
    }

    set<long long> cand;
    cand.insert(0);
    if (T - 1 >= 0) {
        cand.insert(T - 1);
    }
    for (long long a : A) {
        if (a >= 0 && a <= T - 1) {
            cand.insert(a);
        }
        if (a - 1 >= 0 && a - 1 <= T - 1) {
            cand.insert(a - 1);
        }
    }

    long long best = (long long)1e18;
    for (long long m : cand) {
        auto it = upper_bound(A.begin(), A.end(), m);
        long long r = it - A.begin();

        if (K <= r) {
            long long cost = (m + 1) * (r - K) + (P[K] - P[r]);
            if (cost < best) {
                best = cost;
            }
        } else {
            long long s = K - r;
            if (r + s > n) {
                continue;
            }
            long long cost = (P[r + s] - P[r]) - s * m;
            if (cost < best) {
                best = cost;
            }
        }
    }

    cout << best << endl;

    return 0;
}
```

### Explanation
1. **Input Handling**: The input is read and parsed into the number of subordinates \( N \), required attendees \( K \), maximum arrival time \( T \), and the list of arrival times \( A \).
2. **Special Cases**:
   - **T = 0**: If \( K = N \), output 0; otherwise, output -1.
   - **K = N**: Output 0 (no adjustments needed).
3. **General Case**:
   - **Sorting and Prefix Sums**: The arrival times are sorted, and prefix sums are precomputed for efficient range sum calculations.
   - **Candidate Thresholds**: Candidate values for \( m \) include 0, \( T-1 \), each original arrival time, and each arrival time minus one (if valid).
   - **Cost Calculation**:
     - For each candidate \( m \), count subordinates with arrival times ≤ \( m \) (using binary search).
     - If \( K \leq r \), the cost is derived from pushing \( r-K \) subordinates to \( m+1 \).
     - If \( K > r \), the cost involves bringing \( K-r \) subordinates down to \( m \).
4. **Output**: The minimal cost across all candidates is printed, ensuring constraints are met (arrival times within [0, T]).

This approach efficiently narrows down potential thresholds \( m \) and computes the minimal adjustment cost using sorting, prefix sums, and binary search, ensuring optimal performance for large inputs.