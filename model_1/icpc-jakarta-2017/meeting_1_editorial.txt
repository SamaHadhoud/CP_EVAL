### Approach
The problem requires finding the minimum cost to adjust the arrival times of subordinates such that exactly K subordinates are present in a meeting starting at a non-integer time S. The meeting starts S seconds after the boss arrives, and each subordinate must not arrive before the boss (arrival time ≥ 0) or after T seconds (arrival time ≤ T). The cost to adjust a subordinate's arrival time by one second is $1.

#### Key Insights:
1. **Problem Analysis**: 
   - The meeting time S is a positive non-integer, so we can choose S such that it lies between two integers. This allows us to effectively use integer thresholds for arrival times.
   - For exactly K subordinates to be present at time S, there must be an integer threshold m where:
     - Exactly K subordinates have arrival times ≤ m.
     - The remaining N-K subordinates have arrival times ≥ m+1.
   - The cost to adjust a subordinate's arrival time is the absolute difference between their original and new arrival times.

2. **Handling Special Cases**:
   - **T = 0**: 
     - If K = N, all subordinates must be at time 0, costing 0.
     - Otherwise, it's impossible (output -1) since subordinates cannot arrive after T=0 or before the boss.
   - **K = N**: 
     - All subordinates must be present, achievable by setting their arrival times to their original values (cost 0).

3. **General Case (0 < K < N)**:
   - **Candidate Thresholds**: The optimal threshold m is derived from:
     - 0 and T-1.
     - Each original arrival time in A and each arrival time minus one (if within [0, T-1]).
   - **Cost Calculation**:
     - For each candidate m, compute:
       - `r`: Number of subordinates with original arrival times ≤ m.
       - If K ≤ r: 
         - Cost = `(m + 1) * (r - K) + (sum of first K arrival times - sum of first r arrival times)`.
       - If K > r: 
         - `s = K - r`
         - Cost = `(sum of next s arrival times after the first r) - s * m`.

#### Algorithm Selection:
- **Sorting and Prefix Sums**: 
  - Sort the array of arrival times to efficiently compute counts and sums over ranges.
  - Precompute prefix sums for quick range sum queries.
- **Candidate Evaluation**:
  - Evaluate each candidate threshold m to find the minimal cost using binary search for counts and prefix sums for sums.

#### Complexity Analysis:
- **Time Complexity**: O(N log N) due to sorting and binary searches for each candidate (O(N) candidates).
- **Space Complexity**: O(N) for storing the sorted array and prefix sums.

### Solution Code
```python
import bisect

def main():
    import sys
    data = sys.stdin.read().split()
    if not data:
        return
    
    n = int(data[0])
    K = int(data[1])
    T = int(data[2])
    A = list(map(int, data[3:3+n]))
    
    if T == 0:
        if K == n:
            print(0)
        else:
            print(-1)
        return
            
    if K == n:
        print(0)
        return
        
    A.sort()
    P = [0] * (n+1)
    for i in range(1, n+1):
        P[i] = P[i-1] + A[i-1]
    
    candidates = set()
    candidates.add(0)
    if T-1 >= 0:
        candidates.add(T-1)
    for a in A:
        if a <= T-1:
            candidates.add(a)
        if a-1 >= 0 and a-1 <= T-1:
            candidates.add(a-1)
            
    best = 10**18
    for m in candidates:
        r = bisect.bisect_right(A, m)
        if K <= r:
            cost_val = (m+1) * (r - K) + (P[K] - P[r])
        else:
            s = K - r
            if r + s > n:
                continue
            cost_val = (P[r+s] - P[r]) - s * m
            
        if cost_val < best:
            best = cost_val
            
    print(best)

if __name__ == '__main__':
    main()
```

### Explanation
1. **Input Handling**: The input is read and parsed into the number of subordinates (N), required attendees (K), maximum arrival time (T), and the list of arrival times (A).
2. **Special Cases**:
   - **T = 0**: If all subordinates must be present (K = N), cost is 0; otherwise, it's impossible (-1).
   - **K = N**: All subordinates must be present, so cost is 0 (no adjustments needed).
3. **General Case**:
   - **Sorting and Prefix Sums**: The arrival times are sorted, and prefix sums are precomputed for efficient range sum calculations.
   - **Candidate Thresholds**: Candidate values for m include 0, T-1, each original arrival time, and each arrival time minus one (if valid).
   - **Cost Calculation**:
     - For each candidate m, count subordinates with arrival times ≤ m (r).
     - If K ≤ r, the cost is derived from adjusting the first K and next r-K subordinates.
     - If K > r, the cost involves adjusting the next K-r subordinates to at least m+1.
4. **Output**: The minimal cost across all candidates is printed.

This approach efficiently narrows down potential thresholds (m) and computes the minimal adjustment cost using sorting, prefix sums, and binary search, ensuring optimal performance even for large inputs.