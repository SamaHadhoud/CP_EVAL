To solve this problem, we need to construct a forest with the minimum number of trees that satisfies seven specific requirements. The key insight is leveraging the unique edge weights and processing edges in increasing order to ensure the parent edge weight is smaller than any child edge weights (for internal nodes). 

### Approach
1. **Sort Edges by Weight**: Process edges in increasing order of their weights. This ensures that when attaching a child to a parent, the parent's edge (if any) has a lower weight, satisfying requirement 5.
2. **Track Available Slots**: Maintain a dictionary to keep track of available child slots for each node value (A value). Each node can have up to M children.
3. **Process Each Edge**:
   - If the parent node (u) has available slots, use one slot to attach the child (v). Decrement the parent's slots and add M slots for the child (v).
   - If no slots are available for the parent (u), start a new tree (increment tree count). The parent (u) now has (M - 1) slots left (since one is used for the current edge), and the child (v) gets M slots.
4. **Output Tree Count**: The total number of trees created (root edges) is the answer.

### Solution Code
```python
import sys
from collections import defaultdict

def main():
    data = sys.stdin.read().split()
    n = int(data[0])
    m_val = int(data[1])
    edges = []
    index = 2
    for i in range(n):
        u = int(data[index])
        v = int(data[index + 1])
        w = int(data[index + 2])
        index += 3
        edges.append((u, v, w))
    
    edges.sort(key=lambda x: x[2])
    
    trees = 0
    slots = defaultdict(int)
    
    for u, v, w in edges:
        if slots[u] > 0:
            slots[u] -= 1
            slots[v] += m_val
        else:
            trees += 1
            slots[u] += m_val - 1
            slots[v] += m_val
    
    print(trees)

if __name__ == "__main__":
    main()
```

### Explanation
1. **Reading Input**: The input is read in one go for efficiency, especially given the constraints (up to 100,000 edges).
2. **Sorting Edges**: The edges are sorted by their weights to process them in increasing order. This ensures that any parent node processed before its children will have a lower edge weight, satisfying requirement 5.
3. **Processing Edges**:
   - For each edge (u, v, w), check if the parent node (u) has available slots. If yes, decrement the parent's slot count and add M slots for the child node (v).
   - If no slots are available for the parent (u), start a new tree (increment tree count). The parent (u) now has (M - 1) slots remaining (since one slot is used for the current edge), and the child (v) is initialized with M slots.
4. **Output Result**: The total number of trees (roots) created is printed as the result.

This approach efficiently constructs the forest while minimizing the number of trees and adhering to all constraints, with a time complexity dominated by sorting the edges (O(N log N)). The space complexity is O(N) for storing edges and tracking slots.