 We are going to read N and M.
 Then we read the list T of M integers (number of test cases for each problem).
 Then for each of the N teams, we read M integers (S_{i,j} for each problem j).

 For each team i (0-indexed), we traverse the j from 0 to M-1:
   if S[i][j] equals T[j], then we count that as a solved problem.

 We maintain:
   best_count = -1   (the maximum number of problems solved by any team so far)
   best_team = -1    (the smallest team index that has achieved best_count; note: we want the smallest index in case of tie)

 However, note: if we find a team with a higher count, we update both best_count and best_team.
 But if we find a team with the same count, we do not update because we are traversing from team 0 (which is team 1) to team N-1 (which is team N) and we want the smallest index? 
 Actually, if we encounter a team with the same count as the current best, we should not update because we want the first team (with the smallest index) that achieved that maximum. 
 But note: if we have a tie, the problem says the smallest index wins. However, if we first set best_team to an index, and then later we find a team with the same count but a smaller index? 
 Actually, we are traversing from team index 0 to N-1. The team index in the input order is increasing. But we want the smallest team number (which is the first one we encounter?).

 However, note: we are going to update only when we see a team that has strictly more solved problems. If we see a team with the same count, we don't update the best_team. But what if we haven't seen any team with that count? Actually, we start with best_count=-1 and then we update when we see the first team. Then if we see a team with the same count later, we do nothing because we want the smallest index and the first one we encountered (with a lower index) already holds the record.

 But wait: what if the first team has 0, then the second team has 1, then the third team has 1? Then we set best_team to the second team (index=1) because when we see the second team we update (since 1 > -1 initially, but actually we start at -1). Then when we see the third team with 1, we don't update because 1 is not greater than 1. So we keep the second team (which is index 1 -> team number 2). But in the tie between team2 and team3, we want team2 (which has a smaller index) and that is what we have.

 However, what if we see a team that has the same count as the current best_count but with a smaller team index? But we are traversing in increasing order of the index. So we will always encounter a smaller index first. Therefore, if we update only when we see a strictly greater count, then for the same count we keep the first one we encountered (which has the smallest index so far). That is correct.

 Steps:

   best_count = -1
   best_team_index = -1   (this will be the 0-indexed index of the team, then we output best_team_index+1)

   for i from 0 to N-1:
        count = 0
        for j from 0 to M-1:
            read S_ij (if we haven't read the team data? Actually we read the entire line at once)

        Actually, we can read the next line and then process.

   Alternatively, we can:

        Read the next line of M integers for team i.
        Then for j from 0 to M-1:
            if S_ij == T[j] then count++

        if count > best_count:
            best_count = count
            best_team_index = i

        // if equal, we do nothing because we want the first team (with the smallest index) that achieved the highest count.

   Then output best_team_index+1.

 But note: what if two teams have the same best_count and the one we see first is not the one with the smallest index? Actually, we are iterating from i=0 to N-1, so the first team that achieves a given best_count has the smallest index we have seen so far. Then if we later see a team with the same best_count, we don't update so we keep the first one. That is correct.

 However, consider: 
   We start with best_count = -1. 
   Team0: count=0 -> 0 > -1 -> update: best_count=0, best_team_index=0 (team1).
   Team1: count=1 -> 1>0 -> update: best_count=1, best_team_index=1 (team2).
   Team2: count=1 -> not update -> best_team_index remains 1 (so we output 2).

 But what if team2 had count=1 and then team1? Actually, we are iterating in order: team0, team1, team2.

 However, note: the input order is fixed: the first team line is team1, then team2, then team3? Actually, the problem says: the next N lines, each for the i-th team. So the first line after T is team1, then team2, etc.

 In our code, we are reading:

   i=0 -> team1
   i=1 -> team2
   i=2 -> team3

 So we are going in increasing index.

 Example: second sample input:

   "3 2"
   "10 20"
   "0 20"   -> team1: [0,20]: for problem0: 0 != 10 -> not solved; problem1: 20==20 -> solved -> count=1.
   "10 0"   -> team2: [10,0]: problem0: 10==10 -> solved; problem1:0 !=20 -> not solved -> count=1.
   "9 19"   -> team3: [9,19]: problem0:9!=10; problem1:19!=20 -> count=0.

   Now processing:

      i=0: count=1 -> update: best_count=1, best_team_index=0 -> which would be team1? Then output 0+1=1 -> correct.

   Why? Because we found team1 (the first team) with count=1, then when we see team2 also has count=1 we don't update -> so we keep team1.

 Therefore, we are good.

 Implementation:

   Steps:

      Read N, M.
      Read the array T of M integers.

      Initialize:
          best_count = -1
          best_team_index = -1

      For i from 0 to N-1:
          Read an array S of M integers (for the current team i).
          count = 0
          for j from 0 to M-1:
              if S[j] == T[j] then count++

          if count > best_count:
              best_count = count
              best_team_index = i

      Print best_team_index + 1.

 Let's test with the third sample:

      "1 1"
      "1"
      "0"

      N=1, M=1
      T = [1]
      Then read the only team: [0] -> count = (0==1? no) -> 0.
      Then we update: 0 > -1 -> best_count=0, best_team_index=0 -> output 0+1=1.

 It matches.

 Code: