To solve this problem, we need to count the number of valid sacred arrangements of scarecrows on a grid such that each row has at least one scarecrow and every two consecutive columns have at least one scarecrow. The solution involves using dynamic programming combined with the inclusion-exclusion principle to efficiently handle the constraints.

### Approach
1. **Problem Analysis**:
   - The grid is of size \( R \times C \) with \( R \) rows (up to 14) and \( C \) columns (up to 1000).
   - Each cell is either '.' (empty) or 'v' (rice-planted). Scarecrows can only be placed on empty cells.
   - The sacred arrangement requires:
     - Each row must have at least one scarecrow.
     - Every two consecutive columns must have at least one scarecrow in either column.

2. **Key Insights**:
   - **Inclusion-Exclusion Principle**: To ensure each row has at least one scarecrow, we use inclusion-exclusion over subsets of rows. For each subset \( T \) of rows, we count arrangements that avoid placing scarecrows in any row in \( T \), then combine these counts with appropriate signs.
   - **Dynamic Programming (DP)**: For each subset \( T \), we use DP to count valid arrangements satisfying the consecutive column constraint. The DP state tracks whether the current column has at least one scarecrow, ensuring that no two consecutive columns are without a scarecrow.

3. **Algorithm**:
   - **Precomputation**:
     - **Base Masks**: For each column, compute a bitmask indicating available (empty) rows.
     - **Power of Two Table**: Precompute \( 2^k \mod 10^9+7 \) for quick access.
     - **Popcount Table**: Precompute the number of set bits for all numbers up to \( 2^R \).
   - **Inclusion-Exclusion**:
     - For each subset \( T \) of rows, compute the number of valid arrangements \( F(T) \) avoiding rows in \( T \):
       - **Non-Empty Placements**: For each column, calculate the number of ways to place at least one scarecrow in available rows not in \( T \).
       - **DP for Column Constraints**: Use DP to count valid arrangements where no two consecutive columns are without a scarecrow.
   - **Combine Results**: Sum \( F(T) \) over all subsets \( T \) with signs based on subset size parity to get the final count.

4. **Complexity**:
   - **Time Complexity**: \( O(2^R \times R \times C) \), feasible since \( R \leq 14 \) and \( C \leq 1000 \).
   - **Space Complexity**: \( O(2^R + C) \), for storing precomputed tables and DP states.

### Solution Code
```python
MOD = 1000000007

import sys

def main():
    data = sys.stdin.read().splitlines()
    if not data: 
        return
    R, C = map(int, data[0].split())
    grid = []
    for i in range(1, 1+R):
        grid.append(data[i].strip())
    
    nT = 1 << R
    base = [0] * C
    for j in range(C):
        mask = 0
        for i in range(R):
            if grid[i][j] == '.':
                mask |= (1 << i)
        base[j] = mask
        
    max_a = R
    power2 = [1] * (max_a + 1)
    for i in range(1, max_a + 1):
        power2[i] = (power2[i-1] * 2) % MOD
        
    popcount_arr = [0] * nT
    for x in range(nT):
        popcount_arr[x] = bin(x).count('1')
        
    F_values = [0] * nT
    
    for T in range(nT):
        non_empty_arr = [0] * C
        for j in range(C):
            avail_mask = base[j] & (~T)
            a_j = popcount_arr[avail_mask]
            if a_j == 0:
                non_empty_arr[j] = 0
            else:
                non_empty_arr[j] = (power2[a_j] - 1) % MOD
                
        if C == 0:
            F_values[T] = 0
        else:
            dp0 = 1
            dp1 = non_empty_arr[0]
            for j in range(1, C):
                new_dp0 = dp1
                new_dp1 = (dp0 + dp1) % MOD
                new_dp1 = (new_dp1 * non_empty_arr[j]) % MOD
                dp0, dp1 = new_dp0, new_dp1
            F_values[T] = (dp0 + dp1) % MOD

    total = 0
    for T in range(nT):
        bits = popcount_arr[T]
        if bits % 2 == 0:
            total = (total + F_values[T]) % MOD
        else:
            total = (total - F_values[T]) % MOD
            
    total %= MOD
    if total < 0:
        total += MOD
    print(total)

if __name__ == '__main__':
    main()
```

### Explanation
1. **Reading Input**: The grid dimensions and data are read from standard input.
2. **Precomputation**:
   - **Base Masks**: For each column, a bitmask is created where each bit represents whether the corresponding row is empty ('.').
   - **Power of Two Table**: Precomputes powers of two modulo \( 10^9+7 \) for efficient calculation of non-empty placements.
   - **Popcount Table**: Precomputes the number of set bits for all numbers up to \( 2^R \) to quickly count available rows in masked operations.
3. **Inclusion-Exclusion**:
   - For each subset \( T \) of rows, compute the number of valid arrangements \( F(T) \):
     - **Non-Empty Placements**: For each column, calculate the number of ways to place at least one scarecrow in rows not in \( T \).
     - **DP for Column Constraints**: Using DP, track states where each column either has no scarecrow (requiring the previous column to have one) or has at least one scarecrow.
4. **Combining Results**: Sum \( F(T) \) over all subsets \( T \) with signs based on subset size parity (inclusion-exclusion principle) to get the final count of valid sacred arrangements.
5. **Output**: The result is printed modulo \( 10^9+7 \), adjusted to be non-negative. 

This approach efficiently handles the constraints by leveraging bitmask operations and dynamic programming, ensuring optimal performance for large grids.