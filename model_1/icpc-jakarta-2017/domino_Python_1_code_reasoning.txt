 We are given: first line has N and M, then N lines of (u_i, v_i, w_i)
 Steps:
 1. Sort the edges by w_i (since w_i is unique and in the range [1, N] and we have N edges, we can sort by w_i to process from smallest to largest).
 2. We maintain a dictionary (or defaultdict) for the available slots for a node value (A value). The available slots for a node value is the total number of children that can be attached to any node with that value.
 3. We traverse the sorted edges:
    - For an edge (u, v, w):
        If there is at least one available slot for a node with value u (i.e., slots[u] > 0), then we use one slot from u and then:
            - Decrement the slot for u by one.
            - The child node (with value v) will be added. This node can have up to M children, so we add M to the available slots for v.
        Else (if there's no available slot for u), then we have to start a new tree at this edge. This means:
            - We increment the tree count by one.
            - The node with value u becomes a root in a new tree. Note: as a root, this node can have up to M children. But we are using one child for this edge, so we set the available slots for u to (M - 1) [we start with M slots for a root, then we use one for this edge, so remaining M-1].
            - Also, the child node with value v will be added and we add M to the available slots for v.

 4. However, note: a node value might appear multiple times? Yes. We are aggregating by the node value. But note: multiple nodes can have the same A value? Actually, the problem does not require distinct node values. We are storing available slots per distinct A value.

 Important: The algorithm processes the edges in increasing order of w_i, which ensures that when we attach an edge to a node, the parent's incoming edge (if any) must have a lower weight (since we haven't processed larger ones) and the child's edges (if any) will be processed later (with higher weights). This satisfies requirement 5.

 Implementation details:
   - We use a defaultdict for slots so that when a key is not present, it returns 0.
   - We start with no slots for any node.

 Let's test with the first sample: 
   Input: 
        5 2
        2 4 3
        4 4 5
        4 7 1
        7 2 4
        4 8 2

   Sort by w_i: 
        (4,7,1) -> w=1
        (4,8,2) -> w=2
        (2,4,3) -> w=3
        (7,2,4) -> w=4
        (4,4,5) -> w=5

   Process:
        w=1: u=4, v=7 -> no slot for 4? Initially, slots[4] is 0 -> so we create a tree (trees=1). Then:
            slots[4] = M-1 = 1 (because we use one slot for this edge, so remaining 1)
            slots[7] = M = 2

        w=2: u=4, v=8 -> slots[4]=1>0 -> use one slot: 
            slots[4] becomes 0
            slots[8] becomes 0 + 2 = 2

        w=3: u=2, v=4 -> slots[2] is 0? -> so create a new tree (trees=2). Then:
            slots[2] = M-1 = 1
            slots[4] = current slots[4] (which is 0) + M = 2? 
                But note: the previous node with value 4 already had two edges? Actually, we are storing by node value. Now we are adding a node with value 4 as a child? But wait: the node with value 4 already exists? 

        However, note: the problem does not say that distinct A values are distinct nodes. Actually, the forest may contain multiple nodes with the same A value. 

        Important: The dictionary `slots` aggregates the available child slots for all nodes that have that A value. So when we add a new node (with A value = x), we add M to slots[x]. 

        For w=3: 
            We start a new tree: so we set for u=2: we are going to have a root node (A=2) that we are using one slot (for the edge to v=4), so we set slots[2] = M-1 = 1.
            Then the child node (A=4) adds M=2 to slots[4]. But note: there was already a node with A=4? Yes, so we add to the existing slots? 
            Currently, slots[4] is 0 (from the previous step). Then we add 2 -> becomes 2.

        Then w=4: u=7, v=2 -> slots[7] is 2 (from w=1) -> so we use one slot from 7: 
            slots[7] becomes 1
            slots[2] = current slots[2] (which is 1) + M (2) = 3.

        Then w=5: u=4, v=4 -> slots[4] is 2 (from w=3) -> use one slot: 
            slots[4] becomes 1
            slots[4] then gets M=2 added? Actually, we do: 
                We decrement u=4 by 1: from 2 to 1.
                Then we add M=2 to v=4: so slots[4] becomes 1+2 = 3.

        Total trees = 2.

  Second sample: M=1, same edges.

        w=1: u=4 -> no slot -> trees=1. Then:
            slots[4] = M-1 = 0
            slots[7] = M = 1

        w=2: u=4 -> slots[4] is 0 -> so trees=2.
            slots[4] = M-1 = 0
            slots[8] = M = 1

        w=3: u=2 -> no slot -> trees=3.
            slots[2] = 0
            slots[4] = 1 (because M=1)

        w=4: u=7 -> slots[7]=1 -> use it: 
            slots[7] becomes 0
            slots[2] = 0 + 1 = 1

        w=5: u=4 -> slots[4]=1 -> use it:
            slots[4] becomes 0
            slots[4] = 0 + 1 = 1

        So trees=3.

  Third sample: 
        Input: 
          5 10
          1000 3000 3
          2000 4000 5
          1000 2000 1
          3000 2000 4
          2000 3000 2

        Sort by w_i: 
          (1000,2000,1) -> w=1
          (2000,3000,2) -> w=2
          (1000,3000,3) -> w=3
          (3000,2000,4) -> w=4
          (2000,4000,5) -> w=5

        w=1: u=1000 -> no slot? -> trees=1
            slots[1000] = 10-1 = 9
            slots[2000] = 10

        w=2: u=2000 -> slots[2000]=10 -> use one: 
            slots[2000] = 9
            slots[3000] = 10

        w=3: u=1000 -> slots[1000]=9 -> use one: 
            slots[1000] = 8
            slots[3000] = 10 + 10 = 20? But wait, we are adding a new node with value 3000? But there's already a node with value 3000? 
            Actually, we are going to have two distinct nodes with value 3000? 

            How the forest looks?
            Tree1: 
                root: 1000 (with two children: 2000 and 3000? but note: the edge from 1000 to 3000 is w=3, which is after the edge to 2000? and then 2000 has a child 3000 (w=2) -> but that would be two nodes with value 3000? 

            However, the problem does not require distinct node values. So multiple nodes can have the same A value.

            Therefore, we aggregate slots per A value: so when we create a node with A=3000, we add M=10 to slots[3000]. So for w=3, we add 10 to the existing 10 (from w=2) -> becomes 20.

        w=4: u=3000 -> slots[3000]=20 -> use one: 
            slots[3000] = 19
            slots[2000] = 9 + 10 = 19

        w=5: u=2000 -> slots[2000]=19 -> use one: 
            slots[2000] = 18
            slots[4000] = 10

        Total trees=1.

  Therefore, the code:

  Note: We are using defaultdict(int) for slots.

  However, the node values (u and v) can be as large as 2e9, so we use a dictionary that only stores the necessary keys.

  Code:

      data = sys.stdin.read().split()
      n = int(data[0]); m_val = int(data[1])
      edges = []
      index = 2
      for i in range(n):
          u = int(data[index]); v = int(data[index+1]); w = int(data[index+2])
          index += 3
          edges.append((u, v, w))

      edges.sort(key=lambda x: x[2])

      trees = 0
      slots = defaultdict(int)   # default value 0 for any key

      for u, v, w in edges:
          if slots[u] > 0:
              slots[u] -= 1
              slots[v] += m_val
          else:
              trees += 1
              # For the root: we are using one child slot for this edge, so the root node (with value u) has remaining slots: m_val - 1
              slots[u] += m_val - 1
              slots[v] += m_val

      print(trees)

  This should be correct.

  However, note: what if a node value never appears as a parent? Then we never use it? That's okay because we only update when we see the node as a parent.

  Also, when a node appears multiple times as a child, we add M each time we create a node with that value.

  But note: the same node value might appear as a parent in multiple edges? Then we are aggregating the available slots for that value.

  This matches the requirement: we are allowed to have multiple nodes with the same A value? The problem does not say they must be distinct. So when we have an edge (u, v, w), we are creating a node with value u (if it doesn't exist as a root) and then a node with value v. But if we later have an edge with the same u as a parent, we use one slot from the aggregated slots for u.

  Therefore, the solution is as above.

  Let's run the provided examples.

  First sample: 
      edges sorted: 
          (4,7,1): trees=1 -> slots[4]=1, slots[7]=2
          (4,8,2): use slot from 4 -> slots[4]=0, slots[8]=2
          (2,4,3): trees=2 -> slots[2]=1, slots[4]=0+2=2
          (7,2,4): use slot from 7 -> slots[7]=1, slots[2]=1+2=3
          (4,4,5): use slot from 4 -> slots[4]=1, then add 2 for v=4 -> slots[4]=3

      Output: 2 -> correct.

  Second sample: M=1
      (4,7,1): trees=1 -> slots[4]=0, slots[7]=1
      (4,8,2): no slot for 4 -> trees=2 -> slots[4]=0, slots[8]=1
      (2,4,3): trees=3 -> slots[2]=0, slots[4]=1
      (7,2,4): use slot from 7 -> slots[7]=0, slots[2]=0+1=1
      (4,4,5): use slot from 4 -> slots[4]=0, then add 1 for v=4 -> slots[4]=1

      Output: 3 -> correct.

  Third sample: 
      edges sorted by weight: 
          (1000,2000,1): trees=1 -> slots[1000]=9, slots[2000]=10
          (2000,3000,2): use slot from 2000 -> slots[2000]=9, slots[3000]=10
          (1000,3000,3): use slot from 1000 -> slots[1000]=8, slots[3000]=10+10=20
          (3000,2000,4): use slot from 3000 -> slots[3000]=19, slots[2000]=9+10=19
          (2000,4000,5): use slot from 2000 -> slots[2000]=18, slots[4000]=10

      Output: 1 -> correct.

  So we write the code accordingly.

  Note: We are using sys.stdin.read() for speed since N can be up to 100,000.