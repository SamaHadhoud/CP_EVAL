 We are going to output the bitwise complement of the input string.
 Since the problem requires a binary string T of the same length as S such that edit(S, T) > |S|/2,
 and the complement has every bit flipped, the edit distance (if we only use substitutions) is |S|, which is > |S|/2 for any |S|>=1.

 Steps:
 1. Read the input string S.
 2. Create a new string T by flipping each character: 
        if character is '0', then output '1'
        if character is '1', then output '0'
 3. Print T.

 Example: 
   Input "0011" becomes "1100", which is the sample.

 However, note the sample input #2: 
   Input: "1100101"
   Expected Output: "0011010" (which is the complement)

 So we are matching the sample outputs.

 Why is the edit distance of S and its complement T at least |S|?
   Actually, we can achieve the transformation by substituting every character, so the edit distance is at most |S|.
   And since every character is different, we must change every character (if we consider that insertions and deletions are also allowed, 
   but note that we require |T| = |S|, so we cannot change the length. In fact, the minimum edit distance when the two strings have the same length and differ in k positions is at least k, but can be more? 
   However, note that we can do k substitutions to fix all the differences, so the edit distance is exactly k? But wait: sometimes we can do operations that fix multiple differences? 

 Actually, the edit distance for two strings of same length is bounded below by the Hamming distance, and above by the Hamming distance? 
 Not exactly: consider "01" and "10": 
   Hamming distance is 2, but edit distance can be 2 (by two substitutions) OR can we do less? 
   Actually, we can do: 
        "01" -> "0" (delete last) -> "10" (insert '1' at front? but then we get "10", but we have to then insert the last? 
        Alternatively: 
        "01" -> (insert '1' at front) becomes "101", then delete the last '1'? -> "10", which is 2 operations.

 However, the problem states that the edit distance of "0011" and "1100" is 4. Actually, that example used 4 operations: 
        0011 -> 011 (delete first 0) -> 11 (delete first 0) -> 110 (insert 0 at end) -> 1100 (insert 0 at end) -> 4 operations? 
        But wait, why not just substitute all? That would be 4 substitutions.

 Actually, the edit distance (Levenshtein) is the minimum number of operations. For two strings of same length and with all characters different, 
 we can do |S| substitutions and that's |S| operations. Alternatively, we can do a mix? But note: 
        We cannot reduce the number of operations below the number of mismatches? Actually, the edit distance is at least the Hamming distance? 
        No: consider "0000" and "1111": 
            We can do: 
                Operation 1: substitute first char -> 1000
                Operation 2: substitute second char -> 1100
                Operation 3: substitute third char -> 1110
                Operation 4: substitute fourth char -> 1111 -> 4 operations.

        But can we do less? 
            We cannot because every character must be changed.

 Therefore, the edit distance for the complement is exactly |S|, which is always greater than |S|/2 (since |S|>=1).

 However, note: the problem says "more than half the length", and |S| > |S|/2 for |S|>=1? Actually, if |S| is even, |S|/2 is an integer and we require strictly greater. 
        |S| > |S|/2  => |S| - |S|/2 = |S|/2 > 0, which is true for |S|>=1.

 Therefore, the complement always works.

 But note: the sample input #2: 
        S = "1100101"
        Complement T = "0011010"

        The problem states that the edit distance of "1100101" and "1110100" is 2, but that's a different T. For our T, the edit distance is 7? 
        But wait: 
            How many mismatches? All 7 positions are mismatched? So the Hamming distance is 7. 
            Then the edit distance is at least 7? Actually, the edit distance cannot be more than 7 (because 7 substitutions suffice) and at least 7? 
            Why at least 7? Because each substitution fixes only one mismatch? Actually, an insertion or deletion might fix multiple mismatches? 

        However, note that if we use an insertion and deletion, we change the length. But we require that the two strings have the same length at the end? 
        Actually, the edit operations are defined to transform S into T. We can do:

            Operation 1: substitute first char: '1'->'0' -> "0100101" 
            Operation 2: substitute second char: '1'->'0' -> "0000101"
            ... until 7 substitutions.

        Alternatively, we might try to use a deletion and then an insertion? But that would fix two adjacent mismatches? 
        Example: 
            Suppose we have "01" and we want "10". 
            We can delete the '0' -> "1", then insert a '0' at the beginning? -> "01" -> that doesn't help? 
            Actually: 
                Step1: delete first char: "01" becomes "1"
                Step2: insert '1' at the beginning? -> "11", then we have to change the last char? 
                Alternatively: 
                Step1: insert '1' at beginning: "01" becomes "101", then delete last char? -> "10": two operations.

            So for two mismatches, we can fix in two operations? 

        Therefore, the edit distance might be less than the Hamming distance? 

        Actually, the edit distance for two strings of the same length is known to be at least the Hamming distance? 
        But wait: no, because we can do operations that fix multiple mismatches? 

        However, note that each operation can only change one character (substitution) or change the length (insertion or deletion). 
        When the strings have the same length, we cannot change the length? Actually we can temporarily, but then we have to fix the length.

        But the known fact: the edit distance is at least the absolute difference in lengths, plus the Hamming distance between the two strings after alignment? 
        Actually, it's more complicated.

        However, in the example of two bits: 
            S = "01", T = "10": 
                Hamming distance = 2.
                Edit distance = 2? (because we can do two substitutions: 2 operations; or we can do: delete the '0' (cost=1) then insert '1' at the front? but then we have "1" and then insert '0' at the end? -> but that would be "10", so: 
                    "01" -> delete first -> "1" -> insert '0' at the end? -> "10": two operations? 
                So edit distance is 2.

        Now consider a string of 3: 
            S = "000", T = "111": 
                Hamming distance = 3.
                Can we do less than 3? 
                Let's try: 
                    We can do: 
                        Operation 1: substitute the middle: "010"
                        Operation 2: substitute the first: "110"
                        Operation 3: substitute the last: "111" -> 3 operations.

                Alternatively, can we do 2 operations? 
                    Operation1: delete the first '0' -> "00", then we have to get to "111" which has length 3 -> we have to insert one. 
                    Operation2: insert at beginning: "100", then we have to change the last two? 
                    Operation3: change the next: "110", then operation4: change the last: "111" -> 4 operations.

                Or: 
                    Operation1: insert '1' at the beginning: "1000" -> now we have 4 characters, then delete the last two? -> "10", then we have to insert one more? -> not leading to 3.

                Actually, the minimum is 3.

        Therefore, for the entire complement, the edit distance is exactly the length of the string? 

        Actually, a known result: the edit distance between two strings of the same length is at least the Hamming distance, and at most 2* the Hamming distance? 
        But note: we can always substitute each mismatched character, so the edit distance is at most the Hamming distance. However, wait: 
            Actually, substitution is one operation per mismatch. So the edit distance is at most the Hamming distance. 
            But can it be less? 

            Consider: 
                S = "ABCD", T = "BCDA". 
                Hamming distance: every character is mismatched? Actually, if we compare by index: 
                    A vs B -> mismatch
                    B vs C -> mismatch
                    C vs D -> mismatch
                    D vs A -> mismatch -> Hamming distance=4.

                But the edit distance: 
                    We can do: 
                        Operation1: delete A at front -> BCD
                        Operation2: insert A at the end -> BCDA -> two operations.

                So the edit distance can be less than the Hamming distance.

        Therefore, for our complement, the edit distance might be less than |S|? 

        But note: the complement string T has every bit flipped. How can we do better than |S| substitutions? 
        We can only use insertions and deletions to shift the entire string? 

        However, let's try with a small example: 
            S = "00", T = "11": 
                Hamming distance=2.
                How to transform? 
                    We can do two substitutions: 00 -> 10 -> 11 (two operations).
                    Alternatively: 
                        00 -> delete one '0' -> "0", then insert two? but then we have to get to "11": 
                        Then insert '1' at the front: "10", then insert '1' at the end? -> "101", then delete the last? -> not efficient.

                Actually, we can do:
                    00 -> insert '1' at the beginning: "100" -> then delete the last two? -> we get "1", then insert one more? -> not good.

                Or: 
                    00 -> substitute the first: 10 -> substitute the second: 11 -> two operations.

            So we cannot do less than 2.

        Now try with 3: 
            S = "000", T = "111"
            How can we do in 2 operations? 
                Operation1: delete the first '0' -> "00"
                Operation2: ... we need to get to "111", which has 3 characters -> we have to insert one. 
                Then Operation3: substitute one of the zeros? -> but we have "00" and we insert a '1' at the beginning: "100", then we have two zeros to change? 
                That would be 3 operations.

            Alternatively: 
                Operation1: delete the first zero -> "00"
                Operation2: delete the second zero -> "0"
                Operation3: insert '1' -> "10", then Operation4: insert '1' -> "110", then Operation5: insert '1'? -> not.

            How about:
                Operation1: insert '1' at beginning: "1000"
                Operation2: delete the last two zeros: "10" -> then we need to insert one more '1' -> Operation3: insert at the end: "101" -> then we have to change the middle? -> no.

            It seems 3 is the minimum.

        Actually, it is known that the edit distance for two strings that are completely different (in every position) of length n is n? 
        Why? Because each operation (insertion, deletion, substitution) can change at most one character? 

        But wait: 
            Actually, an insertion and deletion can shift the entire alignment? 

        However, consider the following: 
            We have S and T of the same length, and they differ in every position. 
            How can an insertion and deletion fix two mismatches? 

            Example: 
                S = "01", T = "10"

                We can do: 
                    Operation1: delete the first character (which is '0') -> now we have "1", which is one character.
                    Operation2: insert '0' at the end -> we get "10". 

                So two operations? 

            Therefore, the edit distance for "01" and "10" is 2? But the length is 2, so 2 operations.

            How about if we use substitution? 
                Two operations: substitute first to '1' -> "11", then substitute the second to '0' -> "10" -> two operations.

            So 2 operations.

        Now consider S="000", T="111": 
            We want to do in 2 operations? 
            How? 
                Operation1: delete the first '0' -> "00"
                Operation2: insert '1' at the end -> "001" -> not "111"

            Operation1: delete the first '0' -> "00"
            Operation2: delete the first '0' -> "0"
            Operation3: insert '1' at the front -> "10"
            Operation4: insert '1' at the end -> "101" -> not.

            Operation1: substitute the first '0' to '1' -> "100"
            Operation2: substitute the last '0' to '1' -> "101" -> not.

            Operation1: substitute the first '0' to '1' -> "100"
            Operation2: substitute the second '0' to '1' -> "110"
            Operation3: substitute the third '0' to '1' -> "111" -> 3 operations.

            Alternatively, using insert/delete: 
                Operation1: insert '1' at the beginning: "1000"
                Operation2: delete the last two '0's: "10" -> then we have to get to "111", so we need to add one more character? 
                Operation3: insert '1' at the end: "101" -> not.

            Operation1: insert '1' at the beginning: "1000"
                Now we have "1000", which we want to become "111". How?
                Operation2: delete the last two: "10" -> then we need to change the middle? 

            Actually, we can try:
                Operation1: insert '1' at the beginning: "1000"
                Operation2: delete the last '0': "100" -> not "111".

            Operation1: insert '1' at the beginning: "1000"
            Operation2: substitute the second char '0' to '1': "1100"
            Operation3: delete the last two: "11" -> then we have to insert one? 
            Operation4: insert '1' -> "111" -> 4 operations.

            It seems 3 is the minimum.

        Why the difference? In the two-character case, we were able to use a deletion and an insertion to shift the entire string? 
        Actually, the two-character case: 
            S = "01", T = "10": 
                We can think: 
                    Operation1: delete the first character -> leaves "1"
                    Operation2: insert '0' at the end -> "10" -> matches T.

                But note: the edit distance algorithm does not require the operations to be adjacent? 

        However, for three characters: 
            S = "000", T = "111": 
                How about: 
                    Operation1: delete the first '0' -> "00"
                    Operation2: insert '1' at the end -> "001"
                    Now we have "001", which is not "111".

                How about: 
                    Operation1: delete the first '0' -> "00"
                    Operation2: delete the first '0' -> "0"
                    Operation3: insert '1' at the beginning -> "10"
                    Operation4: insert '1' at the end -> "101" -> no.

                Alternatively: 
                    Operation1: insert '1' at the beginning: "1000"
                    Operation2: delete the last two '0's: "10" -> then we have two characters? 
                    Then we need to change the '0' to '1': Operation3: substitute the '0' to '1' -> "11", then we have to add one more? -> Operation4: insert '1' -> "111" -> 4 operations.

        Actually, the known solution for three is 3.

        So what's the pattern? 

        There is a known formula: the edit distance is n + m - 2 * L, where L is the length of the longest common subsequence? 
        But note: 
            For S="000", T="111", the longest common subsequence is 0? 
            Then edit distance = 3+3 - 0 = 6? -> that's not right.

        Actually, the formula: 
            edit_distance = |S| + |T| - 2 * |LCS(S, T)|? 
            But that is for the longest common subsequence? Actually, no: the edit distance when insertions and deletions are allowed (and substitutions) is more complex.

        Actually, the standard dynamic programming for edit distance: 
            dp[i][j] = minimum operations to change S[0:i] to T[0:j]
            dp[i][j] = 
                if i==0: j
                if j==0: i
                else:
                    if S[i-1]==T[j-1]: dp[i-1][j-1]
                    else: 1 + min( dp[i-1][j], dp[i][j-1], dp[i-1][j-1] )

        For S="000", T="111":
            dp[1][1]: S[0]='0', T[0]='1' -> not equal: min( dp[0][1]=1, dp[1][0]=1, dp[0][0]=0 ) + 1 -> 1
            dp[1][2]: min( dp[0][2]=2, dp[1][1]=1, dp[0][1]=1 ) + 1 -> 2
            dp[1][3]: 3

            dp[2][1]: min( dp[1][1]=1, dp[2][0]=2, dp[1][0]=1 ) + 1 -> 2
            dp[2][2]: min( dp[1][2]=2, dp[2][1]=2, dp[1][1]=1 ) + 1 -> 2? 
            Actually: 
                dp[2][2] = min( dp[1][2]=2, dp[2][1]=2, dp[1][1]=1 ) + 1 = 2? 
                But if we do: 
                    S[0:2] = "00", T[0:2]="11": 
                    We can do: 
                        00 -> 10 (substitute first) -> 11 (substitute second): 2 operations -> so 2 is correct.

            dp[2][3]: min( dp[1][3]=3, dp[2][2]=2, dp[1][2]=2 ) + 1 = 3? 
            Actually: 
                "00" to "111": 
                    We can do: 
                        00 -> 0 (delete one) -> then insert two ones? -> 3 operations? 
                        Or: 00 -> 10 (substitute) -> 11 (substitute) -> then insert a '1'? -> 3 operations? 
                        But wait, we have to get "111" from "00": 
                            Operation1: insert '1' at beginning -> "100"
                            Operation2: substitute the first '0' to '1' -> "110" -> then Operation3: substitute the last to '1' -> "111": 3 operations.

            dp[3][1]: min( dp[2][1]=2, dp[3][0]=3, dp[2][0]=2 ) + 1 -> 3
            dp[3][2]: min( dp[2][2]=2, dp[3][1]=3, dp[2][1]=2 ) + 1 -> 3
            dp[3][3]: min( dp[2][3]=3, dp[3][2]=3, dp[2][2]=2 ) + 1 -> 3

            Therefore, the edit distance is 3.

        So the edit distance for the complement of a string of length n is at least the Hamming distance? 
        Actually, no: the edit distance can be less? 

        But note: in the two-character case: 
            S = "01", T = "10": 
                Hamming distance = 2, edit distance = 2.

        In the three-character case: 
            Hamming distance = 3, edit distance = 3.

        Actually, for the complement, the edit distance is always n? 
        Why? Because the longest common subsequence (LCS) of S and T (the complement) is 0? 
            Actually, no: for two different bits, there is no common subsequence? 
            But wait: 
                Consider S="00", T="11": 
                    The LCS is 0? 
                Then the formula: edit_distance = |S| + |T| - 2 * |LCS| = 2+2 - 0 = 4? 
                But we know the edit distance is 2.

        The formula for edit distance is not that. 

        Actually, the edit distance can be computed by the standard DP and for the complement we can observe:

            The edit distance between S and its complement T is n? 
            Why? Because the minimum number of operations is n? 

        But wait, we saw that for n=2, it's 2, and for n=3, it's 3? 

        However, the problem states that for "0011" and "1100", the edit distance is 4. 
            S = "0011", T = "1100": 
                We can do: 
                    Operation1: substitute first '0' to '1' -> "1011"
                    Operation2: substitute second '0' to '1' -> "1111"
                    Operation3: substitute third '1' to '0' -> "1110"
                    Operation4: substitute last '1' to '0' -> "1100" -> 4 operations.

                Alternatively, we can do: 
                    Operation1: delete first '0' -> "011"
                    Operation2: delete first '0' -> "11"
                    Operation3: insert '0' at the end -> "110"
                    Operation4: insert '0' at the end -> "1100" -> 4 operations.

                But is there a way in less than 4? 
                How about: 
                    Operation1: substitute first two: "11" -> then we have "11" and then we have to change the last two? -> 4 operations.

                Actually, using the DP: 
                    dp[4][4] = 
                    dp[0][0]=0
                    dp[1][1]: S[0]='0', T[0]='1' -> 1
                    dp[1][2]: 
                        S[0]='0', T[0:2]="11" -> 
                        min( dp[0][2]=2, dp[1][1]=1, dp[0][1]=1 ) + 1? 
                        Actually: 
                            We can do: 
                                Option1: delete the '0' from S -> then we have "" and we need to build "11" -> two insertions -> 3 operations? 
                                Option2: insert a '1' at the beginning: then we have "10", then we have to change the '0' to '1'? -> 2 operations? 
                                But wait: 
                                    We have S[0:1]="0", T[0:2]="11": 
                                    We can do: 
                                        Insert a '1' at beginning: "10" -> now we have "10" and we need to get to "11" (but we are building T[0:2]="11") -> 
                                        Then we need to change the last character? But we don't have a last character? 
                                    Actually, we have to build two characters from one? 
                                    Operation1: insert a '1' at the beginning: now we have "10", then we need to change the last character to '1'? -> Operation2: substitute the '0' to '1' -> "11". 
                                    So 2 operations.

                        Therefore: 
                            dp[1][2] = min( dp[0][2] (which is 2: two insertions), dp[1][1] (which is 1) + 1 (insertion) -> 2, and dp[0][1] (which is 1) + 1 (substitute) -> 2? 
                            But wait, the recurrence: 
                                dp[i][j] = 
                                    if S[i-1] == T[j-1]: then dp[i-1][j-1]
                                    else: 1 + min( dp[i-1][j] (deletion), dp[i][j-1] (insertion), dp[i-1][j-1] (substitute) )

                            For i=1, j=2: 
                                S[0]='0', T[1]='1' (the last character of T[0:2] is the second one) -> they are not equal? 
                                So: 
                                    dp[0][2] = 2, 
                                    dp[1][1] = 1, 
                                    dp[0][1] = 1 -> then min(2, 1+? , 1+1) -> 
                                    Actually: 
                                        deletion: remove the '0' from S -> then we have "" and we need to build "11" -> which is 2 insertions -> cost = 1 (for deletion) + 2 = 3? -> but wait, the state for deletion is dp[i-1][j] = dp[0][2] = 2, then we do a deletion: cost = 1 + 2? -> 3? 
                                        insertion: we insert T[1]='1' at the end of S[0:1]? Then we have "01", but then we have to align with T[0:2]="11"? 
                                            Actually, we are inserting T[1] (the last character of T[0:2])? Then after insertion we have "01", but now we have matched one character? Actually, we match the last character? 
                                            Then we have to change S[0:1]="0" to T[0:1]="1": which is one substitution -> total cost=2.
                                        substitution: we substitute the '0' to T[1] (which is the last character of T[0:2]? but note: we are matching the last character) -> then we get "1", and then we have to build the first character? 
                                            Actually, we are matching the last character of T first? 
                                            Alternatively, we can substitute S[0] to T[0]? 
                                            The recurrence uses the last character.

                            Actually, the recurrence is defined as:
                                insertion: we are matching the last character of T with a new inserted character, so we leave S[0:i] and T[0:j-1] -> cost = 1 + dp[i][j-1]
                                deletion: we delete the last character of S, then match S[0:i-1] with T[0:j] -> cost = 1 + dp[i-1][j]
                                substitution: we substitute S[i-1] to T[j-1], then match S[0:i-1] with T[0:j-1] -> cost = 1 + dp[i-1][j-1]

                            So: 
                                dp[1][2] = 1 + min( dp[0][2]=2, dp[1][1]=1, dp[0][1]=1 ) = 1 + min(2,1,1) = 1+1 = 2.

                    dp[1][2]=2.

                Then dp[4][4] = 4? 

        Therefore, the edit distance for the complement of a string of length n is n? 

        Why? 
            Because the recurrence: 
                dp[i][j] = 1 + min( dp[i-1][j], dp[i][j-1], dp[i-1][j-1] )   (because S[i-1]!=T[j-1] for all i,j)

            And the base case: 
                dp[0][j] = j, dp[i][0] = i.

            Then: 
                dp[1][1] = 1
                dp[1][2] = 1 + min( dp[0][2]=2, dp[1][1]=1, dp[0][1]=1 ) = 1+1 = 2.
                dp[2][1] = 1 + min( dp[1][1]=1, dp[2][0]=2, dp[1][0]=1 ) = 1+1 = 2.
                dp[2][2] = 1 + min( dp[1][2]=2, dp[2][1]=2, dp[1][1]=1 ) = 1+1 = 2? 
                But wait, that would be 2 for two characters? 

            Actually, for two characters: 
                S = "00", T = "11": 
                dp[2][2] = 1 + min( dp[1][2]=2, dp[2][1]=2, dp[1][1]=1 ) = 1+1 = 2 -> correct.

            Now for three: 
                dp[3][3] = 1 + min( dp[2][3], dp[3][2], dp[2][2] )
                We need: 
                    dp[2][3] = 1 + min( dp[1][3]=3, dp[2][2]=2, dp[1][2]=2 ) = 1+2 = 3
                    dp[3][2] = 1 + min( dp[2][2]=2, dp[3][1]=? , dp[2][1]=2 )
                    dp[3][1] = 1 + min( dp[2][1]=2, dp[3][0]=3, dp[2][0]=2 ) = 1+2 = 3
                    so dp[3][2] = 1 + min(2,3,2) = 1+2 = 3
                then dp[3][3] = 1 + min(3,3,2) = 1+2 = 3.

            Therefore, by induction, it seems that for the complement, dp[i][j] = max(i, j) for i,j>0? 
            Actually, no: 
                dp[1][1]=1 -> max(1,1)=1 -> matches.
                dp[1][2]=2 -> max(1,2)=2 -> matches.
                dp[2][2]=2 -> max(2,2)=2 -> matches.
                dp[2][3]=3 -> max(2,3)=3 -> matches.

            Then dp[i][j] = max(i,j)? 
            But what about dp[3][3]=3 -> max(3,3)=3 -> matches.

            Actually, we can prove by induction: 
                Base: 
                    i=0: dp[0][j]=j = max(0,j) -> j
                    j=0: dp[i][0]=i = max(i,0) -> i
                Step: 
                    dp[i][j] = 1 + min( dp[i-1][j], dp[i][j-1], dp[i-1][j-1] )
                    = 1 + min( max(i-1, j), max(i, j-1), max(i-1, j-1) )

                Without loss of generality, assume i<=j: 
                    max(i-1, j) = j
                    max(i, j-1) = 
                        if i<=j-1 -> j-1
                        else if i==j -> j-1? no: then j-1 < j = i, so then max(i, j-1)=i = j? 
                    Actually: 
                        if i<=j: 
                            max(i-1, j) = j
                            max(i, j-1) = 
                                if i <= j-1 -> then j-1
                                if i == j -> then j-1? 
                                Actually: i<=j -> i can be less than or equal to j-1, or equal to j?
                                If i < j: then max(i, j-1) = j-1
                                If i == j: then max(i, j-1)=i = j? because j-1 < j? so max(j, j-1)=j.
                            max(i-1, j-1) = 
                                if i-1 <= j-1 -> which is true -> j-1.

                    Then: 
                        if i < j: 
                            min( j, j-1, j-1 ) = j-1
                            so dp[i][j] = 1 + j-1 = j = max(i,j) (since j>i, so max(i,j)=j).
                        if i == j: 
                            min( j, j, j-1 ) = j-1
                            then dp[i][j] = 1 + (j-1) = j = max(i,j).

                Similarly, if i>=j: 
                    then we get i.

            Therefore, for the complement, the edit distance is max(n, n) = n.

        So the edit distance between S and its complement T is exactly n.

        And since n > n/2 for any n>=1, the complement is a valid solution.

        Therefore, we output the complement.

        However, note: the problem says "more than half the length", and if n is even: n > n/2, and if n is odd: n > n/2 (which is not an integer, but still n is greater than n/2).

        Therefore, we can safely output the complement.

        Let's test the sample input #2: 
            Input: "1100101" -> length=7.
            Complement: 
                '1'->'0', '1'->'0', '0'->'1', '0'->'1', '1'->'0', '0'->'1', '1'->'0' 
                -> "0011010" -> which matches the sample output.

        So we output the complement.

        Code:

            s = input().strip()
            t = ''.join('1' if c=='0' else '0' for c in s)
            print(t)

        Time complexity: O(n), which is acceptable for |S|<=2000.

        This solution is very efficient and meets the constraints.

        We are done.