To solve this problem, we need to find the maximum number of edge-disjoint boomerangs in an undirected graph. A boomerang is defined as a triple \(\langle u, v, w \rangle\) where the edges \((u, v)\) and \((v, w)\) exist in the graph and \(u \neq w\). The boomerangs are disjoint if no edge is shared between any two boomerangs. The goal is to maximize the number of such boomerangs.

### Approach
1. **Graph Representation**: Represent the graph using adjacency sets for each vertex. This allows efficient edge removal and traversal.
2. **Queue Initialization**: Initialize a queue with all vertices that have at least two edges. These vertices are potential centers for boomerangs.
3. **Greedy Processing**: Process each vertex in the queue:
   - If the vertex has fewer than two edges, skip it.
   - Remove two distinct edges from the vertex, say \((v, a)\) and \((v, b)\).
   - Form a boomerang \(\langle a, v, b \rangle\) and add it to the result.
   - Remove these edges from the adjacency sets of both vertices \(a\) and \(b\).
   - Enqueue vertices \(a\), \(b\), and \(v\) if they now have at least two edges and are not already in the queue.
4. **Output**: Print the number of boomerangs followed by each boomerang in the order they were formed.

### Solution Code
```cpp
#include <iostream>
#include <vector>
#include <queue>
#include <unordered_set>
#include <tuple>
using namespace std;

const int N = 100010;
unordered_set<int> g[N];
bool inQ[N];

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);

    int n, m;
    cin >> n >> m;
    for (int i = 0; i < m; i++) {
        int u, v;
        cin >> u >> v;
        g[u].insert(v);
        g[v].insert(u);
    }

    queue<int> q;
    vector<tuple<int, int, int>> ans;

    for (int i = 1; i <= n; i++) {
        if (g[i].size() >= 2) {
            q.push(i);
            inQ[i] = true;
        }
    }

    while (!q.empty()) {
        int v = q.front(); 
        q.pop();
        inQ[v] = false;

        if (g[v].size() < 2) 
            continue;

        int a = *g[v].begin();
        g[v].erase(a);
        g[a].erase(v);

        int b = *g[v].begin();
        g[v].erase(b);
        g[b].erase(v);

        ans.push_back(make_tuple(a, v, b));

        vector<int> candidates = {a, b, v};
        for (int u : candidates) {
            if (g[u].size() >= 2 && !inQ[u]) {
                inQ[u] = true;
                q.push(u);
            }
        }
    }

    cout << ans.size() << "\n";
    for (auto tpl : ans) {
        cout << get<0>(tpl) << " " << get<1>(tpl) << " " << get<2>(tpl) << "\n";
    }
}
```

### Explanation
1. **Graph Representation**: The graph is stored using adjacency sets (`g`), where each vertex points to a set of its neighbors. This allows efficient edge insertion and removal.
2. **Queue Initialization**: Vertices with at least two edges are enqueued for processing, as they can potentially form boomerangs.
3. **Processing Loop**: For each vertex in the queue:
   - Two edges are removed from the vertex. The corresponding edges are also removed from the adjacency sets of the connected vertices.
   - A boomerang is formed using the two edges and added to the result list.
   - The vertices involved (the center and the two neighbors) are checked again. If they now have at least two edges and are not in the queue, they are enqueued for further processing.
4. **Output**: The number of boomerangs is printed first, followed by each boomerang in the order they were formed. Each boomerang is printed as three integers: \(u\), \(v\), \(w\), representing the edges \((u, v)\) and \((v, w)\).

This approach efficiently maximizes the number of edge-disjoint boomerangs by greedily processing vertices with available edges, ensuring optimal use of the graph's edges. The complexity is \(O(M \log N)\) due to set operations, where \(M\) is the number of edges and \(N\) is the number of vertices. The space complexity is \(O(N + M)\) for storing the graph and auxiliary data structures.