To solve this problem, we need to construct the shortest possible string composed of a given set of digits such that when a sliding window of length \( N \) moves over the string, at least \( K \) distinct substrings (each representing a PIN) are encountered. The sliding window moves one character at a time, so each new character added to the string creates a new window (PIN) by combining the last \( N-1 \) characters of the current state with the new character.

### Approach
1. **Special Case Handling for \( N = 1 \)**:
   - If \( N = 1 \), each digit is a PIN. We simply output the first \( K \) distinct available digits.

2. **Initialization for \( N \geq 2 \)**:
   - **Initial State**: Create a string of length \( N-1 \) using the first available digit.
   - **Hashing Setup**: Precompute powers of the base (for rolling hash) modulo two large primes to efficiently manage state transitions and PIN comparisons.

3. **Constructing the String**:
   - **Loop Until \( K \) Distinct PINs**:
     - For each digit in the available digits, compute the hash of the new PIN (current state + digit). If this PIN hasn't been seen, mark it as visited, increment the count, update the state and its hash, and append the digit to the result.
     - If no digit yields a new PIN, append the last available digit (to avoid staying stuck), update the state and hash, and continue. This move doesn't increase the distinct PIN count but transitions to a new state that might have untraversed edges.
   - **Output Result**: The constructed string, starting with the initial state followed by the added digits.

### Solution Code
```python
import sys
from collections import deque

MOD1 = 10**9 + 7
MOD2 = 10**9 + 9
BASE1 = 131
BASE2 = 131

def main():
    data = sys.stdin.read().split()
    if not data:
        return
    
    n = int(data[0])
    m = int(data[1])
    k = int(data[2])
    digits = list(map(int, data[3:3+m]))
    
    if n == 1:
        print(''.join(str(d) for d in digits[:k]))
        return
        
    base_power1 = pow(BASE1, n-2, MOD1) if n >= 2 else 0
    base_power2 = pow(BASE2, n-2, MOD2) if n >= 2 else 0
    
    init_digit = digits[0]
    initial_state = [init_digit] * (n - 1)
    current_state = deque(initial_state)
    
    H1 = 0
    H2 = 0
    for d in initial_state:
        H1 = (H1 * BASE1 + d) % MOD1
        H2 = (H2 * BASE2 + d) % MOD2
        
    s_list = [str(d) for d in initial_state]
    visited_pins = set()
    count = 0
    total_length = n - 1
    
    while count < k and total_length < 100000:
        found = False
        for d in digits:
            pin_hash1 = (H1 * BASE1 + d) % MOD1
            pin_hash2 = (H2 * BASE2 + d) % MOD2
            if (pin_hash1, pin_hash2) in visited_pins:
                continue
            visited_pins.add((pin_hash1, pin_hash2))
            count += 1
            s_list.append(str(d))
            front_digit = current_state.popleft()
            current_state.append(d)
            
            H1 = (H1 - (front_digit * base_power1)) % MOD1
            H1 = (H1 * BASE1 + d) % MOD1
            
            H2 = (H2 - (front_digit * base_power2)) % MOD2
            H2 = (H2 * BASE2 + d) % MOD2
            
            total_length += 1
            found = True
            break
            
        if not found and count < k:
            d = digits[-1]
            s_list.append(str(d))
            front_digit = current_state.popleft()
            current_state.append(d)
            
            H1 = (H1 - (front_digit * base_power1)) % MOD1
            H1 = (H1 * BASE1 + d) % MOD1
            
            H2 = (H2 - (front_digit * base_power2)) % MOD2
            H2 = (H2 * BASE2 + d) % MOD2
            
            total_length += 1
        if count >= k:
            break
            
    print(''.join(s_list))

if __name__ == '__main__':
    main()
```

### Explanation
1. **Initialization**:
   - The input is parsed to extract \( N \), \( M \), \( K \), and the available digits. If \( N = 1 \), the solution outputs the first \( K \) distinct digits directly.
   
2. **State Setup**:
   - For \( N \geq 2 \), the initial state is a string of \( N-1 \) copies of the first available digit. The rolling hash values for this state are computed using two different bases and moduli to minimize collisions.

3. **Building the String**:
   - **New PINs**: For each digit, if adding it forms a new PIN (checked via double hashing), the digit is appended, the state and hashes are updated, and the distinct PIN count increases.
   - **Stuck State**: If no digit forms a new PIN, the last digit is appended to transition to a new state without increasing the distinct count, facilitating future new PIN discoveries.
   
4. **Termination**:
   - The loop exits once \( K \) distinct PINs are found or the string length reaches the problem-imposed limit (100,000 characters), ensuring efficiency and correctness.

5. **Output**:
   - The constructed string, combining the initial state and added digits, is printed, providing the shortest possible string containing at least \( K \) distinct PINs. 

This approach efficiently navigates the state space using rolling hashes to manage transitions and PIN comparisons, ensuring optimal performance even for large inputs.