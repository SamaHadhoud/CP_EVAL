 We are going to read the inputs: first integer N, then N strings.
 Since the last detector is always truthful, we start from the last (which is index N-1) and go backwards to the first.
 However, note: the problem says the i-th detector (for i>=2) reports about the (i-1)-th, and the first reports about the eyewitness.

 But note the sample: 
   Input: 
      4
      LIE
      LIE
      TRUTH
      TRUTH

   Steps:
     Detector 4 (index 3) is truthful. Its report is "TRUTH", meaning the detector 3 (index 2) is truthful.
     Then detector 3 (index 2) is truthful and reports "TRUTH" for detector 2 (index 1) -> so detector 2 is truthful? 
        But wait: the report for detector 2 is "LIE", so if detector 3 is truthful and says detector 2 is truthful, then detector 2 must be truthful? 
        However, the sample says: 
          "The 2nd lie detector reports that the 1st lie detector is LIE. As the 2nd lie detector’s result is correct as it is, then the 1st lie detector’s result is wrong."

 How do we model?

 Let:
   truth[i] = whether the i-th lie detector is truthful (true) or lying (false).

 For i from 0 to N-2:
   The (i+1)-th detector (which is the next one) reports about the i-th detector.

 Specifically, the (i+1)-th detector (at index i+1) says:
   If the string at index i+1 is "TRUTH", then it is reporting that the i-th detector is truthful.
   If it is "LIE", then it is reporting that the i-th detector is lying.

 But note: the (i+1)-th detector might be lying or truthful.

 Therefore:
   If the (i+1)-th detector is truthful, then the report is correct: 
        truth[i] == (s[i+1] == "TRUTH")
   If the (i+1)-th detector is lying, then the report is incorrect:
        truth[i] != (s[i+1] == "TRUTH")

 We can write:
        truth[i] = ( (s[i+1] == "TRUTH") == truth[i+1] )

 But note: the condition is equivalent to:
        truth[i] = (truth[i+1] == (s[i+1] == "TRUTH"))

 However, we can also rearrange:

        Let R_{i+1} = (s[i+1] == "TRUTH")   [which is the report meaning: if true then the previous is truthful, if false then the previous is lying]

        Then: truth[i] = (truth[i+1] == R_{i+1])

 But note: if truth[i+1] is true, then we require truth[i] = R_{i+1].
        if truth[i+1] is false, then we require truth[i] = !R_{i+1].

 Alternatively, we can write: 
        truth[i] = truth[i+1] ? R_{i+1] : !R_{i+1]

 However, the expression `truth[i] = (truth[i+1] == R_{i+1])` is not the same as that.

 Actually, the relation is:
        truth[i] = (truth[i+1] == R_{i+1])   ??? Let's test:

        If truth[i+1] is true and R_{i+1] is true -> then truth[i] = (true==true) = true -> which is the same as the ternary: true ? true -> true.
        If truth[i+1] is true and R_{i+1] is false -> then truth[i] = (true==false) = false -> which is the same as true ? false -> false? but actually the ternary would be: true ? false -> false -> so same.
        If truth[i+1] is false and R_{i+1] is true -> then truth[i] = (false==true) = false -> ternary: false ? true -> !true -> false -> same.
        If truth[i+1] is false and R_{i+1] is false -> then truth[i] = (false==false) = true -> ternary: false ? false -> !false -> true -> same.

 So we can write: 
        truth[i] = (truth[i+1] == (s[i+1] == "TRUTH"))

 But wait: the above expression is the same as:
        truth[i] = (truth[i+1] == R_{i+1])

 However, note the sample:

        We know truth[N-1] = true (last detector).

        For i = N-2 (which is the third detector, index 2 in 0-indexed for the third detector?):
          s[i+1] = s[N-1] -> the last string? Actually, the detectors are stored from index0 to index N-1.

        The report for the (N-2)-th detector is stored at s[N-1]? 
          But note: 
            The (i+1)-th detector (i+1 index) reports about the i-th detector.

        In the sample: 
          N=4, detectors: 
            index0: "LIE"   -> detector1
            index1: "LIE"   -> detector2
            index2: "TRUTH" -> detector3
            index3: "TRUTH" -> detector4

          We start with truth[3] = true (for index3, the last).

          Now, we want truth[2] (the third detector) -> i = 2? Actually, we are going from i = N-2 down to 0.

          For i=2: 
             s[i+1] = s[3] = "TRUTH" -> R = true.
             truth[3] is true -> so truth[2] = (true == true) = true.

          Then for i=1:
             s[i+1] = s[2] = "TRUTH" -> R = true.
             truth[2] is true -> so truth[1] = (true == true) = true.

          Then for i=0:
             s[i+1] = s[1] = "LIE" -> R = false.
             truth[1] is true -> so truth[0] = (true == false) = false.

        Now, we have the truthfulness of the first detector (index0) is false (lying).

        The first detector reports the eyewitness testimony: its report is s[0] = "LIE". 
        But since the first detector is lying, the actual truth of the eyewitness is the opposite: so if the detector says "LIE", then the eyewitness is actually telling the truth -> so output "TRUTH".

        How to compute the eyewitness?

          Let T be the truthfulness of the eyewitness (true for truth, false for lie).

          The first detector reports about T. If the first detector is truthful, then T = (s[0]=="TRUTH"). 
          If the first detector is lying, then T = !(s[0]=="TRUTH").

          So: T = (truth[0] == (s[0]=="TRUTH"))? 
                If truth[0] is true: then T = (s[0]=="TRUTH")
                If truth[0] is false: then T = !(s[0]=="TRUTH") -> which is the same as (false == (s[0]=="TRUTH"))? Actually, no.

          Alternatively: T = (truth[0] ? (s[0]=="TRUTH") : (s[0]!="TRUTH"))

          But we can write: T = (truth[0] == (s[0]=="TRUTH"))? 
                When truth[0] is true: T = (s[0]=="TRUTH") -> correct.
                When truth[0] is false: T = (false == (s[0]=="TRUTH")) -> which is equivalent to (s[0]!="TRUTH") -> correct.

          So: T = (truth[0] == (s[0]=="TRUTH")) -> this is actually the same as the propagation step? 

          Actually, we can note: the propagation step is the same relation: the (i+1)-th detector's report about the i-th detector is the same as the relation between the truthfulness of the i-th detector and the (i+1)-th detector's report.

        Therefore, we can do:

          current_truth = true   // for the last detector
          for i from N-2 down to 0:
              current_truth = (current_truth == (s[i+1] == "TRUTH"))

          Then for the eyewitness:
              T = (current_truth == (s[0] == "TRUTH"))

        But note: in the backward propagation we computed the truthfulness of the first detector and stored it in `current_truth` at the end of the loop.

        Then we use that `current_truth` and the first report s[0] to compute the eyewitness.

        Alternatively, we can also propagate one more step? But note the eyewitness is not a detector. The first detector reports about the eyewitness.

        Actually, the first detector is the one we have just computed (as the truthfulness for the first detector). Then we use that to interpret the report about the eyewitness.

        So we do:

          truth0 = current_truth   (which is the truthfulness of the first detector)
          T = (truth0 == (s[0]=="TRUTH"))   -> but wait, this is the same as: if the first detector is truthful then the eyewitness is what it reported? 

          However, note: the first detector's report s[0] is about the eyewitness. So:

            If the first detector is truthful, then the eyewitness's truthfulness is (s[0]=="TRUTH") -> meaning if s[0] is "TRUTH", then eyewitness is true; if "LIE", then false.

            If the first detector is lying, then the eyewitness's truthfulness is the opposite: so if s[0] is "TRUTH", then eyewitness is lying (false); if "LIE", then eyewitness is true.

          This is exactly: T = (truth0 == (s[0]=="TRUTH"))? 

          Let's test:

            If truth0 is true and s[0]=="TRUTH": T = (true == true) = true -> correct.
            If truth0 is true and s[0]=="LIE": T = (true == false) = false -> correct.
            If truth0 is false and s[0]=="TRUTH": T = (false == true) = false -> but we want true? 
                Actually: lying detector says "TRUTH" -> meaning it claims the eyewitness is truthful -> but since it is lying, the eyewitness is lying -> so false -> but we got false? that matches? 
                But wait: we want the opposite? 

          Actually, let's clarify:

            The eyewitness testimony is true -> T = true.
            The first detector is lying -> so it must report "LIE" (because if the eyewitness is true, a lying detector would say "LIE"). 
            If the first detector reports "TRUTH", then if it is lying, the eyewitness must be false.

          How do we compute T?

            We have: 
                T = (truth0 == (s[0]=="TRUTH")) 
                -> when truth0=false and s[0]=="TRUTH": T = (false == true) = false -> which is what we want: the eyewitness is false.

          Now, if truth0=false and s[0]=="LIE": T = (false == false) = true -> correct: lying detector reports "LIE" (which is false) -> then the eyewitness is true.

          So the formula T = (truth0 == (s[0]=="TRUTH")) works.

        Therefore, the plan:

          Step 1: Read N and the list of strings.

          Step 2: Start with current = true (for the last detector, which is at index N-1).

          Step 3: Loop from i = N-2 down to 0 (i.e., from the second last detector to the first):
                   current = (current == (s[i+1] == "TRUTH"))

          Step 4: Then the eyewitness T = (current == (s[0] == "TRUTH"))

          Step 5: Output "TRUTH" if T is true, else "LIE".

        However, note: the propagation step uses the report at position i+1 to update the truthfulness for position i.

        Let's run the sample input #2:

          Input: 
            3
            LIE
            LIE
            LIE

          Steps:

            s = ["LIE", "LIE", "LIE"]

            Start: current = true (for the last detector, index2).

            i = 1: 
                s[2] = "LIE" -> false.
                current = (true == false) -> false.

            i = 0:
                s[1] = "LIE" -> false.
                current = (false == false) -> true.

            Then T = (current == (s[0]=="TRUTH")) 
                 s[0]=="TRUTH" -> false.
                 T = (true == false) -> false -> output "LIE".

          This matches sample output #2.

        Code:

          We'll use a boolean variable `current` that starts as true.

          We traverse backwards from i = N-2 down to 0 (inclusive).

          Then compute T from `current` and the first string.

        But note: we can avoid storing the entire list? Actually, we have to store the strings because we need to access from the last backwards? 
          However, we need to know the reports for indices 1 to N-1 in the backward pass and then the first one for the final step.

          We can store the reports in an array.

        Implementation:

          Read N.
          Read the next N lines into an array `reports` of size N.

          bool current = true;
          for (int i = N-2; i >= 0; i--) {
              bool report_value = (reports[i+1] == "TRUTH");
              current = (current == report_value);
          }

          Then:
          bool first_report = (reports[0] == "TRUTH");
          bool testimony = (current == first_report);

          Then output testimony ? "TRUTH" : "LIE"

        However, note: the propagation formula: 
          current = (current == report_value)

        Why is that? 

          The meaning: the next detector (which we just processed, and we have its truthfulness stored in `current` at the beginning of the iteration) is reporting that the current detector is truthful if report_value is true, or lying if false.

          And the next detector's truthfulness is the `current` we have from the previous iteration? Actually, in the backward pass, we are updating `current` to be the truthfulness of the current detector we are processing (at index i). Then we move to i-1.

          But note: at the start of the iteration for index i, the `current` holds the truthfulness of the detector at index i+1. Then we use the report at index i+1 (which is reports[i+1]) to compute the truthfulness of the detector at index i.

        This matches.

        Let's run the sample input #1:

          reports = ["LIE", "LIE", "TRUTH", "TRUTH"]

          current = true (for the last detector, index3).

          i = 2: 
             report_value = (reports[3] == "TRUTH") -> "TRUTH"=="TRUTH" -> true.
             current = (true == true) -> true.

          i = 1:
             report_value = (reports[2] == "TRUTH") -> "TRUTH"=="TRUTH" -> true.
             current = (true == true) -> true.

          i = 0:
             report_value = (reports[1] == "TRUTH") -> "LIE"=="TRUTH" -> false.
             current = (true == false) -> false.

          Then: 
             first_report = (reports[0] == "TRUTH") -> "LIE"=="TRUTH" -> false.
             testimony = (false == false) -> true -> output "TRUTH".

        Correct.

        So we write the code accordingly.

        Note: We are storing the strings. N up to 100000 -> storing 100000 strings is acceptable.

        Alternatively, we could avoid storing the entire list by reading the last N lines and then processing backwards? But we need to know the reports from the last one to the first one in reverse order? Actually, we can read the first N lines and then access by index.

        We'll do:

          Read N.
          vector<string> reports(N);
          for i=0 to N-1: read reports[i]

        Then do the backward propagation.

        Code:

          #include <iostream>
          #include <vector>
          #include <string>
          using namespace std;

          int main() {
              int N;
              cin >> N;
              vector<string> reports(N);
              for (int i = 0; i < N; i++) {
                  cin >> reports[i];
              }

              bool current = true; // last detector is truthful
              // traverse from the second last (index N-2) down to 0
              for (int i = N-2; i >= 0; i--) {
                  bool report_value = (reports[i+1] == "TRUTH");
                  current = (current == report_value);
              }

              bool first_report = (reports[0] == "TRUTH");
              bool testimony = (current == first_report);

              cout << (testimony ? "TRUTH" : "LIE") << endl;

              return 0;
          }

        However, note: the propagation formula might be tricky. Let me test with a small example.

        Alternative derivation:

          We can also use the following:

            Let t[i] be the truthfulness of detector i.
            We know t[N-1] = true.

            For i from N-2 down to 0:
                t[i] = (reports[i+1] == "TRUTH") ? t[i+1] : !t[i+1]

          But note: 
            The (i+1)-th detector reports about the i-th: 
                If the report is "TRUTH", then it says "detector i is truthful", so if the (i+1)-th is truthful then t[i] must be true, but if the (i+1)-th is lying then t[i] must be false -> which is the same as: t[i] = (reports[i+1]=="TRUTH") == t[i+1]? 

          Actually: 
            t[i] = (t[i+1] ? (reports[i+1]=="TRUTH") : !(reports[i+1]=="TRUTH"))

          And we can write: 
            t[i] = (t[i+1] == (reports[i+1]=="TRUTH"))   -> does not hold.

          Let me check:

            If t[i+1] is true and reports[i+1]=="TRUTH" -> then t[i] = true (by the ternary) -> and by the expression: (true == true) -> true -> same.
            If t[i+1] is true and reports[i+1]=="LIE" -> then t[i] = false (by the ternary) -> expression: (true == false) -> false -> same.
            If t[i+1] is false and reports[i+1]=="TRUTH" -> then t[i] = false (by the ternary) -> expression: (false == true) -> false -> same.
            If t[i+1] is false and reports[i+1]=="LIE" -> then t[i] = true (by the ternary) -> expression: (false == false) -> true -> same.

          So indeed: 
                t[i] = (t[i+1] == (reports[i+1] == "TRUTH"))

          Therefore, our code is correct.

        We write the code accordingly.

        Note: The expression `(reports[i+1] == "TRUTH")` returns a boolean.

        Also note: the propagation step: 
            current = (current == (reports[i+1] == "TRUTH"))

        This is the same as: 
            current = (current == report_bool)

        Which is equivalent to: 
            current = (current == (reports[i+1] == "TRUTH"))

        And then we use the final current (which is t[0]) to compute the eyewitness.

        Final step: 
            testimony = (t[0] == (reports[0]=="TRUTH"))

        So we output accordingly.

        Let me test with the two samples.

        Sample 1: 
          reports = { "LIE", "LIE", "TRUTH", "TRUTH" }
          current (starting as true) -> becomes:
            i=2: current = (true == (reports[3]=="TRUTH") -> (true==true) -> true.
            i=1: current = (true == (reports[2]=="TRUTH") -> (true==true) -> true.
            i=0: current = (true == (reports[1]=="TRUTH") -> (true==false) -> false.
          Then: 
            first_report = (reports[0]=="TRUTH") -> false.
            testimony = (false == false) -> true -> output "TRUTH".

        Sample 2:
          reports = { "LIE", "LIE", "LIE" }
          current = true -> 
            i=1: current = (true == (reports[2]=="TRUTH") -> (true==false) -> false.
            i=0: current = (false == (reports[1]=="TRUTH") -> (false==false) -> true.
          Then: first_report = false -> testimony = (true == false) -> false -> output "LIE".

        So we are good.

        Code:

          We assume the input is as described.

        Edge: N=2.

          Example: 
            Input: 
              2
              TRUTH
              TRUTH

          Steps:
            current = true (last detector, index1).
            i=0: 
                report_value = (reports[1]=="TRUTH") -> true.
                current = (true == true) -> true.
            Then: first_report = (reports[0]=="TRUTH") -> true.
            testimony = (true == true) -> true -> "TRUTH".

          What does it mean?
            The second detector (truthful) says the first detector is truthful. Then the first detector is truthful and says the eyewitness is "TRUTH", so the eyewitness is truthful.

          Another: 
            Input: 
              2
              LIE
              TRUTH

          Steps:
            current = true (last detector).
            i=0: report_value = (reports[1]=="TRUTH") -> true -> current = (true==true) -> true.
            first_report = (reports[0]=="TRUTH") -> false.
            testimony = (true == false) -> false -> "LIE".

          Meaning: 
            The second detector (truthful) says the first is truthful -> so the first is truthful. Then the first says the eyewitness is lying -> so the eyewitness is lying.

          Another:
            Input:
              2
              TRUTH
              LIE

          Steps:
            current = true.
            i=0: report_value = (reports[1]=="TRUTH") -> false -> current = (true==false) -> false.
            first_report = (reports[0]=="TRUTH") -> true.
            testimony = (false==true) -> false -> "LIE".

          Meaning: 
            The second detector (truthful) says the first is lying -> so the first is lying. Then the first says the eyewitness is truthful -> so the eyewitness is lying.

          Another:
            Input:
              2
              LIE
              LIE

          Steps:
            current = true.
            i=0: report_value = (reports[1]=="TRUTH") -> false -> current = (true==false) -> false.
            first_report = false.
            testimony = (false==false) -> true -> "TRUTH".

          Meaning: 
            The second detector (truthful) says the first is lying -> so the first is lying. Then the first says the eyewitness is lying -> so the eyewitness is truthful.

        All these cases are consistent.

        So we code accordingly.