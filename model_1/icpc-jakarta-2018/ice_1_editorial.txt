### Approach
The problem requires ensuring that all cells in the grid can be visited regardless of the starting position, with the minimum number of changes from icy land ('.') to dry land ('#'). The key insight is that to visit all cells, every row and column must have at least one dry land cell. This is because:
- Dry land cells are necessary to stop sliding and visit cells.
- Non-border icy cells can only be visited by starting on them, but since the starting position is arbitrary, we must ensure they can be visited from any start, which requires converting them to dry land or ensuring they are border cells (which can be visited by sliding to the border).

The solution involves:
1. **Counting Empty Rows and Columns**: For each row and column, determine if it contains at least one dry land cell. If not, the row or column is considered "empty".
2. **Bipartite Graph Matching**: To minimize the number of changes, we model the problem as a bipartite graph where:
   - Nodes on the left represent empty rows.
   - Nodes on the right represent empty columns.
   - An edge exists between an empty row and an empty column if the corresponding cell (at their intersection) is icy ('.').
3. **Maximum Matching**: The goal is to find the maximum number of icy cells that can be converted to dry land such that each conversion covers one empty row and one empty column simultaneously. This is computed using a standard DFS-based bipartite matching algorithm.
4. **Result Calculation**: The minimum number of changes required is the total number of empty rows plus the total number of empty columns minus the size of the maximum matching. This accounts for changes that cover both an empty row and an empty column in one step, and the remaining changes for uncovered rows or columns.

### Solution Code
```cpp
#include <iostream>
#include <vector>
#include <cstring>
using namespace std;

const int MAX = 505;

vector<int> graph[MAX];
int matchR[MAX];
bool seen[MAX];
bool rowEmpty[MAX], colEmpty[MAX];
char grid[MAX][MAX];

bool dfs(int u) {
    for (int v : graph[u]) {
        if (!seen[v]) {
            seen[v] = true;
            if (matchR[v] < 0 || dfs(matchR[v])) {
                matchR[v] = u;
                return true;
            }
        }
    }
    return false;
}

int main() {
    int R, C;
    cin >> R >> C;
    for (int i = 0; i < R; i++) {
        cin >> grid[i];
    }

    memset(rowEmpty, true, sizeof(rowEmpty));
    memset(colEmpty, true, sizeof(colEmpty));

    for (int i = 0; i < R; i++) {
        for (int j = 0; j < C; j++) {
            if (grid[i][j] == '#') {
                rowEmpty[i] = false;
                colEmpty[j] = false;
            }
        }
    }

    vector<int> emptyRows;
    vector<int> emptyCols;
    for (int i = 0; i < R; i++) {
        if (rowEmpty[i]) {
            emptyRows.push_back(i);
        }
    }
    for (int j = 0; j < C; j++) {
        if (colEmpty[j]) {
            emptyCols.push_back(j);
        }
    }

    int A = emptyRows.size();
    int B = emptyCols.size();

    for (int i = 0; i < A; i++) {
        graph[i].clear();
    }

    for (int i = 0; i < A; i++) {
        int r = emptyRows[i];
        for (int j = 0; j < B; j++) {
            int c = emptyCols[j];
            if (grid[r][c] == '.') {
                graph[i].push_back(j);
            }
        }
    }

    memset(matchR, -1, sizeof(matchR));
    int matchingCount = 0;
    for (int u = 0; u < A; u++) {
        memset(seen, 0, sizeof(seen));
        if (dfs(u)) {
            matchingCount++;
        }
    }

    int answer = A + B - matchingCount;
    cout << answer << endl;

    return 0;
}
```

### Explanation
1. **Input Reading**: The grid dimensions and layout are read.
2. **Identifying Empty Rows and Columns**: For each row and column, we check if it contains any dry land ('#'). Rows and columns without any dry land are marked as empty.
3. **Building Bipartite Graph**: 
   - Nodes on the left represent empty rows.
   - Nodes on the right represent empty columns.
   - An edge connects an empty row to an empty column if the corresponding cell in the grid is icy ('.').
4. **Maximum Bipartite Matching**: Using DFS, we find the maximum matching in the bipartite graph. Each match represents an icy cell that can be converted to dry land to cover one empty row and one empty column.
5. **Result Calculation**: The answer is computed as the total number of empty rows plus the total number of empty columns minus the size of the maximum matching. This gives the minimum number of changes needed to ensure every row and column has at least one dry land cell, enabling all cells to be visited from any starting position.