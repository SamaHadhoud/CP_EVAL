To solve this problem, we need to ensure that all cells in a grid can be visited regardless of the starting position, with the minimum number of changes from icy land ('.') to dry land ('#'). The key insight is that for the entire grid to be accessible from any starting position, every row and every column must have at least one dry land cell. This is because dry land cells allow changing direction, which is essential for accessing all cells, especially those in icy regions.

### Approach
1. **Identify Empty Rows and Columns**: 
   - A row is considered "empty" if it contains no dry land ('#') cells. Similarly, a column is "empty" if it contains no dry land cells.
   - We scan the grid to mark which rows and columns are empty.

2. **Bipartite Graph Construction**:
   - We model the problem as a bipartite graph where nodes on the left represent empty rows and nodes on the right represent empty columns.
   - An edge exists between an empty row and an empty column if the cell at their intersection is an icy land ('.'). This indicates that converting this cell to dry land would cover both the row and column simultaneously.

3. **Maximum Bipartite Matching**:
   - We compute the maximum matching in this bipartite graph. Each matching represents a cell that, when converted to dry land, covers one empty row and one empty column.
   - The size of the maximum matching tells us how many such rows and columns can be covered with minimal changes.

4. **Result Calculation**:
   - The minimum number of changes required is the total number of empty rows plus the total number of empty columns minus the size of the maximum matching. This accounts for changes that cover both a row and a column in one step, and the remaining changes for uncovered rows or columns.

### Solution Code
```cpp
#include <iostream>
#include <vector>
#include <cstring>
using namespace std;

const int MAX = 505;

bool dfs(int u, bool seen[], vector<int> graph[], int matchR[]) {
    for (int v : graph[u]) {
        if (!seen[v]) {
            seen[v] = true;
            if (matchR[v] == -1 || dfs(matchR[v], seen, graph, matchR)) {
                matchR[v] = u;
                return true;
            }
        }
    }
    return false;
}

int main() {
    int R, C;
    cin >> R >> C;
    char grid[MAX][MAX];
    for (int i = 0; i < R; i++) {
        cin >> grid[i];
    }

    bool rowEmpty[MAX], colEmpty[MAX];
    memset(rowEmpty, true, sizeof(rowEmpty));
    memset(colEmpty, true, sizeof(colEmpty));

    for (int i = 0; i < R; i++) {
        for (int j = 0; j < C; j++) {
            if (grid[i][j] == '#') {
                rowEmpty[i] = false;
                colEmpty[j] = false;
            }
        }
    }

    vector<int> emptyRows;
    vector<int> emptyCols;
    for (int i = 0; i < R; i++) {
        if (rowEmpty[i]) {
            emptyRows.push_back(i);
        }
    }
    for (int j = 0; j < C; j++) {
        if (colEmpty[j]) {
            emptyCols.push_back(j);
        }
    }

    int A = emptyRows.size();
    int B = emptyCols.size();

    vector<int> graph[MAX];
    for (int i = 0; i < A; i++) {
        int r = emptyRows[i];
        for (int j = 0; j < B; j++) {
            int c = emptyCols[j];
            if (grid[r][c] == '.') {
                graph[i].push_back(j);
            }
        }
    }

    int matchR[MAX];
    memset(matchR, -1, sizeof(matchR));
    int matchingCount = 0;
    bool seen[MAX];

    for (int u = 0; u < A; u++) {
        memset(seen, 0, sizeof(seen));
        if (dfs(u, seen, graph, matchR)) {
            matchingCount++;
        }
    }

    int answer = A + B - matchingCount;
    cout << answer << endl;

    return 0;
}
```

### Explanation
1. **Reading Input**: The grid dimensions and layout are read from the input.
2. **Identifying Empty Rows and Columns**: We scan the grid to determine which rows and columns lack any dry land cells.
3. **Building Bipartite Graph**: 
   - Nodes on the left represent empty rows, and nodes on the right represent empty columns.
   - An edge connects a left node (empty row) to a right node (empty column) if their intersecting cell is icy ('.').
4. **Maximum Matching**: Using a depth-first search (DFS), we find the maximum bipartite matching. Each match indicates a cell that can be converted to dry land to cover both an empty row and an empty column.
5. **Result Calculation**: The answer is derived by adding the number of empty rows and columns and subtracting the size of the maximum matching. This gives the minimal changes needed to ensure every row and column has at least one dry land cell, enabling full grid accessibility from any starting position.