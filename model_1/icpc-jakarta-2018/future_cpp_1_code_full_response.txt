To solve this problem, we need to select a subsequence from each given string such that each subsequent subsequence is lexicographically larger than the previous one, and the total length of these subsequences is maximized. If no such sequence exists, we return -1.

### Approach
1. **Problem Analysis**: The problem requires selecting subsequences from each string in a given order such that each subsequence is lexicographically larger than the one from the previous string. The goal is to maximize the sum of the lengths of these subsequences.
2. **Key Insight**: For each string, generate all distinct non-empty subsequences. Since the strings are short (up to 15 characters), generating all subsequences (up to \(2^{15} = 32768\)) is feasible.
3. **Dynamic Programming (DP) Setup**: Use a DP approach where `dp[i][j]` represents the maximum total length achievable for the first \(i+1\) children, ending with the \(j\)-th subsequence of the \(i\)-th string.
4. **Optimization with Prefix Maximum Array**: For efficient transitions, sort the subsequences lexicographically and maintain a prefix maximum array of DP values. This allows quick lookup of the best previous DP value for subsequences lexicographically smaller than the current one.
5. **Complexity Analysis**: The time complexity is \(O(N \times 2^L \times L)\), where \(N\) is the number of strings and \(L\) is the maximum string length. The space complexity is \(O(N \times 2^L \times L)\) to store subsequences.

### Solution Code
```cpp
#include <iostream>
#include <vector>
#include <set>
#include <algorithm>

using namespace std;

int main() {
    int N;
    cin >> N;
    vector<string> S(N);
    for (int i = 0; i < N; i++) {
        cin >> S[i];
    }

    vector<vector<string>> A_list(N);
    for (int i = 0; i < N; i++) {
        string s = S[i];
        set<string> seen;
        int n = s.length();
        for (int mask = 1; mask < (1 << n); mask++) {
            string t = "";
            for (int j = 0; j < n; j++) {
                if (mask & (1 << j)) {
                    t += s[j];
                }
            }
            seen.insert(t);
        }
        vector<string> A(seen.begin(), seen.end());
        sort(A.begin(), A.end());
        A_list[i] = A;
    }

    vector<int> dp_prev;
    for (string t : A_list[0]) {
        dp_prev.push_back(t.length());
    }

    for (int i = 1; i < N; i++) {
        vector<string> prev_list = A_list[i-1];
        vector<int> prefix_max(dp_prev.size(), 0);
        if (dp_prev.size() > 0) {
            prefix_max[0] = dp_prev[0];
            for (int j = 1; j < dp_prev.size(); j++) {
                prefix_max[j] = max(prefix_max[j-1], dp_prev[j]);
            }
        }

        vector<string> current_list = A_list[i];
        vector<int> dp_current(current_list.size(), -1000000000);

        for (int j = 0; j < current_list.size(); j++) {
            string t = current_list[j];
            auto it = lower_bound(prev_list.begin(), prev_list.end(), t);
            int pos = it - prev_list.begin();
            if (pos > 0) {
                dp_current[j] = prefix_max[pos-1] + t.length();
            }
        }
        dp_prev = dp_current;
    }

    int ans = -1;
    if (!dp_prev.empty()) {
        ans = *max_element(dp_prev.begin(), dp_prev.end());
        if (ans < 0) {
            ans = -1;
        }
    } else {
        ans = -1;
    }

    cout << ans << endl;

    return 0;
}
```

### Explanation
1. **Reading Input**: The number of children \(N\) and the list of strings \(S\) are read.
2. **Generating Subsequences**: For each string, all distinct non-empty subsequences are generated using bitmasking, stored in a set to avoid duplicates, and then sorted lexicographically.
3. **Initial DP Setup**: For the first string, the DP array is initialized with the lengths of each subsequence.
4. **DP Processing**: For each subsequent string:
   - A prefix maximum array is built from the DP values of the previous string's sorted subsequences.
   - For each subsequence in the current string, binary search is used to find the position in the previous string's subsequences where the current subsequence would fit lexicographically. The best valid DP value from the previous string is then used to update the current DP state.
5. **Result Extraction**: After processing all strings, the maximum value in the final DP array is checked. If it is negative, -1 is printed; otherwise, the maximum value (total length) is printed.

This approach efficiently handles the constraints by leveraging dynamic programming and optimized lookups with binary search and prefix maximum arrays, ensuring optimal performance for the given problem limits.