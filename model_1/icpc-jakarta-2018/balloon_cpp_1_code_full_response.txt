To solve this problem, we need to determine whether Ayu can win the competition by having strictly more solved tasks than Budi, given that Ayu can strategically pop balloons to disrupt Budi's concentration. The solution involves calculating the number of tasks Ayu can solve within the given time, determining if Budi can be delayed enough using balloon pops, and generating the pop times if possible.

### Approach
1. **Compute Ayu's Solved Tasks (kA):** Calculate the maximum number of tasks Ayu can solve within the given time `M` by summing the task durations in order until the total exceeds `M`.
2. **Check for Immediate Win:** If Ayu solves zero tasks, it's impossible for her to win (output -1). If Budi cannot solve all his tasks within `M` without any pops, Ayu wins without any pops (output 0).
3. **Calculate Minimal Pops:** For each task Budi is expected to solve, compute the minimal number of pops required to delay his finish time beyond `M`. This involves:
   - **Prefix Sums for Budi:** Compute the cumulative time Budi needs for each task.
   - **Cost Calculation:** For each task, determine the number of pops needed to ensure Budi's finish time exceeds `M` using the formula `ceil((M + 1 - prefixB[i]) / B[i])`.
4. **Check Feasibility:** If the minimal number of pops required is greater than the number of balloons Ayu has (kA), output -1. Otherwise, proceed to generate the pop times.
5. **Generate Pop Times:** For the selected task, generate distinct pop times within valid intervals, ensuring each pop occurs after the corresponding balloon is available and before the contest ends. The pop times are chosen greedily to maximize delay.

### Solution Code
```cpp
#include <vector>
#include <iostream>
#include <algorithm>
#include <climits>
using namespace std;

typedef long long ll;

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);

    int N;
    ll M;
    cin >> N >> M;
    vector<ll> A(N), B(N);
    for (int i = 0; i < N; i++) cin >> A[i];
    for (int i = 0; i < N; i++) cin >> B[i];

    int kA = 0;
    ll sumA = 0;
    for (int i = 0; i < N; i++) {
        if (sumA + A[i] <= M) {
            sumA += A[i];
            kA++;
        } else {
            break;
        }
    }

    if (kA == 0) {
        cout << -1 << endl;
        return 0;
    }

    vector<ll> prefixB;
    ll sumB = 0;
    for (int i = 0; i < kA; i++) {
        sumB += B[i];
        prefixB.push_back(sumB);
    }

    bool prefixB_exceeds_M = false;
    for (int i = 0; i < kA; i++) {
        if (prefixB[i] > M) {
            prefixB_exceeds_M = true;
            break;
        }
    }
    if (prefixB_exceeds_M) {
        cout << 0 << endl;
        return 0;
    }

    int best_cost = INT_MAX;
    vector<int> candidate_i;
    for (int i = 0; i < kA; i++) {
        ll a = M + 1 - prefixB[i];
        ll cost_i;
        if (a <= 0) {
            cost_i = 0;
        } else {
            cost_i = (a - 1) / B[i] + 1;
        }
        if (cost_i < best_cost) {
            best_cost = cost_i;
            candidate_i.clear();
            candidate_i.push_back(i);
        } else if (cost_i == best_cost) {
            candidate_i.push_back(i);
        }
    }

    if (best_cost > kA) {
        cout << -1 << endl;
        return 0;
    }

    if (best_cost == 0) {
        cout << 0 << endl;
        return 0;
    }

    vector<ll> balloons;
    ll cur = 0;
    for (int i = 0; i < best_cost; i++) {
        cur += A[i];
        balloons.push_back(cur);
    }

    ll M1 = 0;
    for (int j = 0; j < best_cost; j++) {
        ll candidate = balloons[j] + (best_cost - 1 - j);
        if (candidate > M1) M1 = candidate;
    }

    for (int idx = 0; idx < candidate_i.size(); idx++) {
        int i0 = candidate_i[idx];
        ll s_i0 = (i0 == 0) ? 0 : prefixB[i0 - 1];
        ll L = max(s_i0, M - B[i0] + 1);
        ll R = min(M, s_i0 + (ll)best_cost * B[i0] - 1);

        if (balloons.back() > R) {
            continue;
        }

        if (max(L + best_cost - 1, M1) <= R) {
            vector<ll> pops;
            ll current = L;
            bool valid = true;
            for (int j = 0; j < best_cost; j++) {
                ll p = max(current, balloons[j]);
                if (p > R) {
                    valid = false;
                    break;
                }
                pops.push_back(p);
                current = p + 1;
            }
            if (valid) {
                cout << best_cost << "\n";
                for (int j = 0; j < best_cost; j++) {
                    cout << pops[j];
                    if (j < best_cost - 1) cout << " ";
                }
                cout << "\n";
                return 0;
            }
        }
    }

    cout << -1 << endl;
    return 0;
}
```

### Explanation
1. **Input Reading:** The input consists of the number of tasks `N`, the contest duration `M`, and arrays `A` and `B` representing the time Ayu and Budi need per task.
2. **Ayu's Tasks (kA):** Calculate how many tasks Ayu can solve by summing task durations until the total exceeds `M`.
3. **Budi's Tasks:** Compute cumulative times for Budi's tasks. If any cumulative time exceeds `M` without pops, Ayu wins immediately (output 0).
4. **Cost Calculation:** For each task Budi solves, compute the minimal pops needed to delay his finish beyond `M` using ceiling division.
5. **Feasibility Check:** If the minimal pops exceed Ayu's balloons (kA), output -1. Otherwise, proceed.
6. **Pop Generation:** For feasible tasks, generate pop times within valid intervals, ensuring each pop occurs after the corresponding balloon is available. The pops are chosen greedily to maximize delay.
7. **Output:** Output the number of pops and their times, or -1 if no valid configuration exists.