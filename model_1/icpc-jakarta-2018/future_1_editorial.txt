### Approach
The problem requires selecting a subsequence from each given string such that each subsequent subsequence is lexicographically larger than the previous one, and the total length of these subsequences is maximized. If no such sequence exists, we should return -1.

#### Key Insights
1. **Lexicographical Order**: The subsequences must be strictly increasing in lexicographical order. This means each subsequence must be greater than the one before it.
2. **Subsequence Generation**: For each string, generate all distinct non-empty subsequences. Given the constraints (strings up to length 15), this is feasible since the maximum number of distinct subsequences per string is \(2^{15} = 32768\).
3. **Dynamic Programming (DP)**: Use a DP approach where `dp[i][j]` represents the maximum total length achievable for the first \(i+1\) children, ending with the \(j\)-th subsequence of the \(i\)-th string. The transition involves finding the best valid subsequence from the previous string that is lexicographically smaller than the current subsequence.
4. **Efficiency Optimization**: 
   - **Precomputation**: For each string, precompute all distinct non-empty subsequences and sort them lexicographically.
   - **Prefix Maximum Array**: For each string, after sorting the subsequences, maintain a prefix maximum array of the DP values to quickly find the best value for subsequences lexicographically smaller than the current one.

#### Algorithm Steps
1. **Precompute Subsequences**: For each string, generate all distinct non-empty subsequences using bitmasking. Store these subsequences in a sorted list for each string.
2. **Initialize DP for First Child**: For the first string, initialize the DP array with the lengths of each subsequence.
3. **DP Transition**:
   - For each subsequent child, build a prefix maximum array from the DP values of the previous child's sorted subsequences.
   - For each subsequence of the current child's string, use binary search to find the largest subsequence in the previous child's list that is lexicographically smaller. Use the prefix maximum array to get the best DP value from the valid subsequences.
   - Update the current DP state as the best value plus the length of the current subsequence.
4. **Result Extraction**: After processing all children, the result is the maximum value in the last DP array. If this value is negative, return -1; otherwise, return the value.

#### Complexity Analysis
- **Time Complexity**: 
  - **Subsequence Generation**: For each string of length \(L\), generating distinct subsequences takes \(O(2^L \times L)\) time. With \(N\) strings, this is \(O(N \times 2^L \times L)\).
  - **DP Processing**: For each child (after the first), processing involves \(O(M \log K)\) operations, where \(M\) is the number of subsequences in the current string and \(K\) is the number in the previous string. With \(N\) children, this is \(O(N \times 2^L \times \log(2^L)) = O(N \times 2^L \times L)\).
  - Overall, the time complexity is \(O(N \times 2^L \times L)\), which is feasible given \(N, L \leq 15\).
- **Space Complexity**: 
  - Storing subsequences for all strings takes \(O(N \times 2^L \times L)\) space. The DP arrays use \(O(2^L)\) space per string, leading to \(O(N \times 2^L)\) space.

### Solution Code
```python
import bisect

def main():
    import sys
    data = sys.stdin.read().splitlines()
    if not data:
        return
    N = int(data[0].strip())
    S = []
    for i in range(1, 1 + N):
        S.append(data[i].strip())
    
    A_list = []
    for s in S:
        n = len(s)
        seen = set()
        for mask in range(1, 1 << n):
            substr = []
            for j in range(n):
                if mask & (1 << j):
                    substr.append(s[j])
            t = ''.join(substr)
            seen.add(t)
        sorted_seen = sorted(seen)
        A_list.append(sorted_seen)
    
    if N == 0:
        print(0)
        return
        
    dp_prev = [len(subseq) for subseq in A_list[0]]
    
    for i in range(1, N):
        if not dp_prev:
            break
            
        prefix_max = [0] * len(dp_prev)
        prefix_max[0] = dp_prev[0]
        for j in range(1, len(dp_prev)):
            prefix_max[j] = max(prefix_max[j - 1], dp_prev[j])
            
        current_A = A_list[i]
        current_dp = [-10**9] * len(current_A)
        
        for idx, subseq in enumerate(current_A):
            pos = bisect.bisect_left(A_list[i - 1], subseq)
            if pos > 0:
                best_prev = prefix_max[pos - 1]
                current_dp[idx] = best_prev + len(subseq)
                
        dp_prev = current_dp
        
    if not dp_prev:
        print(-1)
    else:
        ans = max(dp_prev)
        if ans < 0:
            print(-1)
        else:
            print(ans)

if __name__ == "__main__":
    main()
```

### Explanation
1. **Reading Input**: The input is read and parsed into the number of children \(N\) and the list of strings \(S\).
2. **Subsequence Generation**: For each string in \(S\), all distinct non-empty subsequences are generated using bitmasking. These subsequences are stored in a sorted list for each string.
3. **Initialization**: For the first string, the DP array is initialized with the lengths of each subsequence.
4. **DP Processing**:
   - For each subsequent string, a prefix maximum array is built from the DP values of the previous string's sorted subsequences.
   - For each subsequence in the current string, binary search is used to find the position in the previous string's subsequences where the current subsequence would fit lexicographically. The best valid DP value from the previous string is then used to update the current DP state.
5. **Result Extraction**: The maximum value in the final DP array is checked. If it is negative, no valid sequence exists, and -1 is printed. Otherwise, the maximum total length is printed.

This approach efficiently handles the constraints by leveraging dynamic programming and optimized lookups with binary search and prefix maximum arrays, ensuring optimal performance for the given problem limits.