To solve this problem, we need to find the maximum number of edge-disjoint boomerangs in an undirected graph. A boomerang is defined as a triple \(\langle u, v, w \rangle\) where the edges \((u, v)\) and \((v, w)\) exist in the graph and \(u \neq w\). The boomerangs are disjoint if no edge is shared between any two boomerangs. The goal is to maximize the number of such boomerangs.

### Approach
1. **Graph Representation**: Represent the graph using adjacency sets for each vertex. This allows efficient edge removal operations.
2. **Queue Initialization**: Initialize a queue with all vertices that have at least two edges (degree â‰¥ 2). These vertices are potential centers for boomerangs.
3. **Greedy Processing**: While the queue is not empty:
   - Dequeue a vertex \(v\).
   - If \(v\) still has at least two edges, pop two distinct neighbors \(a\) and \(b\) from its adjacency set.
   - Remove the edges \((v, a)\) and \((v, b)\) from the graph.
   - Record the boomerang \((a, v, b)\).
   - Enqueue the vertices \(v\), \(a\), and \(b\) if their updated degrees are at least two and they are not already in the queue.
4. **Output**: Print the number of boomerangs followed by each boomerang in the order they were found.

This approach ensures that we efficiently pack as many edge-disjoint boomerangs as possible by greedily processing vertices with sufficient edges, removing used edges, and re-enqueueing vertices that might form new boomerangs after edge removals.

### Solution Code
```python
import collections

def main():
    import sys
    data = sys.stdin.read().split()
    if not data:
        return
    
    n = int(data[0])
    m = int(data[1])
    g = [set() for _ in range(n+1)]
    index = 2
    for i in range(m):
        u = int(data[index])
        v = int(data[index+1])
        index += 2
        g[u].add(v)
        g[v].add(u)
    
    in_queue = [False] * (n+1)
    q = collections.deque()
    
    for i in range(1, n+1):
        if len(g[i]) >= 2:
            in_queue[i] = True
            q.append(i)
            
    ans = []
    
    while q:
        v = q.popleft()
        in_queue[v] = False
        
        if len(g[v]) < 2:
            continue
            
        a = g[v].pop()
        g[a].discard(v)
        
        if not g[v]:
            g[a].add(v)
            g[v].add(a)
            continue
            
        b = g[v].pop()
        g[b].discard(v)
        
        ans.append((a, v, b))
        
        for u in [v, a, b]:
            if len(g[u]) >= 2 and not in_queue[u]:
                in_queue[u] = True
                q.append(u)
                
    print(len(ans))
    for (a, v, b) in ans:
        print(f"{a} {v} {b}")

if __name__ == '__main__':
    main()
```

### Explanation
1. **Graph Representation**: The graph is stored as a list of sets where each set contains the neighbors of a vertex. This allows efficient edge removal and neighbor access.
2. **Queue Initialization**: Vertices with at least two edges are enqueued for processing. This ensures we only consider vertices that can potentially form boomerangs.
3. **Greedy Processing**: For each vertex dequeued:
   - If it still has at least two edges, two neighbors are popped from its adjacency set.
   - The edges connecting the vertex to these neighbors are removed from the graph.
   - The boomerang formed by these edges is recorded.
   - The vertex and its neighbors are re-enqueued if their updated degrees allow forming new boomerangs.
4. **Output**: The number of boomerangs found is printed first, followed by each boomerang represented as \(\langle u, v, w \rangle\), where \(v\) is the center of the boomerang.

This approach efficiently maximizes the number of edge-disjoint boomerangs by leveraging a greedy strategy and adjacency sets for optimal edge management. The complexity is \(O(M)\) on average due to the use of hash sets for edge operations.