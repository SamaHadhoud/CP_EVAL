We are given a binary string S of length n (1<=n<=2000). We need to output a binary string T of the same length such that the edit distance between S and T is greater than n/2.

First, recall that the edit distance (Levenshtein distance) is the minimum number of operations (insert, delete, substitute) required to change one string into the other. However, note that in our problem the two strings have the same length. When two strings have the same length, we can note:

1. Insertions and deletions would change the length. Therefore, the edit distance for two strings of the same length can be achieved by using only substitutions and possibly moves (but moves require insertions and deletions). However, an important observation is that we can also consider the following:

   Since the strings have the same length, the edit distance must be at least the number of positions where they differ (the Hamming distance). But it might be less than the Hamming distance? Actually, no: because if we can use moves, we might reduce the number of operations? Let me clarify.

   Actually, the edit distance can be less than the Hamming distance. For example, consider S="01" and T="10". The Hamming distance is 2. However, the edit distance is 2? Actually, we can do:
     Option 1: substitute first character: 11 -> then substitute second: 10 -> 2 operations.
     Option 2: but note that we can also do: delete the first character -> we get "1", then insert '0' at the end -> "10". That is 2 operations.

   However, note that we can also swap? But swapping is two operations: delete and insert? Actually, the classic edit distance does not have a swap operation. So the edit distance for two strings of the same length might be less than the Hamming distance? Actually, no: because the Hamming distance is the number of substitutions required to change S to T (if we were allowed only substitutions). But the edit distance also allows insertions and deletions. However, when the strings have the same length, the minimum edit distance might be achieved without changing the length? Actually, we can use the following:

   We know that the edit distance is at least the absolute difference of the lengths (which is 0) and at least the difference in the number of each character? Actually, a known fact is that for two strings of the same length, the edit distance is at most the Hamming distance (because we can do substitutions for each difference) and at least the Hamming distance divided by 2? Not exactly.

   However, consider that we can also use a deletion and an insertion to fix two differences at once? For example, if we have S="01" and T="10", we can delete the first character (cost 1) and then insert at the end (cost 1) -> total 2, which is the same as the Hamming distance.

   But what if we have S="ab" and T="ba"? Actually, the edit distance is 2.

   There is a known fact: the edit distance between two strings of the same length is at least the Hamming distance and at most 2 * (Hamming distance). However, we can also get a better bound? Actually, we can use the following:

   The edit distance is not less than the absolute difference of the lengths (0) and also not less than the difference between the two strings in terms of the counts of ones and zeros? Actually, no: because we can also do substitutions which change the counts arbitrarily.

   However, note the following: the edit distance is always at least the absolute value of the difference in the number of 1's (or 0's) in the two strings? Actually, no: because we can substitute a 0 to 1 to change the count.

   Let me denote:
      n = |S| = |T|
      Let c_S be the count of 1's in S, and c_T in T.

   Then the edit distance must be at least |c_S - c_T|? Actually, no: because we can change the counts by substitutions. Each substitution can change the count by at most 1. Therefore, the minimum number of substitutions required to make the counts equal is |c_S - c_T|? Actually, but note: if we substitute a 0 to 1, then the count of ones increases by 1. Similarly, substituting 1 to 0 decreases the count by 1. So to have the same count, we need at least |c_S - c_T| substitutions? Actually, no: because we are not required to have the same counts? The edit distance can also use insertions and deletions? But wait, the two strings have the same length. Therefore, the counts of ones in S and T must be the same? Actually, no: because we are allowed to do operations that change the counts? But note: we cannot change the length. So the only operations that change the count of ones without changing the length are substitutions. Therefore, the net change in the count of ones is (c_T - c_S). Therefore, we must have at least |c_T - c_S| substitutions? Actually, yes: because each substitution changes the count of ones by at most 1. Therefore, the edit distance must be at least |c_T - c_S|.

   But also, we might have to change positions? Actually, the edit distance must account for both the mismatches and the shifts? 

   However, a well-known fact: for two strings of the same length, the edit distance can be expressed as:
        n - LCS(S, T)
   where LCS is the longest common subsequence? Actually, no: the edit distance with only substitutions and adjacent transpositions? 

   Actually, the standard edit distance without the restriction of same length? But we have same length, and we know that the edit distance can be computed by:
        d = n - LCS(S, T)   ??? 
   That formula is for when we allow only insertions and deletions? Actually, the standard formula for edit distance (with insert, delete, substitute) is:
        d = |S| + |T| - 2 * LCS(S, T)   ??? 

   Actually, no: the formula for edit distance is more complex. 

   However, note that the problem does not require us to compute the exact edit distance. We only need to output a T such that edit(S, T) > n/2.

   How can we achieve that?

   Claim: The maximum possible edit distance between two binary strings of length n is at most n. (We can do at most n substitutions). And we can achieve n if we change every character? Then the edit distance is at most n? Actually, we can also use moves? But note: if we change every character, then the Hamming distance is n, and the edit distance is at most n (by substituting each character). But is it possible to get more than n? No, because we can only do one operation per character? Actually, no: we can do more than n operations? But the problem says we are modifying S into T, and we are starting with n characters. Each substitution changes one character. Each deletion removes one and then we have to insert one to get back to n? So that would be two operations per deletion-insertion. Therefore, the edit distance for two strings of the same length is at most 2 * (n - L) where L is the length of the longest common subsequence? Actually, it's known that the edit distance is at least n - L and at most 2*(n - L)? 

   Actually, the edit distance is n - L if we are only allowed to delete and insert? But we are also allowed substitutions. The standard formula for edit distance is:

        edit(S, T) = n + m - 2 * LCS(S, T)   ???   (if we only allow deletion and insertion) 

   But with substitutions, we have:

        edit(S, T) <= n + m - 2 * LCS(S, T)   ??? 

   Actually, the edit distance with substitution costing 1 and insertion/deletion costing 1 is given by:

        d[i][j] = minimum of:
            d[i-1][j-1] + (S[i] != T[j])  -> substitution or match
            d[i-1][j] + 1                  -> delete in S (or insert in T)
            d[i][j-1] + 1                  -> insert in S (or delete in T)

   This is the standard dynamic programming.

   However, we are not required to compute the edit distance exactly. We only need to produce a T such that edit(S, T) > n/2.

   How about we consider two simple candidates for T:

   1. The bitwise complement (flip) of S: that is, for each character in S, we flip 0 to 1 and 1 to 0. Let T1 be that string.

      Then the Hamming distance between S and T1 is n. Therefore, the edit distance is at most n (by substituting every character). But is it necessarily n? Actually, no: because we can use insertions and deletions to achieve the same transformation in fewer operations? 

      Example: S = "00", T1 = "11": 
        We can delete the first '0' -> "0", then insert '1' at the beginning -> "10", then delete the last '0' and insert '1' -> that would be 4 operations? But that is worse. Alternatively, we can substitute both: 2 operations.

      Actually, the edit distance for two strings of the same length cannot be less than the Hamming distance? Why? Because each operation can change at most one character in the alignment? Actually, no: because we can shift. 

      Example: S="01", T1="10": 
        The Hamming distance is 2. The edit distance: 
          We can delete the first character (cost 1) -> becomes "1", then insert '0' at the end (cost 1) -> "10". So edit distance=2.

        But note: if we do two substitutions, that is also 2. So in this case it is 2.

      However, consider S="0011", T1="1100":
        The Hamming distance is 4. 
        But the edit distance: 
          We can do: 
            0011 -> delete the first two zeros: becomes "11", then insert two ones at the front? Actually, we need to insert two zeros at the end? 
          Alternatively, we can do:
            0011 -> 1011 (substitute first to 1) -> 1111 (substitute second to 1) -> 1110 (substitute third to 0) -> 1100 (substitute fourth to 0) -> 4 operations.

          But note: the example in the problem says the edit distance is 4.

        However, is there a way to do it in less than 4? 
          Let me try: 
            We can delete the first two zeros: that leaves "11". Then we have to add two zeros at the end: that is two insertions -> total 4 operations.
          Or: delete the first zero -> "011", then insert a 1 at the beginning -> "1011", then delete the last two and insert two zeros? 

        Actually, the minimal edit distance for "0011" and "1100" is 4.

      Therefore, for the complement, the edit distance is n (if we do substitutions) and sometimes we can do it in n? Actually, the edit distance of the complement is exactly n? 

      But consider: S="0000", T1="1111": 
          We can do: 
            delete two zeros at the beginning: cost 2 -> "00", then insert two ones at the beginning: cost 2 -> total 4? 
            Or substitute all: cost 4.

        So the edit distance is 4? 

      Actually, the minimal edit distance for two strings of the same length is at least the Hamming distance and at most n? But in the complement, the Hamming distance is n, so the edit distance is at least n. Therefore, the edit distance for the complement is exactly n? 

      Why? Because the minimal operations must include at least n substitutions? Actually, no: because we can also use deletions and insertions. However, each deletion and insertion can fix at most one mismatch? Actually, no: because if we delete a character, we break the alignment. 

      But note: we have to change every character. How can we fix two mismatches with one deletion and one insertion? For example, in "01" and "10": we fixed two mismatches with one deletion and one insertion (total 2 operations). So the edit distance was 2, which equals the Hamming distance.

      In fact, the edit distance for the complement is always n? 

      Actually, no: consider S="00", T1="11": 
          We can do: 
            delete the first zero -> "0", then insert a one at the beginning -> "10", then delete the last zero and insert a one -> "11". That is 3 operations? 
          But wait: we can do: 
            substitute the first zero to one -> "10", then substitute the second zero to one -> "11": 2 operations.

      So the minimal is 2. Therefore, the edit distance for the complement is not always n? 

      Actually, the edit distance for the complement is the same as the Hamming distance? 

      Why? Because in the complement, every position is different. Therefore, we must change every character. But we can change each character by substitution, which costs 1 per character. Therefore, we can achieve the transformation by n substitutions. However, can we achieve it in less? 

      Consider: we can delete a segment and then insert the complement segment? But note: to fix a mismatch at a position, we can either substitute it, or delete it and then insert the correct one somewhere else? But if we delete a character, we break the alignment and then we have to insert one elsewhere. However, if we delete a character at position i and insert the correct character at position j, we are effectively shifting the entire string and we fix two mismatches? Actually, no: we fix the mismatch at i by deletion (but then we create a shift) and then we fix the mismatch at j by insertion? 

      Actually, the edit distance for two strings of the same length that are complements is n. Why? 

        Because the strings have no common subsequence of length greater than 0? Actually, the longest common subsequence (LCS) of S and T1 is 0? Because they are complements? 

        Actually, no: consider S="01", T1="10": 
          The LCS can be the empty string? Or we can have a common subsequence: for example, we can take the first character of S and the last character of T1: '0' and then '0'? But in T1="10", the zeros are at the end? 

        Actually, the LCS of "01" and "10" is 1: we can take either the '0' from S and the '0' from T1 (if we skip the first character of T1 and the last character of S) or the '1' similarly? 

        How about S="000", T1="111": LCS=0? 

        Actually, the LCS of two complementary strings: 
          In S="000", T1="111", there is no common character? So LCS=0.

        Then the edit distance (with substitution allowed) is given by: 
          d = n + m - 2 * LCS? That formula is for when we don't have substitutions? 

        Actually, the edit distance with substitutions is known to be:

          d = n + m - 2 * LCS? 

        But that formula does not hold: because for S="01", T1="10": 
          n=2, m=2, LCS=0? Then d= 2+2-0 =4? That is not true (we know it's 2).

        The correct formula for the edit distance when we allow substitutions is:

          d = n + m - 2 * LCS?   -> no.

        Actually, the standard formula for edit distance is not that simple.

      However, we know that the edit distance is at least the Hamming distance. For the complement, the Hamming distance is n, so the edit distance is at least n. But wait, we just saw that for S="00" and T1="11", the edit distance was 2? 

      Actually, the Hamming distance for S="00" and T1="11" is 2, and the edit distance is 2. So the edit distance is exactly n for the complement? 

      Therefore, for the complement, the edit distance is n. Then we have edit(S, T1)=n, which is > n/2 (for n>=1, since n> n/2). Therefore, the complement is a valid solution.

   But wait: the problem says for the sample "0011", the output is "1100", which is the complement.

   Therefore, we can simply output the complement of S.

   However, consider the second sample: 
        Input: "1100101"
        Sample Output: "0011010"

   Let me check: 
        S: 1100101 -> length 7
        Complement: 0011010 -> which is the sample output.

   Therefore, the sample outputs are the complements.

   Why does the sample output "0011010" for "1100101"? 

   And the problem states: 
        edit distance of 1100101 and 1110100 is 2 -> but that is a different T. 

   But our T is the complement: 0011010.

   What is the edit distance between "1100101" and "0011010"? 
        We can do: 
          They are complements -> so Hamming distance is 7? 
        Therefore, the edit distance is at least 7? Actually, we argued that it is exactly 7? 

   But wait: can we do it in less than 7? 
        We have to change every character. How? 
        We can use substitutions: 7 operations. 
        Or we can try: 
          Delete the entire string and then insert the new string? That would be 7 deletions and 7 insertions -> 14 operations. 
          Or we can try to fix two mismatches with one deletion and one insertion? But that still takes 2 operations per two mismatches? 

        Actually, each mismatch must be fixed by at least one operation. And if we use substitution, it fixes one mismatch. If we use deletion and insertion, it fixes one mismatch (by removing the wrong one and then inserting the correct one at the right place) but then we break the alignment for the rest. 

        In fact, the minimal number of operations is the Hamming distance? 

        Actually, it is known that for two strings of the same length, the edit distance is at least the Hamming distance and at most 2 * (Hamming distance). But in this case, the Hamming distance is 7, so the edit distance is at least 7. Therefore, it is 7.

        Then 7 > 7/2 = 3.5 -> true.

   Therefore, the complement works.

   But is there any case where the complement might fail? 
        The condition is: edit(S, T) > n/2.
        For the complement, we have edit(S, T) = n (if we can do it by substitutions) and we know that n > n/2 for any n>=1.

   However, we must be cautious: is the edit distance of the complement always n? 

   Actually, we just saw that for S="00" and T="11", we have edit distance=2, which equals n (n=2). 
        Similarly, for S="000", T="111", the edit distance must be 3? 
          We can do: 
            substitute each: 3 operations.
          Or: 
            delete all -> 3 deletions, then insert 3 ones -> 3 insertions: total 6. 
          So the minimal is 3.

   Therefore, the edit distance for the complement is always n? 

   Why? Because we must change every character. Each substitution changes one character. And we cannot change two characters with one substitution? 

   However, what if we delete a character and then insert a character? That would fix two mismatches? Actually, no: 
        Consider: 
          Original: S = a1, a2, a3, ... an.
          We delete a1: then we have a2, a3, ... an. Now we have n-1 characters. Then we insert b1 at the end: then we have a2, a3, ... an, b1. 
          Now the first character is a2, which should be compared to T[1]=b1? 
          But we wanted T = b1, b2, ... bn.

        Actually, the alignment is broken. We fixed the mismatch at the first position (by deleting a1 and then inserting b1 at the end) but now the rest of the string is shifted: the original a2 is now compared to T[2]=b2? and we might have a2 != b2? 

        Therefore, we still have mismatches in the rest. 

        To fix the entire string, we must fix each mismatch. Therefore, the minimal number of operations is at least the Hamming distance, which is n. 

        Hence, the edit distance is exactly n.

   Therefore, we can simply output the complement of S.

   But note: the problem says "if there is more than one valid solution, you can output any of them". So we are free to output the complement.

   Algorithm:

        Read S.
        Let T = ""
        For each character c in S:
            if c == '0', append '1' to T.
            else, append '0' to T.

        Output T.

   Example: 
        Input: "0011" -> T = "1100"

   However, the problem sample input "1100101" becomes "0011010", which matches the sample output.

   Therefore, we are done.

   But let me check the condition: 
        For S="0011", n=4, edit(S, T)=4 > 4/2 = 2 -> valid.

   Why is this solution valid? 
        Because the edit distance between S and T (the complement) is exactly n (the length of S), and n > n/2 for any n>=1.

   However, note: n must be at least 1 (given). 

   Therefore, we have a solution.

   But wait: the problem says "it can be proven that edit(S, T_max) > |S|/2 for any binary string S", and we are using T = complement, which satisfies edit(S, T)=|S|, which is greater than |S|/2.

   Therefore, the complement is a valid solution.

   However, note: the problem also says that we are allowed to return any binary string T that satisfies the condition. We don't have to return the one that maximizes the edit distance. The complement gives the maximum edit distance? 

        Actually, the maximum edit distance for two strings of length n is at most n? (because we can't do more than n substitutions, and each substitution costs 1). But we just saw that we can achieve n. Therefore, the complement achieves the maximum edit distance.

   So we are returning T_max.

   Therefore, the solution is to output the complement of S.

   Code:

        s = input().strip()
        t = ''.join('1' if c=='0' else '0' for c in s)
        print(t)

   However, note: the problem constraints |S| up to 2000, so this is efficient.

   Let me run the sample:

        Sample #1: "0011" -> becomes "1100" -> correct.

        Sample #2: "1100101" -> 
            '1'->'0'
            '1'->'0'
            '0'->'1'
            '0'->'1'
            '1'->'0'
            '0'->'1'
            '1'->'0'
            -> "0011010" -> matches sample.

   Therefore, we output the complement.

   But wait: the problem statement for sample #2 says that the edit distance of "1100101" and "1110100" is 2. That is a different T. But we are outputting the complement, which is "0011010", and that is acceptable because the problem says "any binary string T".

   So we are good.

   Why is the complement the best? Actually, the problem doesn't require the best, but we are providing the best.

   However, note: there might be other strings that also satisfy edit(S, T)>n/2. For example, if we output a string that is the complement but we flip one extra character? But the complement already flips every character. 

   Actually, we cannot flip a character twice? 

   Alternatively, we could output a string that is not the complement. For example, if we flip only n/2+1 characters, then the Hamming distance is n/2+1, and then the edit distance is at least n/2+1, which is > n/2. So that would also work. But why would we do that? The complement is straightforward.

   Therefore, we'll output the complement.

   Final solution:

        Read the binary string S.
        Construct T by flipping each bit.
        Output T.

   This runs in O(n) time and uses O(n) space, which is acceptable for n up to 2000.

   Let me write the editorial accordingly.

Editorial:

## Problem Analysis

The problem requires us to find a binary string \( T \) of the same length as the given string \( S \) such that the edit distance between \( S \) and \( T \) is greater than \( |S|/2 \). The edit distance (Levenshtein distance) is the minimum number of single-character operations (insertions, deletions, or substitutions) required to transform \( S \) into \( T \).

### Key Insight
A crucial observation is that the bitwise complement of \( S \) (i.e., flipping every bit of \( S \)) yields a string \( T \) such that the edit distance between \( S \) and \( T \) is exactly \( |S| \). This is because every character in \( S \) differs from the corresponding character in \( T \). Therefore, at least \( |S| \) operations are needed (each mismatch must be fixed, and each substitution fixes exactly one mismatch). Since \( |S| > |S|/2 \) for any \( |S| \geq 1 \), the complement of \( S \) satisfies the condition.

### Why the Complement Works
- **Hamming Distance**: The Hamming distance between \( S \) and its complement \( T \) is \( |S| \), because every bit is flipped.
- **Edit Distance Lower Bound**: The edit distance is always at least the Hamming distance for two strings of the same length. Therefore, \( edit(S, T) \geq |S| \).
- **Achieving the Lower Bound**: We can transform \( S \) into \( T \) by substituting every character, which takes exactly \( |S| \) operations. Hence, \( edit(S, T) = |S| \).
- **Satisfying the Condition**: Since \( |S| > |S|/2 \) (for \( |S| \geq 1 \)), the complement \( T \) is a valid solution.

### Algorithm Selection
The algorithm is straightforward:
1. Read the input string \( S \).
2. For each character in \( S \), flip '0' to '1' and '1' to '0' to form \( T \).
3. Output \( T \).

### Complexity
- **Time Complexity**: \( O(n) \), where \( n \) is the length of \( S \). We process each character exactly once.
- **Space Complexity**: \( O(n) \), to store the output string \( T \). This is optimal as we must output a string of length \( n \).

### Correctness
The solution is correct for any binary string \( S \) of length at least 1:
- The output \( T \) has the same length as \( S \).
- The edit distance \( edit(S, T) = |S| \), which is strictly greater than \( |S|/2 \).

### Alternative Solutions
While the complement is an optimal solution (maximizing the edit distance), any binary string \( T \) with a Hamming distance greater than \( |S|/2 \) would also work. However, the complement is simple to construct and meets the requirement optimally.

## Solution Code
```python
s = input().strip()
t = ''.join('1' if c == '0' else '0' for c in s)
print(t)
```

## Sample Cases
1. **Input**: "0011"  
   **Output**: "1100"  
   **Explanation**: The edit distance between "0011" and "1100" is 4, which is greater than 4/2 = 2.

2. **Input**: "1100101"  
   **Output**: "0011010"  
   **Explanation**: The edit distance between "1100101" and "0011010" is 7, which is greater than 7/2 = 3.5.

This approach efficiently solves the problem by leveraging the properties of the bitwise complement to guarantee the edit distance condition.