To solve this problem, we need to ensure that all cells in a grid can be visited regardless of the starting position, with the minimum number of changes from icy land ('.') to dry land ('#'). The key insight is that to visit all cells, every row and every column must have at least one dry land cell. This is because dry land cells are necessary to stop sliding and visit cells, especially in rows or columns that initially lack any dry land.

### Approach
1. **Identify Empty Rows and Columns**: 
   - Scan the grid to determine which rows and columns do not contain any dry land ('#'). These are termed "empty" rows and columns.
   
2. **Bipartite Graph Construction**:
   - Construct a bipartite graph where:
     - Left nodes represent empty rows.
     - Right nodes represent empty columns.
     - An edge exists between an empty row and an empty column if the corresponding cell in the grid is icy ('.').

3. **Maximum Bipartite Matching**:
   - Use the Hopcroft-Karp algorithm to find the maximum matching in this bipartite graph. The size of the matching indicates the number of cells that can be converted to dry land to cover both an empty row and an empty column simultaneously.

4. **Result Calculation**:
   - The minimum number of changes required is the total number of empty rows plus the total number of empty columns minus the size of the maximum matching. This accounts for changes that cover both an empty row and an empty column in one step, and the remaining changes for uncovered rows or columns.

### Solution Code
```python
import sys
from collections import deque

def main():
    data = sys.stdin.read().splitlines()
    if not data:
        return
    R, C = map(int, data[0].split())
    grid = []
    for i in range(1, 1+R):
        grid.append(data[i].strip())
    
    rowEmpty = [True] * R
    colEmpty = [True] * C

    for i in range(R):
        for j in range(C):
            if grid[i][j] == '#':
                rowEmpty[i] = False
                colEmpty[j] = False

    emptyRows = [i for i in range(R) if rowEmpty[i]]
    emptyCols = [j for j in range(C) if colEmpty[j]]
    
    A = len(emptyRows)
    B = len(emptyCols)
    
    if A == 0 and B == 0:
        print(0)
        return
        
    graph0 = [[] for _ in range(A)]
    for i in range(A):
        r = emptyRows[i]
        for j in range(B):
            c = emptyCols[j]
            if grid[r][c] == '.':
                graph0[i].append(j)
    
    if A == 0 or B == 0:
        print(A + B)
        return

    matchL = [-1] * A
    matchR = [-1] * B
    dist = [-1] * A
    matching_count = 0

    def bfs():
        nonlocal dist
        queue = deque()
        for i in range(A):
            if matchL[i] == -1:
                dist[i] = 0
                queue.append(i)
            else:
                dist[i] = -1
        found = False
        while queue:
            u = queue.popleft()
            for v in graph0[u]:
                u_next = matchR[v]
                if u_next == -1:
                    found = True
                elif u_next != -1 and dist[u_next] == -1:
                    dist[u_next] = dist[u] + 1
                    queue.append(u_next)
        return found

    def dfs(u):
        for v in graph0[u]:
            u_next = matchR[v]
            if u_next == -1:
                matchR[v] = u
                matchL[u] = v
                return True
            if dist[u_next] == dist[u] + 1:
                if dfs(u_next):
                    matchR[v] = u
                    matchL[u] = v
                    return True
        return False

    while bfs():
        for u in range(A):
            if matchL[u] == -1:
                if dfs(u):
                    matching_count += 1
                    
    ans = A + B - matching_count
    print(ans)

if __name__ == "__main__":
    main()
```

### Explanation
1. **Reading Input**: The input is read and parsed into the grid dimensions and the grid itself.
2. **Identifying Empty Rows and Columns**: The grid is scanned to determine which rows and columns lack any dry land ('#'). These are stored in `emptyRows` and `emptyCols`.
3. **Graph Construction**: A bipartite graph is constructed where edges connect empty rows to empty columns if their intersection in the grid is an icy land ('.').
4. **Hopcroft-Karp Algorithm**: 
   - **BFS (Breadth-First Search)**: Used to build layers for the alternating tree in the bipartite graph, starting from free left nodes (empty rows).
   - **DFS (Depth-First Search)**: Explores augmenting paths in the layered graph to increase the matching count.
5. **Result Calculation**: The result is computed as the sum of empty rows and columns minus the size of the maximum matching, ensuring the minimum number of changes needed to cover all empty rows and columns.

This approach efficiently minimizes the number of changes by leveraging bipartite graph matching, ensuring optimal coverage of empty rows and columns with the least conversions from icy to dry land.