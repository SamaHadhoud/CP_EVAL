### Approach
The problem requires finding a binary string \( T \) of the same length as the given string \( S \) such that the edit distance between \( S \) and \( T \) is greater than half the length of \( S \). The key insight is that the bitwise complement of \( S \) (flipping each bit) ensures that every character in \( S \) differs from the corresponding character in \( T \). This results in the edit distance being exactly the length of \( S \), which is always greater than half the length of \( S \) for any non-empty string.

### Solution Code
```python
s = input().strip()
t = ''.join('1' if c == '0' else '0' for c in s)
print(t)
```

### Explanation
1. **Reading Input**: The input binary string \( S \) is read from standard input.
2. **Constructing Complement**: For each character in \( S \), if the character is '0', it is replaced with '1' in \( T \), and if it is '1', it is replaced with '0'. This creates the bitwise complement of \( S \).
3. **Output**: The resulting string \( T \) is printed, which is the complement of \( S \).

The edit distance between \( S \) and \( T \) (its complement) is exactly the length of \( S \), since every character must be substituted. This distance is always greater than half the length of \( S \), satisfying the problem condition efficiently with \( O(n) \) time and space complexity.