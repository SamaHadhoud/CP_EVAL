To solve this problem, we need to find a binary string \( T \) of the same length as the given binary string \( S \) such that the edit distance between \( S \) and \( T \) is greater than half the length of \( S \). The edit distance is defined as the minimum number of single-character operations (insert, delete, or substitute) required to transform \( S \) into \( T \).

### Approach
The key insight here is that the bitwise complement of \( S \) (i.e., flipping each bit in \( S \)) will always yield a string \( T \) where every character in \( S \) differs from the corresponding character in \( T \). This ensures that the edit distance between \( S \) and \( T \) is exactly the length of \( S \), because each character must be substituted to transform \( S \) into \( T \). Since the length of \( S \) (denoted as \( n \)) is always greater than \( n/2 \) for any \( n \geq 1 \), this approach satisfies the problem condition.

### Solution Code
```python
s = input().strip()
t = ''.join('1' if c == '0' else '0' for c in s)
print(t)
```

### Explanation
1. **Reading Input**: The input binary string \( S \) is read from standard input.
2. **Constructing Complement**: For each character in \( S \), if the character is '0', it is replaced with '1' in \( T \), and if it is '1', it is replaced with '0'. This creates the bitwise complement of \( S \).
3. **Output**: The resulting string \( T \) is printed, which is the complement of \( S \).

The edit distance between \( S \) and its complement \( T \) is exactly \( n \) (the length of \( S \)), because every character must be substituted. This distance \( n \) is always greater than \( n/2 \), satisfying the problem's requirement efficiently with \( O(n) \) time and space complexity. 

This approach is optimal as it leverages a straightforward transformation (bitwise complement) to meet the problem constraints, ensuring correctness and efficiency.