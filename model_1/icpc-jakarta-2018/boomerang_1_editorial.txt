### Problem Analysis
The problem involves finding the maximum number of edge-disjoint boomerangs in an undirected graph. A boomerang is defined as a triple \(\langle u, v, w \rangle\) where the edges \((u, v)\) and \((v, w)\) exist in the graph and \(u \neq w\). The boomerangs are disjoint if no edge is shared between any two boomerangs. The goal is to maximize the number of such boomerangs.

#### Key Insight
Each boomerang uses two distinct edges incident to a common vertex (the center \(v\)). The problem reduces to packing as many edge-disjoint two-edge stars (centered at any vertex) as possible. The maximum number of boomerangs is at most \(\lfloor M/2 \rfloor\) since each boomerang uses two edges. The greedy approach of repeatedly forming boomerangs at vertices with at least two available edges ensures optimality because the remaining graph (with no vertex of degree 2 or more) cannot form any more boomerangs.

### Algorithmic Approach
1. **Graph Representation**: Represent the graph using adjacency sets for efficient edge removal.
2. **Queue Initialization**: Use a queue to process vertices with at least two available edges. Track which vertices are in the queue to avoid duplicates.
3. **Greedy Processing**: While the queue is not empty:
   - Dequeue a vertex \(v\).
   - If \(v\) has fewer than two edges, skip.
   - Remove two distinct edges \((v, a)\) and \((v, b)\) from \(v\)'s adjacency set and remove \(v\) from the adjacency sets of \(a\) and \(b\).
   - Record the boomerang \((a, v, b)\).
   - Enqueue \(a\), \(b\), and \(v\) if their updated degrees are at least two and they are not already in the queue.
4. **Output**: Print the number of boomerangs followed by each boomerang.

### Complexity Analysis
- **Time Complexity**: \(O(M \log N)\) due to set operations (each edge is removed once from two sets, and set operations take \(O(\log N)\) on average).
- **Space Complexity**: \(O(M + N)\) for storing the graph and auxiliary data structures.

### Solution Code
```cpp
#include <iostream>
#include <vector>
#include <queue>
#include <unordered_set>
#include <tuple>
using namespace std;

const int N = 100010;
unordered_set<int> g[N];
bool inQ[N];

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);

    int n, m;
    cin >> n >> m;
    for (int i = 0; i < m; i++) {
        int u, v;
        cin >> u >> v;
        g[u].insert(v);
        g[v].insert(u);
    }

    queue<int> q;
    vector<tuple<int, int, int>> ans;

    for (int i = 1; i <= n; i++) {
        if (g[i].size() >= 2) {
            q.push(i);
            inQ[i] = true;
        }
    }

    while (!q.empty()) {
        int v = q.front(); q.pop();
        inQ[v] = false;

        if (g[v].size() < 2) continue;

        int a = *g[v].begin();
        g[v].erase(a);
        g[a].erase(v);

        int b = *g[v].begin();
        g[v].erase(b);
        g[b].erase(v);

        ans.push_back(make_tuple(a, v, b));

        vector<int> candidates = {a, b, v};
        for (int u : candidates) {
            if (g[u].size() >= 2 && !inQ[u]) {
                inQ[u] = true;
                q.push(u);
            }
        }
    }

    cout << ans.size() << "\n";
    for (auto tpl : ans) {
        cout << get<0>(tpl) << " " << get<1>(tpl) << " " << get<2>(tpl) << "\n";
    }
}
```

### Explanation
1. **Graph Representation**: The graph is stored using adjacency sets (`g`), allowing efficient edge insertion and removal.
2. **Queue Initialization**: Vertices with at least two edges are enqueued for processing.
3. **Processing Loop**:
   - For each vertex \(v\) dequeued, if it still has at least two edges, two neighbors \(a\) and \(b\) are selected.
   - The edges \((v, a)\) and \((v, b)\) are removed from the graph.
   - The boomerang \((a, v, b)\) is recorded.
   - The vertices \(a\), \(b\), and \(v\) are re-enqueued if their updated degrees are at least two and they are not in the queue.
4. **Output**: The number of boomerangs and the boomerangs themselves are printed.

This approach ensures that the maximum number of edge-disjoint boomerangs is found efficiently by leveraging greedy selection and set operations for optimal edge management. The solution handles all edge cases, including graphs where no boomerangs can be formed (e.g., disjoint edges).