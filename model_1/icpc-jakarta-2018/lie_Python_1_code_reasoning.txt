 We are going to process the lie detectors from the last (which is always truthful) backwards to the first.
 Steps:
 1. We know the last detector (index N-1) is truthful. We'll denote the truthfulness of each detector as we go backwards.
 2. We traverse from the second last detector (index N-2) down to the first (index 0).
    At step i, we know the truthfulness of the next detector (i+1) and what that next detector reported about detector i.
    Specifically, the next detector (at i+1) reported either "TRUTH" or "LIE" for the detector i.

    How to interpret the report?
    Let:
        current_truth = the truthfulness of detector i (what we are about to compute)
        next_truth = the truthfulness of detector i+1 (which we have from the previous step)
        report = the string at position i+1 (which is the report of detector i+1 about detector i)

    But note: the report from detector i+1 about detector i is stored in s_list[i+1]. 
    Actually, the input order:
        s_list[0] is the report of detector 1 (about the eyewitness)
        s_list[1] is the report of detector 2 (about detector 1)
        ... 
        s_list[i] is the report of detector (i+1) about detector i? 
        Actually, the problem says: the next N lines: the i-th line (starting from 1) is the output of the i-th lie detector.

    However, note the chain:
        Detector 1: reports on eyewitness -> stored in s_list[0]
        Detector 2: reports on detector 1 -> stored in s_list[1]
        ...
        Detector i: reports on detector i-1 -> stored in s_list[i-1]?
    But the problem says: the next N lines, each for the i-th lie detector (i=1..N). So the first line after N is for the first detector.

    Actually, the problem: 
        The 1st detector reports the eyewitness -> stored in the first string (index0)
        The 2nd detector reports the 1st detector -> stored in the second string (index1)
        The 3rd detector reports the 2nd detector -> stored in the third string (index2)
        ... 
        The i-th detector: reports the (i-1)-th detector -> stored in the (i-1) index? 

    But note: we have N detectors, and the input gives N lines. The first line is the first detector's report (about the eyewitness), 
    the second line is the second detector's report (about the first), and so on until the N-th line which is the N-th detector's report (about the (N-1)-th detector).

    Therefore, the array `s_list` of size N:
        s_list[0] -> report of detector1: about the eyewitness
        s_list[1] -> report of detector2: about detector1
        s_list[2] -> report of detector3: about detector2
        ...
        s_list[i] -> report of detector (i+1): about detector i
        ...
        s_list[N-1] -> report of detector N: about detector (N-1)

    Now, we are going backwards. We know the last detector (detector N) is truthful. 
    How do we use the report of detector N? It is stored in s_list[N-1] and it is about detector (N-1).

    We'll maintain a variable `current` which represents the truthfulness of the detector that was just processed (starting with the last, which is truthful).

    Then, for the detector i (from N-2 down to 0), we look at the report from the next detector (which is at index i+1 in the array) about the current detector (i).

    However, note: the report at index i+1 is the report of detector (i+2) about detector (i+1)? 

    Actually, we need to reassign indices:

        We have detectors: 1,2,...,N.
        Their reports are stored in s_list[0] to s_list[N-1].

        The report about detector i (for i from 0 to N-2) is given by detector i+1, and that report is stored in s_list[i+1]?

        But wait: 
            Detector i+1 reports on detector i -> that report is stored in s_list[i]? 

        Actually, according to the input:
            The first detector (detector1) is at index0: it reports on the eyewitness (which we can think of as detector0?).
            The second detector (detector2) is at index1: it reports on detector1 (which is the first detector).

        So, the report about detector i (where i is the detector number starting at 1) is stored in s_list[i] (0-indexed) from the next detector (detector i+1).

        However, we are going backwards from the last detector (detector N) which is at index N-1. 
        The last detector (N) is truthful, and it reported on detector N-1. The report is stored in s_list[N-1].

        Then we want to know the truthfulness of detector N-1. How?
            If the last detector (truthful) says "TRUTH", then detector N-1 is truthful. 
            If it says "LIE", then detector N-1 is lying.

        Then we move to detector N-2: 
            The report about detector N-2 is given by detector N-1 (which we just determined) and that report is stored in s_list[N-2]? 
            But wait: the report about detector i is stored in s_list[i]? Actually, no.

        Let me re-index the detectors by their index in the array for the report about the previous one.

        Actually, the report of the (i+1)-th detector (which is the detector at index i in the array of reports) is about the i-th detector? 
        But the first detector (index0) reports about the eyewitness, so we don't have a report about the eyewitness from a detector? 

        We are modeling the truthfulness of each detector and then the eyewitness.

        We have:
            Detector1: truthfulness T1, report R1 (about the eyewitness) -> stored in s_list[0]
            Detector2: truthfulness T2, report R2 (about detector1) -> stored in s_list[1]
            ...
            Detector i: truthfulness Ti, report Ri (about detector i-1) -> stored in s_list[i-1]? 

        Actually, the problem says: the i-th lie detector's output is given in the next N lines for i=1..N.

        And the i-th lie detector reports about the (i-1)-th lie detector? But for i=1, it reports the eyewitness.

        Therefore, the report about detector i is actually stored in the (i+1)-th lie detector's output? 

        However, the array we have is:
            s_list[0] = report of detector1 (about the eyewitness)
            s_list[1] = report of detector2 (about detector1)
            s_list[2] = report of detector3 (about detector2)
            ...
            s_list[i] = report of detector (i+1) (about detector i)

        So, the report about detector i is stored at s_list[i] (0-indexed) and it comes from detector (i+1).

        Now, we know that the last detector (detector N) is truthful. Its report is stored at s_list[N-1] and is about detector (N-1).

        We want to know the truthfulness of detector (N-1). Let T_{N} = True (truthful).
        The report R_{N} = s_list[N-1] is either "TRUTH" or "LIE". 
        If R_{N} is "TRUTH", then detector (N-1) is truthful (because detector N is truthful and says so).
        If R_{N} is "LIE", then detector (N-1) is lying.

        So: T_{N-1} = (R_{N} == "TRUTH")   [because if the truthful detector says "TRUTH", then it's true; if it says "LIE", then it's false]

        Then for detector (N-2): 
            We have the report from detector (N-1) (which has truthfulness T_{N-1}) about detector (N-2). That report is stored at s_list[N-2].

            How to compute T_{N-2}?
            The report R_{N-1} = s_list[N-2] is either "TRUTH" or "LIE". 
            But note: if detector (N-1) is truthful, then R_{N-1} is the truth about detector (N-2): T_{N-2} = (R_{N-1} == "TRUTH")
            If detector (N-1) is lying, then R_{N-1} is the opposite: T_{N-2} = (R_{N-1} == "LIE")   [because if it lies, then the truth is the opposite]

            Alternatively, we can write: 
                T_{N-2} = (T_{N-1} == (R_{N-1} == "TRUTH"))

            Why? Because if T_{N-1} is true, then T_{N-2} is (R_{N-1} is "TRUTH") -> which is the same as (R_{N-1} == "TRUTH")
            If T_{N-1} is false, then T_{N-2} is not (R_{N-1} == "TRUTH") -> which is the same as (R_{N-1} == "LIE")

            But note: we can express it as:
                T_{N-2} = (R_{N-1} == "TRUTH") if T_{N-1} is true, else not (R_{N-1} == "TRUTH")

            This is equivalent to: T_{N-2} = T_{N-1} == (R_{N-1} == "TRUTH")

            Because:
                If T_{N-1} is true: then T_{N-2} = (true == X) = X, where X = (R_{N-1}=="TRUTH")
                If T_{N-1} is false: then T_{N-2} = (false == X) = not X.

        So the recurrence is:
            Let current = truthfulness of the next detector (which we have from the previous step, starting from the last which is True).
            Then for the current detector i (from N-2 down to 0), we have:
                report = s_list[i+1]   ??? 

        But note: the report about detector i is stored in s_list[i]? Actually, for detector i (0-indexed, meaning the (i+1)-th detector) we are going to look at the report from the next detector about it.

        However, when we are at detector i (0-indexed, meaning the (i+1)-th detector in the chain) we don't have a direct report for it? 

        Actually, we are going backwards from the last detector (which is at position N-1) and we are going to the first detector (at position0). 

        But the report about detector i (the i-th in the array, which is the (i+1)-th detector) is stored at s_list[i]? 
        However, that report is from the next detector (i+2) which we haven't processed? 

        Let's reframe: we are processing the detectors from last to first. We start at the last detector (index N-1) which we know is truthful. 
        Then we move to the second last (index N-2). How do we get the report about the second last? 
            It is the report of the last detector (which we have) and that report is stored at s_list[N-1]? 
            But wait: the report about the second last (detector N-1) is stored at s_list[N-1]? Actually, the report stored at s_list[N-1] is the report of the last detector (detector N) about the (N-1)-th detector.

        Then for the next one: the (N-2)-th detector: 
            The report about it is from the next detector (which is the (N-1)-th) and that report is stored at s_list[N-2]? 

        Why? Because the (N-1)-th detector's report is about the (N-2)-th detector, and that report is the (N-1)-th line of the input -> which is the (N-1)-th element in s_list (0-indexed: index N-2).

        Therefore, the report for detector i (0-indexed) is stored in s_list[i]? Actually, no: 
            The report about the eyewitness is from the first detector -> stored at s_list[0] (which is the first report).
            The report about the first detector is from the second detector -> stored at s_list[1] (the second report).
            The report about the i-th detector (0-indexed) is stored at s_list[i+1]? 

        But note: 
            We have detectors: 
                detector1 (index0): reports about the eyewitness -> stored at s_list[0]
                detector2 (index1): reports about detector1 -> stored at s_list[1]
                detector3 (index2): reports about detector2 -> stored at s_list[2]
                ...
                detectorN (index N-1): reports about detector (N-1) -> stored at s_list[N-1]

        So the report about the eyewitness is at s_list[0] (from detector1) but we don't have a report about detector0 (because the eyewitness isn't a detector). 

        How about the truthfulness of the detectors?
            We start with the last detector (index N-1) and we know it's truthful.

            Then for detector (N-2) (which is the second last, at index N-2): 
                The report about it is given by the next detector (detector N, which is at index N-1) and that report is stored at s_list[N-1]? 
                But wait: the report stored at s_list[N-1] is the report of detector N about detector (N-1) (which is the last detector reporting about the second last? but the second last is at index N-2). 

        Actually, the report stored at index j in the array is the report of the (j+1)-th detector about the j-th detector? 
        But the j-th detector is the one at index j. 

        Therefore, the report about the detector at index i (which is the (i+1)-th detector) is stored at s_list[i]? 
        Actually, no: the report stored at s_list[i] is the report of the (i+1)-th detector about the i-th detector? 

        But note: 
            i=0: s_list[0] is the report of detector1 (which is the first detector) about the eyewitness (which we can think of as the 0-th entity).

        Now, we are going backwards for the detectors (the devices) only. We have:

            We know the truthfulness of the detector at index N-1 (the last detector) is True.

            Then, the report stored at s_list[N-1] is the report of the last detector about the (N-1)-th entity? But the last detector reports about the (N-1)-th detector (which is the one at index N-2). 

            Therefore, to get the truthfulness of the detector at index N-2, we use:
                truthfulness of detector N-2 = (if the last detector is truthful then the report is true) 
                i.e., if the report at s_list[N-1] is "TRUTH", then the detector N-2 is truthful; if "LIE", then lying.

            Then, for the detector at index N-3: 
                The report about it is stored at s_list[N-2]? Why? Because the detector at index N-1 (which we just processed) is the one that reports about the detector at index N-2, but wait: 
                Actually, the detector at index N-1 (which is the (N)-th detector) reports about the detector at index N-2? 
                But the report from the detector at index N-1 is stored at s_list[N-1] (about the detector at index N-2). 

            How do we get the report about the detector at index N-3? 
                The detector at index N-2 (the one we are about to process) is the one that reports about the detector at index N-3? 
                And that report is stored at s_list[N-2]? 

            Actually, the report stored at s_list[i] is the report from the detector at index i (which is the (i+1)-th detector) about the entity at index i-1? 

            Let me clarify the chain of reporting:

                Eyewitness (we can call it entity0) 
                -> reported by detector1 (index0) -> stored at s_list[0] (which is about entity0)

                Then, detector1 (entity1) 
                -> reported by detector2 (index1) -> stored at s_list[1] (about entity1: which is detector1)

                Then, detector2 (entity2)
                -> reported by detector3 (index2) -> stored at s_list[2] (about entity2: which is detector2)

                ...

                Then, detector (N-1) (entity N-1)
                -> reported by detectorN (index N-1) -> stored at s_list[N-1] (about entity N-1: which is detector N-1)

            So the report about the detector at index i (which is the (i+1)-th detector) is stored at s_list[i+1]? 

            Actually, the report about the detector at index i is stored at s_list[i+1]? 

            Because the detector at index i is the (i+1)-th detector, and the report about it comes from the next detector (detector i+2, which is stored at index i+1) and that report is stored at s_list[i+1].

            Therefore, when we are processing the detector at index i (0-indexed, meaning the (i+1)-th detector), the report about it is stored at s_list[i+1] (if i+1 < N).

        But wait: for the last detector (index N-1), there is no next report? We don't have s_list[N] because we only have N strings.

        Actually, we are going backwards from the last detector (index N-1) and we know it's truthful. Then we want to know the truthfulness of the detector at index N-2: 
            The report about it is stored at s_list[N-1]? 

        According to the above: 
            The detector at index N-2 is the (N-1)-th detector. The report about it is from the next detector (the N-th detector, which is at index N-1) and that report is stored at s_list[N-1]? 

        But the storage: 
            s_list[N-1] is the report of the N-th detector (which is the last) about the (N-1)-th detector (which is at index N-2).

        So the array index for the report about a detector i (0-indexed) is at s_list[i+1]? 

        Therefore, we have:
            Let current_truth = the truthfulness of the next detector (the one we just processed, starting from the last which is index N-1, and we set current_truth = True for the last).
            Then for detector i (from N-2 down to 0) we do:
                report_str = s_list[i+1]   # because the report about detector i is from the next detector (i+1) and stored at s_list[i+1]
                R = (report_str == "TRUTH")
                Then the truthfulness of detector i is: current_truth = (current_truth == R)

            But note: the recurrence we established earlier: 
                T_{i} = (T_{i+1} == (report_{i+1} == "TRUTH"))

            So we can do:
                current_truth = (current_truth == (report_str == "TRUTH"))

            However, we can also note: 
                current_truth = (current_truth == R)   [where R = (report_str=="TRUTH")]

        Then, after processing backwards to the first detector (i=0), we have the truthfulness of the first detector (current_truth).

        Then, the first detector reported about the eyewitness: that report is stored at s_list[0]. 
        Let R0 = (s_list[0] == "TRUTH")

        Now, if the first detector is truthful (current_truth is True), then the eyewitness testimony is R0.
        If the first detector is lying (current_truth is False), then the eyewitness testimony is the opposite of R0.

        How to compute the eyewitness testimony?
            result = current_truth == R0   ??? 
            But if the first detector is truthful, then we want R0 to be the truth -> then result = R0? 
            Actually, we have:
                If current_truth is True: then the eyewitness testimony is R0 (if R0 is True then "TRUTH", if False then "LIE")
                If current_truth is False: then the eyewitness testimony is not R0.

            Alternatively: 
                result = (R0 if current_truth is True else not R0)

            But we can write: 
                result = current_truth == R0   does not give that.

            Example: 
                current_truth = True, R0 = True -> result = True -> correct.
                current_truth = True, R0 = False -> result = False -> correct.
                current_truth = False, R0 = True -> result = False -> which means the eyewitness is lying? 
                    But if the first detector is lying and it reported "TRUTH" (R0=True) then the truth is that the eyewitness is lying -> so False -> correct.
                current_truth = False, R0 = False -> result = True -> correct: because if the detector is lying and reported "LIE" (False) then the truth is the opposite -> True.

            Actually, we see: 
                result = (current_truth == R0) 
                is the same as: 
                    if current_truth is True: then result = R0
                    if current_truth is False: then result = not R0

            But wait: 
                (current_truth == R0) is the same as (current_truth and R0) or (not current_truth and not R0) 
                which is the same as: 
                    if current_truth is True: then R0
                    if current_truth is False: then not R0

            So we can do: 
                result = (current_truth == R0)

        However, note: 
            We have R0 = (s_list[0]=="TRUTH")
            Then result = (current_truth == R0) is a boolean that we then map to "TRUTH" if True, "LIE" if False.

        But wait: 
            In the example: 
                Input: 
                    4
                    LIE
                    LIE
                    TRUTH
                    TRUTH

                We start at the last detector: current_truth = True (for the last detector, index3).
                Then we go to i=2 (which is the third detector, index2) -> 
                    report_str = s_list[3] -> "TRUTH" -> R = True.
                    Then current_truth = (True == True) = True.

                Then i=1: 
                    report_str = s_list[2] -> "TRUTH" -> R = True.
                    current_truth = (True == True) = True.

                Then i=0: 
                    report_str = s_list[1] -> "LIE" -> R = False.
                    current_truth = (True == False) = False.

                Now, we have the truthfulness of the first detector (index0) is False (lying).
                Then R0 = (s_list[0] == "TRUTH") -> "LIE" -> False.
                Then result = (False == False) = True -> "TRUTH".  Correct.

        Another sample: 
            Input: 
                3
                LIE
                LIE
                LIE

            Steps:
                current_truth = True (for the last detector, index2).
                i=1: 
                    report_str = s_list[2] = "LIE" -> R = False.
                    current_truth = (True == False) = False.
                i=0:
                    report_str = s_list[1] = "LIE" -> R = False.
                    current_truth = (False == False) = True.
                Then R0 = (s_list[0] == "TRUTH") -> "LIE" -> False.
                result = (True == False) = False -> "LIE". Correct.

        Therefore, the algorithm:

            current = True   # for the last detector (index N-1) is truthful
            # we traverse backwards from the second last (index N-2) to the first detector (index0)
            for i from (N-2) down to 0 (inclusive):
                report_str = s_list[i+1]   # because the report about the current detector (which is the i-th detector) is stored at the next index (i+1)
                R = (report_str == "TRUTH")
                current = (current == R)

            Then, for the eyewitness:
                R0 = (s_list[0] == "TRUTH")
                result = (current == R0)
                Then print "TRUTH" if result is True, else "LIE"

        However, note: the report about the first detector (index0) is stored at s_list[1]? And we use that in the loop for i=0: 
            i=0: we use s_list[0+1] = s_list[1] -> which is the report of the second detector about the first.

        And then after the loop, we use s_list[0] to get the report of the first detector about the eyewitness.

        This matches.

        But note: the last detector (index N-1) is used as the starting point. Then we process the reports for the detectors from index N-2 down to 0.

        The array s_list has indexes 0 to N-1.

        We use:
            s_list[1] to s_list[N-1] in the loop.

        And then s_list[0] at the end.

        So we use all the input.

 Implementation:

        Read N
        Read the next N lines into a list `s_list`

        current = True
        for i in range(N-2, -1, -1):   # i from N-2 down to 0
            report_str = s_list[i+1]   # because we are at detector i, and the report about it is from the next detector (i+1) and stored at index i+1
            R = (report_str == "TRUTH")
            current = (current == R)

        R0 = (s_list[0] == "TRUTH")
        result = (current == R0)

        Then output.

        Let's test with the examples.

        Example 1: N=4, s_list = ["LIE", "LIE", "TRUTH", "TRUTH"]
            current = True (for the last detector, index3)
            i=2: report_str = s_list[3] = "TRUTH" -> R=True -> current = True==True -> True.
            i=1: report_str = s_list[2] = "TRUTH" -> R=True -> current = True==True -> True.
            i=0: report_str = s_list[1] = "LIE" -> R=False -> current = True==False -> False.
            R0 = (s_list[0]=="TRUTH")? s_list[0] is "LIE" -> False.
            result = (False == False) -> True -> "TRUTH"

        Example 2: N=3, s_list = ["LIE","LIE","LIE"]
            current = True
            i=1: report_str = s_list[2]="LIE" -> R=False -> current = True==False -> False.
            i=0: report_str = s_list[1]="LIE" -> R=False -> current = False==False -> True.
            R0 = (s_list[0]=="TRUTH")? "LIE" -> False.
            result = True==False -> False -> "LIE"

        So it matches.

        Code:

        Steps:
            Read N
            s_list = []
            for i in range(N):
                s_list.append(input().strip())

            current = True
            for i in range(N-2, -1, -1):
                s = s_list[i+1]
                R = (s == "TRUTH")
                current = (current == R)

            R0 = (s_list[0] == "TRUTH")
            result = (current == R0)

            if result:
                print("TRUTH")
            else:
                print("LIE")

        We'll code accordingly.

        Note: We are using the list indices as described.

        Time complexity: O(N) and space O(N) to store the list.

        Since N can be up to 100000, this is acceptable.

        Let's write the code accordingly.