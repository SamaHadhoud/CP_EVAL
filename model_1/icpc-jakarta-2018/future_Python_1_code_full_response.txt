To solve this problem, we need to select a subsequence from each given string such that each subsequent subsequence is lexicographically larger than the previous one, and the total length of these subsequences is maximized. If no such sequence exists, we should return -1.

### Approach
1. **Problem Analysis**: The problem involves selecting subsequences from each string such that each subsequence is lexicographically larger than the one from the previous string. The goal is to maximize the sum of the lengths of these subsequences.
2. **Key Insight**: For each string, we generate all distinct non-empty subsequences. Given the constraints (strings up to length 15), this is feasible since the maximum number of distinct subsequences per string is \(2^{15} = 32768\).
3. **Dynamic Programming (DP)**: We use a DP approach where `dp[i][j]` represents the maximum total length achievable for the first \(i+1\) children, ending with the \(j\)-th subsequence of the \(i\)-th string. The transition involves finding the best valid subsequence from the previous string that is lexicographically smaller than the current subsequence.
4. **Efficiency Optimization**: 
   - **Precomputation**: For each string, precompute all distinct non-empty subsequences and sort them lexicographically.
   - **Prefix Maximum Array**: For each string, after sorting the subsequences, use a two-pointer technique to efficiently find the best DP value from the previous string's subsequences that are lexicographically smaller than the current subsequence.

### Solution Code
```python
import sys

def main():
    data = sys.stdin.read().splitlines()
    if not data:
        return
    N = int(data[0].strip())
    S = []
    for i in range(1, 1 + N):
        S.append(data[i].strip())
    
    A_list = []
    for s in S:
        n = len(s)
        seen = set()
        for mask in range(1, 1 << n):
            substr = []
            for j in range(n):
                if mask & (1 << j):
                    substr.append(s[j])
            t = ''.join(substr)
            seen.add(t)
        sorted_seen = sorted(seen)
        A_list.append(sorted_seen)
    
    if N == 0:
        print(0)
        return
        
    dp_prev = [len(subseq) for subseq in A_list[0]]
    
    for i in range(1, N):
        prev_A = A_list[i-1]
        current_A = A_list[i]
        j = 0
        best_so_far = -10**9
        current_dp = [-10**9] * len(current_A)
        
        for idx in range(len(current_A)):
            s = current_A[idx]
            while j < len(prev_A) and prev_A[j] < s:
                if dp_prev[j] > best_so_far:
                    best_so_far = dp_prev[j]
                j += 1
            
            if best_so_far != -10**9:
                current_dp[idx] = best_so_far + len(s)
        
        dp_prev = current_dp
        
    ans = max(dp_prev) if dp_prev else -10**9
    if ans < 0:
        print(-1)
    else:
        print(ans)

if __name__ == "__main__":
    main()
```

### Explanation
1. **Reading Input**: The input is read and parsed into the number of children \(N\) and the list of strings \(S\).
2. **Subsequence Generation**: For each string in \(S\), all distinct non-empty subsequences are generated using bitmasking. These subsequences are stored in a sorted list for each string.
3. **Initialization**: For the first string, the DP array is initialized with the lengths of each subsequence.
4. **DP Processing**:
   - For each subsequent string, a two-pointer technique is used to traverse the sorted list of subsequences from the previous string and the current string.
   - For each subsequence in the current string, the algorithm finds all subsequences in the previous string that are lexicographically smaller and keeps track of the maximum DP value from those subsequences.
   - The current DP state is updated as the best value from the previous string plus the length of the current subsequence.
5. **Result Extraction**: After processing all children, the maximum value in the final DP array is checked. If it is negative, no valid sequence exists, and -1 is printed. Otherwise, the maximum total length is printed.

This approach efficiently handles the constraints by leveraging dynamic programming and optimized lookups with a two-pointer technique, ensuring optimal performance for the given problem limits.