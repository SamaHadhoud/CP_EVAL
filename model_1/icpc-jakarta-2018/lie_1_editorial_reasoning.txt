We are given an integer N (number of lie detectors) and then N lines of strings, each being either "TRUTH" or "LIE".

The setup:
- The last (Nth) lie detector is always correct (truthful).
- The ith lie detector (for i from 1 to N-1) reports the truth of the (i-1)th lie detector? Actually, the problem states:
    - The first lie detector reports on the eyewitness testimony.
    - The second lie detector reports on the first lie detector, and so on.

But note: the problem says "the i-th lie detector reports the truth of the (i-1)th lie detector for i = 2..N", and the first one reports the eyewitness.

So we have:
  Detector 1: reports on the eyewitness testimony.
  Detector 2: reports on the correctness of detector 1.
  Detector 3: reports on the correctness of detector 2.
  ...
  Detector N: reports on the correctness of detector N-1.

And we know that the last detector (N) is always truthful.

We are to determine the truth of the eyewitness testimony.

How to approach?

We know the last detector is truthful. So we can start from the last detector and work backwards.

Let's denote:
  Let E be the actual truth value of the eyewitness testimony (what we need to find).
  Let D_i be the actual truth value (whether it is working correctly) of the i-th lie detector? But note: the problem does not directly give the actual truth of the detectors (except the last one). Instead, we are given the outputs of the detectors.

But note: the output of the i-th detector (for i>=2) is reporting whether the (i-1)-th detector is truthful. Specifically, if the i-th detector says "TRUTH", then it is asserting that the (i-1)-th detector is truthful. If it says "LIE", then it is asserting that the (i-1)-th detector is lying.

However, we don't know the actual truth of the detectors from 1 to N-1. But we know the last one (N) is truthful.

So we can propagate backwards:

Let valid[i] be the actual truthfulness of the i-th detector (true if truthful, false if lying). We know valid[N] = true.

Then, for i from N down to 2:
  The i-th detector reports about the (i-1)-th detector. Since we know whether the i-th detector is truthful (valid[i]), and we know what it reported (S_i, which is the string for the i-th detector), then we can determine the truthfulness of the (i-1)-th detector.

Specifically:
  If the i-th detector is truthful (valid[i] = true), then what it reports is true. So:
      If S_i is "TRUTH", then the (i-1)-th detector is truthful -> valid[i-1] = true.
      If S_i is "LIE", then the (i-1)-th detector is lying -> valid[i-1] = false.

  If the i-th detector is lying (valid[i] = false), then what it reports is false. So:
      If S_i is "TRUTH", then the reality is the opposite: the (i-1)-th detector is not truthful -> valid[i-1] = false.
      If S_i is "LIE", then the reality is the opposite: the (i-1)-th detector is truthful -> valid[i-1] = true.

We can combine these into a simple formula? 

Alternatively, we can express the relation as:
  valid[i-1] = (S_i == "TRUTH") ? valid[i] : !valid[i]

But wait, that is not exactly right. Actually, the value of valid[i-1] is determined by the report and the truthfulness of i:

  valid[i-1] is true if and only if the report S_i (about i-1) is consistent with the truth. However, the report S_i is about the truth of i-1. So:

  The i-th detector says: "the (i-1)-th detector is truthful" (if S_i is "TRUTH") or "the (i-1)-th detector is lying" (if S_i is "LIE").

  Since the i-th detector might be lying or truthful, the actual state of the (i-1)-th detector is:

      If the i-th detector is truthful, then:
          if S_i is "TRUTH" -> then the (i-1)-th is truthful.
          if S_i is "LIE" -> then the (i-1)-th is lying.

      If the i-th detector is lying, then:
          if S_i is "TRUTH" -> then the (i-1)-th is actually lying (because the statement is false).
          if S_i is "LIE" -> then the (i-1)-th is actually truthful (because the false statement "the (i-1)-th is lying" must be false).

We can see that:

  valid[i-1] = 
      if S_i == "TRUTH": then valid[i]   [because if the i-th is truthful, then we get true; if lying, then we get false? But wait, that doesn't match the above]

Alternatively, we can use an XOR-like operation:

  The actual truth of the (i-1)-th detector is the same as the report S_i if the i-th detector is truthful, and the opposite if the i-th detector is lying.

So: valid[i-1] = (valid[i] == (S_i == "TRUTH"))

But that doesn't look like a direct assignment.

Let me define:
  Let R_i = (S_i == "TRUTH")   [so R_i is true if the string is "TRUTH", false if "LIE"]

Then:
  If valid[i] is true, then valid[i-1] = R_i.
  If valid[i] is false, then valid[i-1] = not R_i.

This is equivalent to: valid[i-1] = valid[i] XOR (R_i is false?) ... Actually, we can write:

  valid[i-1] = (valid[i] == R_i)   ??? -> No, that's not the same.

Alternatively, we can use:

  valid[i-1] = (R_i == (valid[i] == true))   -> This is the same as: if valid[i] is true, then valid[i-1] = R_i; if valid[i] is false, then we require R_i to be false for valid[i-1] to be true? Not exactly.

We can do:

  valid[i-1] = valid[i] ? R_i : !R_i

But note: we can also express this as:

  valid[i-1] = (valid[i] == R_i) ? true : false   -> but that would be: if valid[i] equals R_i, then true, else false? Actually, no.

Actually, the above ternary is straightforward.

But we can also note:

  valid[i-1] = valid[i] XOR (R_i == false)   ??? 

Alternatively, we can use:

  Let me consider the effect:

      Case 1: valid[i] = true, R_i = true -> valid[i-1] = true.
      Case 2: valid[i] = true, R_i = false -> valid[i-1] = false.
      Case 3: valid[i] = false, R_i = true -> valid[i-1] = false.
      Case 4: valid[i] = false, R_i = false -> valid[i-1] = true.

This is the same as: valid[i-1] = (valid[i] == R_i) ? true : false   ??? -> Check:

      Case 1: true == true -> true -> valid[i-1] = true -> correct.
      Case 2: true == false -> false -> then we output false -> correct.
      Case 3: false == true -> false -> then we output false -> correct.
      Case 4: false == false -> true -> then we output true -> correct.

But wait, in the ternary above, we are saying: if (valid[i] == R_i) then true, else false. And that matches.

But actually, the expression (valid[i] == R_i) is exactly the value we want for valid[i-1]? 

In fact, we see from the cases: valid[i-1] is true in cases 1 and 4, and false in cases 2 and 3. And 1 and 4 are the cases where valid[i] and R_i are the same.

So: valid[i-1] = (valid[i] == R_i)

But wait, that's the same as: valid[i-1] = (valid[i] == (S_i == "TRUTH"))

However, let me test with the sample:

  N=4, and the inputs: 
      S1 = "LIE" -> R1 = false
      S2 = "LIE" -> R2 = false
      S3 = "TRUTH" -> R3 = true
      S4 = "TRUTH" -> R4 = true

We know valid[4] = true.

Then:
  i=4: we want valid[3] = (valid[4] == R4) = (true == true) = true -> correct.
  i=3: valid[2] = (valid[3] == R3) = (true == true) = true -> but in the example, the second detector was reported as LIE by the third? Actually, the third detector reported about the second: S3 is about the second detector.

But note: the i-th detector reports about the (i-1)-th. So when i=3, we are setting valid[2] (the second detector) from the third detector's report (S3) and the third detector's truthfulness (valid[3]).

In the example: 
  The third detector (which is truthful) reported "TRUTH" about the second detector. So the second detector is truthful -> valid[2] = true.

Then i=2: valid[1] = (valid[2] == R2) = (true == false) = false -> which matches the example: the first detector is lying.

Now, what about the first detector? The first detector reported about the eyewitness. But note: we have not used S1 yet.

We have propagated from N down to 1, and we have valid[1] (the truthfulness of the first detector). How do we get the eyewitness testimony?

The first detector reports on the eyewitness. So:

  If the first detector is truthful (valid[1] = true), then the eyewitness testimony is whatever S1 is.
  If the first detector is lying (valid[1] = false), then the eyewitness testimony is the opposite of S1.

So:
  Let E (the eyewitness) = 
        if valid[1] is true: then (S1 == "TRUTH") -> meaning if S1 is "TRUTH", then eyewitness is true; if S1 is "LIE", then eyewitness is false.
        if valid[1] is false: then the opposite: if S1 is "TRUTH", then eyewitness is false; if S1 is "LIE", then eyewitness is true.

Alternatively, we can write:

  E = (valid[1] == (S1 == "TRUTH"))   ??? 

But wait: 
  If valid[1] is true: then we want E = (S1=="TRUTH") -> which is the same as (true == (S1=="TRUTH")) -> so E = (S1=="TRUTH")
  If valid[1] is false: then we want E = not (S1=="TRUTH") -> which is the same as (false == (S1=="TRUTH"))? -> No, because if S1=="TRUTH", then false == true -> false, which is not the same as the desired true? 

Actually, we want:

  E = (S1 == "TRUTH")   if valid[1] is true.
  E = (S1 == "LIE")     if valid[1] is false? 

But note: if the first detector is lying and it says "TRUTH", then the eyewitness is lying (so we output "LIE"). If it says "LIE", then the eyewitness is truthful (so we output "TRUTH").

Alternatively, we can express E as:

  E = ( (S1 == "TRUTH") XOR (valid[1] == false) )

But we can also use:

  E = (valid[1] ? (S1=="TRUTH") : (S1=="LIE"))

But note: we can also do:

  E = ( (S1=="TRUTH") == valid[1] )   -> because:

      If valid[1] is true, then E = (S1=="TRUTH") -> correct.
      If valid[1] is false, then E = (S1=="TRUTH")? -> but we want the opposite. So that doesn't work.

Alternatively, we can define:

  Let R1 = (S1=="TRUTH")
  Then: E = (valid[1] == R1)   ??? 

Check:

  If valid[1] is true: then E = (true == R1) -> which is R1 -> which is (S1=="TRUTH") -> correct.
  If valid[1] is false: then E = (false == R1). 
        If R1 is true -> false == true -> false -> which means the eyewitness is false -> but we want when the detector is lying and says "TRUTH", then the eyewitness is false -> so that matches (false).
        If R1 is false -> false == false -> true -> which means the eyewitness is true -> and that matches: when the detector is lying and says "LIE", then the eyewitness is true.

So indeed: E = (valid[1] == R1)

But note: R1 is (S1=="TRUTH"). So:

  E = (valid[1] == (S1=="TRUTH"))

But wait, that expression returns a boolean. We then have to output "TRUTH" if that boolean is true, and "LIE" if false.

However, we must be cautious: the expression is:

  E = (valid[1] == (S1 == "TRUTH"))

But let me test with the sample:

  In sample #1: 
      S1 = "LIE" -> R1 = false.
      valid[1] = false (as we computed above).
      Then E = (false == false) = true -> so we output "TRUTH", which is correct.

  In sample #2:
      Input: 
        3
        LIE
        LIE
        LIE

      We know the last detector is truthful: valid[3] = true.

      Step i=3: we compute valid[2] = (valid[3] == (S3=="TRUTH")) = (true == (false)) = false.
      Step i=2: valid[1] = (valid[2] == (S2=="TRUTH")) = (false == (false)) = false == false -> true? 

      But wait: S2 is the second detector's report, which is about the first. S2 is "LIE" -> R2 = false.

      Then: valid[1] = (valid[2] == R2) = (false == false) = true.

      Then E = (valid[1] == R1) = (true == (S1=="TRUTH")) -> S1 is "LIE", so R1 = false -> true == false -> false -> so we output "LIE", which is the sample output.

But wait, the sample input #2 is:

  3
  LIE
  LIE
  LIE

Our computation:

  valid[3] = true (given, because the last one is truthful).
  For i=3: we look at S3 which is "LIE", so R3 = false. Then valid[2] = (valid[3] == R3) = (true == false) = false.
  For i=2: we look at S2 which is "LIE", so R2 = false. Then valid[1] = (valid[2] == R2) = (false == false) = true.
  Then E = (valid[1] == R1) = (true == (S1=="TRUTH")) -> S1 is "LIE", so R1 = false -> true == false -> false -> meaning the eyewitness is false -> output "LIE".

So the algorithm:

  Step 1: Read N.
  Step 2: Read the N strings and store them in an array S[0..N-1] (where S[0] is the first detector, S[N-1] is the last).

  Step 3: 
      Let valid[N-1] = true   (because the last detector is truthful).

  Step 4: For i from N-2 down to 0 (0-indexed: the last detector is at index N-1, then the one before is at N-2, etc.):
          Let R = (S[i+1] == "TRUTH")   [because the i-th detector's truthfulness is determined by the (i+1)-th detector's report? 
          But note: the detector at index i (which is the (i+1)-th detector? Actually, no: our array S[0] is the first detector, so the detector at index i is the (i+1)-th detector? 

          Actually, we have:
            S[0] -> detector 1
            S[1] -> detector 2
            ...
            S[N-1] -> detector N

          And the report from detector i (which is at index i-1 in 0-indexed) is about the detector i-1? Actually, the problem says the i-th detector (for i>=2) reports the truth of the (i-1)-th. 

          Therefore, the detector at index i (0-indexed) is the (i+1)-th detector. Then the report at index i (S[i]) is from the (i+1)-th detector, and it reports on the i-th detector? 

          But wait, the first detector is at index0: it is the first, and it reports on the eyewitness. The second detector (at index1) reports on the first detector. 

          So the report at index i (0-indexed) is from the (i+1)-th detector and is about the i-th detector? 

          However, when we are computing the truthfulness of the detectors, we have:

            We know the truthfulness of the last detector (index N-1) is true.

            Then we want to compute the truthfulness of the detector at index N-2 (which is the (N-1)-th detector) from the last detector's report (which is at index N-1) and that report is about the (N-1)-th detector? 

          Actually, the report of the last detector (the N-th, at index N-1) is about the (N-1)-th detector (which is at index N-2). 

          Therefore, to compute the truthfulness of the detector at index j (0-indexed) for j from N-2 down to 0, we use the report from the detector at index j+1 (which is the next one) and the truthfulness of the detector at index j+1.

          Specifically:

            valid[j] = (valid[j+1] == (S[j+1] == "TRUTH"))

          Why? 
            The detector at index j+1 (which is the (j+2)-th in 1-indexed) is reporting about the detector at index j (which is the (j+1)-th in 1-indexed). And we use the relation: 
                truthfulness of j = (truthfulness of j+1) == (the report from j+1 is "TRUTH")

          Then, after we have valid[0] (the truthfulness of the first detector), we compute the eyewitness:

            E = (valid[0] == (S[0] == "TRUTH"))

          Then output "TRUTH" if E is true, else "LIE".

Let me test with sample #1:

  Input: 
      4
      LIE    -> S[0] = "LIE"
      LIE    -> S[1] = "LIE"
      TRUTH  -> S[2] = "TRUTH"
      TRUTH  -> S[3] = "TRUTH"

  Steps:

      valid[3] = true (the last detector).

      j from 2 down to 0:

        j=2: valid[2] = (valid[3] == (S[3]=="TRUTH")) = (true == true) = true.
        j=1: valid[1] = (valid[2] == (S[2]=="TRUTH")) = (true == true) = true.
        j=0: valid[0] = (valid[1] == (S[1]=="TRUTH")) = (true == false) = false.

      Then E = (valid[0] == (S[0]=="TRUTH")) = (false == (false)) = (false == false) = true -> so output "TRUTH".

  This matches.

  Sample #2:

      Input: 
          3
          LIE   -> S[0] = "LIE"
          LIE   -> S[1] = "LIE"
          LIE   -> S[2] = "LIE"

      valid[2] = true.

      j=1: valid[1] = (valid[2] == (S[2]=="TRUTH")) = (true == false) = false.
      j=0: valid[0] = (valid[1] == (S[1]=="TRUTH")) = (false == false) = true.

      E = (valid[0] == (S[0]=="TRUTH")) = (true == false) = false -> output "LIE".

  This matches.

So the algorithm:

  Read N.
  Let S = array of N strings.

  valid = [False] * N   (or an array of booleans of size N, but we only need the next one to compute the previous, so we can use a single variable and propagate backwards without storing the entire array? However, we need the string S for the next step. But note: we have stored S.

  Alternatively, we can traverse backwards and only remember the last computed valid. But note: when we compute the eyewitness we need the first detector's truthfulness and the first report.

  Actually, we can do:

      current = true   (for the last detector, index N-1)
      Then for i from N-2 down to 0:
          R = (S[i+1] == "TRUTH")   // because the report for the detector at position i is given by the detector at i+1 (which is the next one) and that report is stored in S[i+1]?
          But wait: the report about the detector at position i is stored in the next detector (at index i+1). So we use S[i+1] to determine the truthfulness of the detector at i.

          Then: current = (current == (S[i+1]=="TRUTH"))

      Then after the loop, we have the truthfulness of the first detector (at index0) in 'current'. Then:

          E = (current == (S[0]=="TRUTH"))

      Then output "TRUTH" if E is true, else "LIE".

But note: the loop runs for i from N-2 down to 0, meaning we do:

  i = N-2: we compute the truthfulness for the detector at index N-2 (the second last) using the last detector's report (which is at S[N-1]?).

  Actually, the last detector is at index N-1, and it reports about the detector at index N-2. So we use S[N-1] for the detector at index N-2.

  Then for i = N-3: we use the report from the detector at index N-2? But we have stored the string S[N-2] for that.

  However, in the loop we are using S[i+1] -> when i = N-2, we use S[N-1]; when i = N-3, we use S[N-2], etc.

  Then at the end, we have the truthfulness of the first detector (index0) in 'current'.

  Then we use S[0] for the eyewitness computation.

But note: the eyewitness computation uses the report of the first detector (which is S[0]) and the truthfulness of the first detector (current).

So the code in pseudocode:

  N = int(input())
  S = []
  for i in range(N):
      s = input().strip()
      S.append(s)

  current = True   # for the last detector (index N-1) is truthful

  # We traverse backwards from the second last (index N-2) down to the first detector (index0)
  for i in range(N-2, -1, -1):   # i from N-2 to 0 inclusive
      # The report about the current detector (which we are going to compute for index i) is stored in the next detector (index i+1) -> so we look at S[i+1]
      R = (S[i+1] == "TRUTH")
      current = (current == R)

  # Now current is the truthfulness of the first detector (at index0)
  R0 = (S[0] == "TRUTH")
  eyewitness = (current == R0)

  if eyewitness:
      print("TRUTH")
  else:
      print("LIE")

But note: the propagation step: current = (current == R) is the same as:

  new_current = (current == R)

  And then we set current to that for the next iteration (which will be the previous detector).

Why is this? Because the current in the loop at step i represents the truthfulness of the detector at index i+1 (which we just had from the previous step). Then we use the report at S[i+1] (which is R) to compute the truthfulness of the detector at index i.

But in the next iteration, we will use this new current (which is the truthfulness of the detector at index i) to compute the truthfulness of the detector at index i-1.

We must be cautious: the propagation goes from the last to the first.

This algorithm runs in O(N) and uses O(N) memory (to store the strings). Since N can be up to 100000, and each string is either "TRUTH" or "LIE" (so 5 or 4 characters), the memory is acceptable.

Let me test with a small example: N=2

  Input:
      2
      TRUTH
      LIE

  Then: 
      S[0] = "TRUTH", S[1] = "LIE"

  current = true (for the last detector, index1).

  Then we do i from 0 to 0 (since N-2=0):
      i=0: 
          R = (S[1] == "TRUTH") = ("LIE"=="TRUTH") = false.
          current = (true == false) = false.

  Then: R0 = (S[0] == "TRUTH") = true.
        eyewitness = (false == true) = false -> output "LIE".

  Explanation:
      The second detector (last) is truthful. It says "LIE", meaning the first detector is lying. So the first detector is lying.
      Then the first detector says "TRUTH", but it is lying, so the eyewitness is lying -> "LIE". Correct.

Another small example: N=2

  Input:
      2
      LIE
      TRUTH

  Steps:
      current = true (for last)
      i=0: R = (S[1]=="TRUTH") = true -> current = (true == true) = true.
      Then R0 = (S[0]=="TRUTH") = false.
      eyewitness = (true == false) = false -> output "LIE".

  Explanation:
      The second detector (truthful) says "TRUTH", so the first detector is truthful.
      The first detector says "LIE", meaning the eyewitness is lying -> so we output "LIE". Correct.

One more: N=2

  Input:
      2
      TRUTH
      TRUTH

      current = true.
      i=0: R = (S[1]=="TRUTH") = true -> current = (true == true) = true.
      R0 = (S[0]=="TRUTH") = true.
      eyewitness = (true == true) = true -> output "TRUTH".

  Explanation: 
      Second detector (truthful) says "TRUTH", so the first detector is truthful.
      First detector says "TRUTH", so the eyewitness is truthful -> "TRUTH". Correct.

So the solution is:

  Read N and the list S of N strings.

  current = True   # for the last detector (index N-1) is truthful

  # Loop from the second last (index N-2) down to the first detector (index0)
  for i in range(N-2, -1, -1):
      # The report about the detector we are going to compute (at index i) is stored in the next detector (index i+1) -> string S[i+1]
      R = (S[i+1] == "TRUTH")
      current = (current == R)

  # Now current is the truthfulness of the first detector (index0)
  R0 = (S[0] == "TRUTH")
  result = (current == R0)

  if result:
      print("TRUTH")
  else:
      print("LIE")

This meets the constraints: O(N) time and O(N) space.

Why is it correct?
  We start from the last detector which is known to be truthful. Then we use the report of each detector (which is about the previous one) and the truthfulness of the current detector to infer the truthfulness of the previous one. Then we use the first detector's truthfulness and its report to determine the eyewitness.

  The relation for the truthfulness of the previous detector is: 
      If the current detector is truthful, then the previous detector's truthfulness is the same as the current detector's report about it (if the report says "TRUTH", then the previous is truthful; if "LIE", then the previous is lying).
      If the current detector is lying, then the previous detector's truthfulness is the opposite of the current detector's report.

  The expression `current = (current == R)` captures this because:

      Let current (before update) be the truthfulness of the detector at position i+1 (say, D_{i+1}).
      R is the report of D_{i+1} about the detector at i: if the report is "TRUTH", then R is true, meaning D_{i+1} claims that D_i is truthful.

      Then the truthfulness of D_i is: 
          if D_{i+1} is truthful (current true), then D_i is truthful if and only if R is true.
          if D_{i+1} is lying (current false), then D_i is truthful if and only if R is false? 

      But note: 
          If D_{i+1} is lying, then the claim "D_i is truthful" (if R is true) is false -> so D_i is lying -> we want false.
          If D_{i+1} is lying and the claim is "D_i is lying" (R=false), then that claim is false -> so D_i is actually truthful -> we want true.

      How does (current == R) work?
          Case 1: current=true, R=true -> true == true -> true.
          Case 2: current=true, R=false -> true == false -> false.
          Case 3: current=false, R=true -> false == true -> false.
          Case 4: current=false, R=false -> false == false -> true.

      This matches: 
          Case 3: D_{i+1} lying and R=true -> D_i is lying -> false -> matches.
          Case 4: D_{i+1} lying and R=false -> D_i is truthful -> true -> matches.

  Then the eyewitness: 
        The first detector (D_1) reports about the eyewitness: if it says "TRUTH", then it claims the eyewitness is truthful; if "LIE", then it claims the eyewitness is lying.

        Then the actual eyewitness is:
            if D_1 is truthful: then the eyewitness is truthful if and only if the report is "TRUTH".
            if D_1 is lying: then the eyewitness is truthful if and only if the report is "LIE" (because the claim that the eyewitness is lying is false, so the eyewitness is truthful).

        We can express this as: 
            eyewitness_truth = ( (D_1 is truthful) and (report=="TRUTH") ) or ( (D_1 is lying) and (report=="LIE") )

        Alternatively, note that if we define R0 = (report of D_1 is "TRUTH") [so true for "TRUTH", false for "LIE"], then:

            eyewitness_truth = (D_1 == R0) 

        Why?
            If D_1 is truthful: then we need R0 to be true -> so eyewitness_truth = true.
            If D_1 is truthful and R0 is false -> then eyewitness_truth = false.
            If D_1 is lying: then we need R0 to be false? But then (false == false) -> true? -> that would be if the report is "LIE" (so R0=false) then we get true -> which is correct.

        Actually, let me break down:

            D_1 truthful: 
                if report "TRUTH": R0=true -> (true==true)=true -> eyewitness_truth=true.
                if report "LIE": R0=false -> (true==false)=false -> eyewitness_truth=false.

            D_1 lying:
                if report "TRUTH": R0=true -> (false==true)=false -> but we want: when D_1 is lying and says "TRUTH", the eyewitness is lying -> false -> matches.
                if report "LIE": R0=false -> (false==false)=true -> we want: when D_1 is lying and says "LIE", the eyewitness is truthful -> true -> matches.

        So the expression (current == R0) is correct.

Therefore, the solution is as above.

Note: We are storing the entire list of strings, which is O(N) and acceptable for N up to 100000.

Let's write the code accordingly (but the problem asks for an editorial, so we don't write code? But the pseudocode above is part of the explanation).

Final pseudocode:

  Read N
  S = new array of strings of length N
  for i = 0 to N-1:
      read S[i]

  current = true   // the last detector (index N-1) is truthful

  // Traverse backwards from the detector at index N-2 down to 0
  for i = N-2 downto 0:
      // The report from the detector at index i+1 (which is the next one) is S[i+1]
      if S[i+1] == "TRUTH":
          R = true
      else:
          R = false

      current = (current == R)   // update current to be the truthfulness of the detector at index i

  // Now compute for the eyewitness
  if S[0] == "TRUTH":
      R0 = true
  else:
      R0 = false

  if current == R0:
      print "TRUTH"
  else:
      print "LIE"

But we can avoid the if in the loop by:

      R = (S[i+1] == "TRUTH")

  Then current = (current == R)

And similarly for R0.

This is efficient and clear.

We are done.